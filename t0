#!/bin/bash

source /home/eth/eth2/t1

function sbn { printf %s $($p02/ethdo $s27 node info 2>$p03|cut -d: -f2); }
function obn { ping -qnc 1 -W 1 ${1:-smtp.gmail.com} &>$p03; }
function srv { if [[ $cunm = $1 ]];then cd $p02;return;else swb "TEM DE ESTAR $1";return 1;fi; }
function tve { local f='';echo;for f in $(ls $p19/key*.json 2>$p03);do echo $(basename $f);done;echo;swn 'QUER MESMO SAIR ESTES VALIDATORS (SIM/nao)?';read rsp;if [[ $rsp = SIM ]];then return 0;else return 1;fi; }
function lve { [[ -d $p19 && $(ls $p19/key*.json 2>$p03) ]] && tve && { echo;swn "STORE($K)";echo;local f='';for f in $(ls $p19/key*.json 2>$p03);do echo $p00/lighthouse --datadir $p05 account validator exit --no-confirmation --keystore $f --beacon-node http://$(sni $cun2):5052;done; }; }
function ove { if obn;then swb 'TEM DE ESTAR OFFLINE';return 1;else return 0;fi; }
function ofe { if obn;then return 0;else swb 'TEM DE ESTAR ONLINE';return 1;fi; }
function eve {
  [[ -x $p02/ethdo     ]] || { dnv                              ; }
  [[ -x $p02/ethdo     ]] || { swb 'TEM DE TER ETHDO'    ;return; }
  [[ -d $p19 && $(ls $p19/key*.json 2>$p03) ]] && tve && { local f='';for f in $(ls $p19/key*.json 2>$p03);do echo $p02/ethdo $s27 validator exit --validator=$f --passphrase="$K";done; }
}
function eem {
  [[ -x $p02/ethdo     ]] || { dnv                              ; }
  [[ -x $p02/ethdo     ]] || { swb 'TEM DE TER ETHDO'    ;return; }
  [[ -f $p02/$s29.json ]] || { if [[ $(sbn) = false ]];then swn "$s29 validator exit data";$p02/ethdo $s27 validator exit --prepare-offline;else swb "TEM DE ESTAR ONLINE PARA $s29";return;fi; }
  [[ -f $p02/$s29.json ]] || { swb "TEM DE TER $s29.json";return; }
  ove && { if [[ $M ]];then local v='';for v in ${1:-${!b[@]}};do $p02/ethdo validator exit --offline --mnemonic="$M" --validator="$v" --json > $p19/exit-$v-${b[$v]}.json;swn "gerou exit-$v-${b[$v]}.json";done;else swb 'TEM DE TER M';fi; }
}
function dsd {
  srv hrv-zen || return
  [[ -x $p02/deposit ]] || { snv                            ; }
  [[ -x $p02/deposit ]] || { swb 'TEM DE TER DEPOSIT';return; }
  local v=${1:-1};local n=${2:-25}
  [[ -d $p19 && $(ls $p19           2>$p03) ]] || { if [[ $M ]];then if obn;then swb 'TEM DE ESTAR OFFLINE';else swb "GERAR $v CHAVES A PARTIR DE $n";$p02/deposit --language English --non_interactive existing-mnemonic --mnemonic "$M" --validator_start_index $n --num_validators $v --chain mainnet --keystore_password $K --execution_address $s25;fi;else swb 'TEM DE TER M';fi; }
  [[ -d $p19 && $(ls $p19/key*.json 2>$p03) ]] && { swb 'DEVE ARQUIVAR CHAVES & ACTUALIZAR VARS';for k in $(ls $p19/key*.json);do snf "$e22" $k;done; }
}
function esd {
  srv hrv-zen || return;esv
  [[ -x $p00/deposit ]] || { swb 'TEM DE TER DEPOSIT';return; }
  local v=${1:-1};local n=${2:-26}
  [[ -d $p19 && $(ls $p19           2>$p03) ]] || { if [[ $M ]];then if obn;then swb 'TEM DE ESTAR OFFLINE';else swb "GERAR $v CHAVES A PARTIR DE $n";$p00/deposit --language English --non_interactive existing-mnemonic --mnemonic "$M" --validator_start_index $n --num_validators $v --chain mainnet --keystore_password $K --withdrawal_address $s70 --compounding --amount 32;fi;else swb 'TEM DE TER M';fi; }
  [[ -d $p19 && $(ls $p19/key*.json 2>$p03) ]] && { swb 'DEVE ARQUIVAR CHAVES & ACTUALIZAR VARS';for k in $(ls $p19/key*.json);do snf "$e22" $k;done; }
}
function ewc {
  srv hrv-zen || return
  [[ -x $p02/ethdo     ]] || { dnv                              ; }
  [[ -x $p02/ethdo     ]] || { swb 'TEM DE TER ETHDO'    ;return; }
  [[ -f $p02/$s29.json ]] || { if [[ $(sbn) = false ]];then swn "prepare-offline validator credentials data";$p02/ethdo $s27 validator credentials set --prepare-offline;else swb "TEM DE TER BN SYNCED";return;fi; }
  [[ -f $p02/$s29.json ]] || { swb "TEM DE TER $s29.json";return; }
  [[ -f $p02/$s46.json ]] || { if [[ $M ]];then if obn;then swb 'TEM DE ESTAR OFFLINE';else $p02/ethdo validator credentials set --offline --mnemonic="$M" --withdrawal-address=$s25;fi;else swb 'TEM DE TER M';fi; }
  [[ -f $p02/$s46.json ]] || { swb "TEM DE TER $s46.json";return; }
  [[ -f $p02/$s46.done ]] || { if obn;then swb 'Changing withdrawal credentials';$p02/ethdo $s27 validator credentials set;touch $p02/$s46.done;else swb 'TEM DE ESTAR ONLINE';fi; }
  if obn;then local v='';for v in $@;do swn "Indice $v: $($p02/ethdo $s27 validator credentials get --validator=$v)";done;else swb 'TEM DE ESTAR ONLINE';fi
}
function ewi {
  srv hrv-zen || return
  [[ -x $p02/ethdo ]] || { dnv                          ; }
  [[ -x $p02/ethdo ]] || { swb 'TEM DE TER ETHDO';return; }
  if obn;then for v in $@;do swn "Indice $v: $($p02/ethdo $s27 validator withdrawal --validator=$v)";done;else swb 'TEM DE ESTAR ONLINE';fi
}
function wsh {
  srv hrv-zen || return;gnv
  [[ -x $p00/ethereal ]] || { rlv                              ; }
  [[ -x $p00/ethereal ]] || { swb 'TEM DE TER ETHEREAL' ;return; }
  [[ $M               ]] || { swb 'TEM DE TER M        ';return; }
  ove && $p00/ethereal hd keys --seed="$M" --path="$s69/${1:-0}"
}
function wcc {
  srv hrv-zen || return;gnv
  [[ $1               ]] || { swb 'TEM DE TER INDEX    ';return; }
  [[ $K               ]] || { swb 'TEM DE TER K        ';return; }
  [[ -x $p00/ethereal ]] || { rlv                              ; }
  [[ -x $p00/ethereal ]] || { swb 'TEM DE TER ETHEREAL' ;return; }
  ofe && echo $p00/ethereal validator consolidate $s68 --source-validator="${b[$1]}" --target-validator="${b[-1]}" --from="$s70" --privatekey="$K"
}

[[ $1 = dsd ]] && { dsd $2 $3; }
[[ $1 = esd ]] && { esd $2 $3; }
[[ $1 = ewc ]] && { ewc ${b[@]}; }
[[ $1 = ewi ]] && { ewi ${b[@]}; }
[[ $1 = wsh ]] && { wsh $2; }
[[ $1 = wcc ]] && { wcc $2; }
[[ $1 = eve ]] && { eve; }
[[ $1 = eem ]] && { eem $2; }
[[ $1 = lve ]] && { lve; }

if [[ ! $1 ]];then
  m=''
  m="$m\newc\t\tBLS Withdrawal Credentials"
  m="$m\newi\t\tNext Withdrawal Information"
  m="$m\ndsd [v] [n]\tStaking Deposit\t\t\t\t\t(v=chaves, n=chaves anteriores)"
  m="$m\nesd [v] [n]\tEthStaker Deposit\t\t\t\t(v=chaves, n=chaves anteriores)"
  m="$m\nwsh [p]\t\tWallet show\t\t\t\t\t(ethereal p=path)"
  m="$m\nwcc  v\t\tconsolidate [v]alidator into compounding\t(ethereal v=index)"
  m="$m\neve\t\tvoluntary exit\t\t\t\t\t(ethdo)"
  m="$m\neem [v]\t\tvoluntary exit - generate signed json\t\t(ethdo v=validator)"
  m="$m\nlve\t\tvoluntary exit\t\t\t\t\t(lighthouse)"
  swn "$m\n"
fi

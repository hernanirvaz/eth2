#!/bin/bash

source /home/eth/eth2/t1

function cc1 { local f=$(basename $1);sex "cp $1 $f.sav";cmw $f.sav 644 eth;sed  -e "$2" $f.sav > $f.new;sex "cp $f.new $1"; }                                # edit             file
function cc2 { local f=$(basename $1);cp $1 $f.sav;cp $1 $f.new            ;echo -e "$2"       >> $f.new;sex "cp $f.new $1"; }                                # add lines to end file
function cc3 { local f=$(basename $1);cp $1 $f.sav;sed "$2" $1 > $f.new    ;echo -e "$3"       >> $f.new;sex "cp $f.new $1"; }                                # add lines to pos file
function cc4 { local f=$(basename $1);cp $1 $f.sav 2>${p[3]}               ;echo -e "$2"        > $f.new;sex "cp $f.new $1"; }                                # replace lines of file

[[ -x ${p[9]}/eth2/t ]] || ln -s ${p[9]}/eth2/t6 ${p[9]}/eth2/t                                                                                               # link base commands
if [[ $(pex 'ufw status'|grep -i inactive) ]];then
  swu 'INIT FIREWALL';sex 'ufw default deny incoming';sex 'ufw default allow outgoing'                                                                        # base ufw
  pde 22/tcp ossh
  [[ $cust = hrv   ]] && { idi 192.168.8.0/24 224.0.0.1 multicast; }                                                                                          # deny  ssh/multicasting
  [[ $cunm = $vnm1 ]] && { ple 2020/tcp nssh; }                                                                                                               # limit ssh
  [[ $cunm = $znm1 ]] && { ple 2021/tcp nssh; }                                                                                                               # limit ssh
  [[ $cunm = $znm2 ]] && { ple 2022/tcp nssh;pai 123/udp 192.168.8.0/24 ntp; }                                                                                # limit ssh;allow ntp
  [[ $cunm = $znm3 ]] && { ple 2023/tcp nssh; }                                                                                                               # limit ssh
  [[ $cunm = $znm4 ]] && { ple 2024/tcp nssh; }                                                                                                               # limit ssh
  sex 'ufw reload';yex 'ufw enable'                                                                                                                           # reload/enable
else
  cex 'ufw status numbered'                                                                                                                                   # show
fi
[[ -f $(pjp 4 70).service || -f $(pjp 4 87).service || -f $(pjp 4 71).service || -f $(pjp 4 73).service ]] && exit                                            # ec/cl instalados -> exit
swu 'UPDATE LINUX'       ;t4update linux;sex 'apt install python3-pip net-tools apt-listchanges landscape-common software-properties-common -y'
swu 'UNATTENDED UPGRADES';cex 'apt install unattended-upgrades update-notifier-common -y'
swu 'LINUX CONFIGS'
if [[ $cunm = $znm2 ]];then
  cex "${p[67]} set-ntp no"                                                                                                                                   # use ntp       (sophisticated)
  cex 'apt install apt-transport-https curl ntp -y'                                                                                                           # install dependencies & ntp
  cc1 ${p[30]} "${p[49]}"                                     ;cmw ${p[30]} 644 root;nex "${p[66]} ntp"                                                       # ntp config for time synchronization
  echo deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list                                             # add apt source for plex
  curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -;sex 'apt update'                                                                 # add apt key    for plex
  cex 'apt install nginx plexmediaserver transmission-cli transmission-common transmission-daemon -y'                                                         # install nginx/plex/transmission
  sex "usermod -a -G debian-transmission eu";sex "mkdir -p /sata/downloads";cmw /sata/downloads 775 debian-transmission                                       # prepare downloads
  cc4 ${p[32]} "${p[81]}"                                     ;cmw ${p[32]} 644 root               ;sex "${p[60]} reload ${p[80]}"                            # nginx config for plex
  cc1 ${p[33]} "${p[52]}"                                     ;cmw ${p[33]} 600 debian-transmission;sex "${p[60]} reload ${p[72]}"                            # transmission config
else
  cex "${p[67]} set-ntp on"                                                                                                                                   # use timesyncd (lightweight)
fi
if [[ $cust = hrv ]];then
  swu 'ROOTKIT SCANNER';sex 'apt install lm-sensors chkrootkit bind9 bind9utils -y';cex 'chkrootkit'
  sex "${p[67]} set-timezone Europe/Lisbon"
  cc1 ${p[19]} "${p[40]}"                                                                                                                                     # my      time servers
  cc1 ${p[20]} "${p[41]}"                                     ;cmw ${p[20]} 644 root                                                                          # motd-news disable
  cc4 ${p[21]} "${p[56]}"                                     ;cmw ${p[21]} 644 root                                                                          # new netplan
  cc1 ${p[25]} "${p[46]}"                                     ;cmw ${p[25]} 755 root                                                                          # grub timeout
  cc1 ${p[34]} "${p[83]}"                                     ;cmw ${p[34]} 644 root                                                                          # hosts config
  cc4 ${p[35]} "${p[82]}"                                     ;cmw ${p[35]} 644 root                                                                          # ssh config
  cc3 ${p[28]} "${p[48]}" "${p[55]}"                          ;cmw ${p[28]} 644 root bind                                                                     # named my options
  cc1 ${p[29]} "${p[42]}"                                     ;cmw ${p[29]} 644 root                                                                          # use only ipv4
  cc1 ${p[39]} "${p[111]}"                                    ;cmw ${p[39]} 644 root                                                                          # no swap - bad for IOPS
  nex 'update-grub'
  t6 spd;t6 sea;nex "${p[62]} systemd-resolved";nex "${p[63]} systemd-resolved"                                                                               # DNS stop & start
else
  sex "${p[67]} set-timezone Europe/Berlin"
  cc1 ${p[19]} "${p[53]}"                                                                                                                                     # general time servers
  nex "mv -f /etc/motd ${p[9]}/motd.sav"                                                                                                                      # no contabo info
fi                                                            ;cmw ${p[19]} 644 root;nex "$(pjw 66 77)"                                                       # timesyncd cmod & restart
cc1 ${p[22]} "${p[43]}"                                       ;cmw ${p[22]} 644 root                                                                          # unattended-upgrades
cc1 ${p[23]} "${p[44]}"               ;cc2 ${p[23]} "${p[45]}";cmw ${p[23]} 755 root                                                                          # header add my motd
cc1 ${p[24]} "${p[44]}"                                       ;cmw ${p[24]} 755 root                                                                          # help-text delete
cc1 ${p[26]} "s%^ *${p[1]}%# ${p[1]}%";cc2 ${p[26]} "${p[54]}";cmw ${p[26]} 644 root                                                                          # new logrotate add
[[ -x ${p[27]} ]] && sex "chmod -x ${p[27]}"                                                                                                                  # motd overlayroot unexecute
nex "${p[60]} daemon-reload";sudo dpkg-reconfigure -plow unattended-upgrades                                                                                  # unattended upgrades
if [[ $cunm = $znm1 || $cunm = $znm4 || $cunm = $vnm1 ]];then                                                                                                 # ec here
  swu 'INSTALAR GETH';t6 jwt;sex 'add-apt-repository -y ppa:ethereum/ethereum';sex 'apt update -y';cex 'apt install ethereum -y'                              # geth execution client needs
  sex "mkdir -p ${p[18]}/geth";sau eth1;cmw ${p[18]} 755 eth1;cmw ${p[18]}/geth 700 eth1                                                                      # create dir & user for ec
  maxp=50                                                                                                                                                     # default
  pp2p=30303                                                                                                                                                  # default
  othe=''
  othe="$othe --http.corsdomain 'chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn' --http.vhosts '*'"                                                      # for metamask
  cat <<-EOF > ${p[70]}.service
	[Unit]
	Description=geth service
	Wants=network-online.target
	After=network-online.target
	
	[Service]
	User=eth1
	Group=eth1
	Restart=always
	RestartSec=10
	TimeoutStopSec=300
	ExecStart=${p[8]}/geth --datadir ${p[18]} --port $pp2p --http --http.addr $zip1$othe --maxpeers $maxp --authrpc.addr $zip1 --authrpc.jwtsecret ${p[18]}/geth/jwt
	ExecStopPost=${p[9]}/eth2/t8mail GETHSTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
	
	[Install]
	WantedBy=multi-user.target
	EOF
  sex "mv ${p[70]}.service $(pjp 4 70).service";cmw $(pjp 4 70).service 644
  if [[ -f jwt ]];then sjw eth1 ${p[18]}/geth;else swb "needs ${p[18]}/geth/jwt secret";fi
  swu 'INSTALAR BESU';sex 'apt install default-jdk libjemalloc-dev -y';cc2 ${p[36]} "${p[88]}";cmw ${p[36]} 644 root                                          # besu execution client needs
  sex "mkdir -p ${p[37]}/data";sau eth1;cmw ${p[37]} 755 eth1;cmw ${p[37]}/data 700 eth1                                                                      # create dir & user for ec
  unv                                                                                                                                                         # download/install besu binaries
  alow='192.168.8.25,192.168.8.28,192.168.8.31,192.168.8.34'                                                                                                  # my servers
  maxp=25                                                                                                                                                     # default
  pp2p=30303                                                                                                                                                  # default
  epec="--miner-enabled=true --miner-coinbase=\"${p[99]}\""                                                                                                   # coincashew guide had these NOT USING
  epec="--pruning-enabled=true"                                                                                                                               # pruning deprecated for bonsai tries
  epec="--sync-mode=X_SNAP --data-storage-format=BONSAI"                                                                                                      # recommend snap sync/bonsai
  epec="$epec --p2p-port=$pp2p --rpc-http-enabled=true --rpc-http-host=$zip1"                                                                                 # enable  rpc:8545
  eped="$eped --rpc-http-cors-origins=chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn"                                                                    # for metamask
  epec="$epec --max-peers=$maxp"                                                                                                                              # set p2p connections
  epec="$epec --engine-jwt-secret=${p[37]}/data/jwt --host-allowlist=$alow --engine-host-allowlist=$alow"                                                     # MERGE
  cat <<-EOF > ${p[87]}.service
	[Unit]
	Description=besu service
	Wants=network-online.target
	After=network-online.target
	
	[Service]
	User=eth1
	Group=eth1
	Restart=always
	RestartSec=10
	TimeoutStopSec=300
	ExecStart=${p[0]}/besu/bin/besu --data-path=${p[37]}/data $epec
	ExecStopPost=${p[9]}/eth2/t8mail BESUSTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
	
	[Install]
	WantedBy=multi-user.target
	EOF
  sex "mv ${p[87]}.service $(pjp 4 87).service";cmw $(pjp 4 87).service 644
  if [[ -f jwt ]];then sjw eth1 ${p[37]}/data;else swb "needs ${p[37]}/data/jwt secret";fi
fi
swn 'sudo netplan apply'
swn 'AND reboot'
swn 'para iniciar ec: t6 jwt;t gea'

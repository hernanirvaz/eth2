#!/bin/bash

meeu=$(whoami)
cunm=$(uname -n)
cust=$(uname -n|cut -c1-3)
zip1='192.168.8.25'
zip2='192.168.8.28'
zip3='192.168.8.31'
zip4='192.168.8.34'
znm1='hrv-zotac1'
znm2='hrv-zotac2'
znm3='hrv-zotac3'
znm4='hrv-zotac4'
vip1='207.180.214.8'
vip2='173.249.42.190'
vip3='164.68.107.45'
vnm1='vmi471826.contaboserver.net'
vnm2='vmi506976.contaboserver.net'
vnm3='vmi469069.contaboserver.net'
if [[ $cust = hrv ]];then ciec=$zip1;else ciec=$vip1;fi;[[ $cunm = $znm4 ]] && ciec=$zip4                                                                     # current ec
cuvc=$znm4                                                                                                                                                    # current vc

unset p
p[0]='/usr/local/bin'
p[1]='/var/log/syslog'
p[2]='/etc/prometheus'
p[3]='/dev/null'
p[4]='/etc/systemd/system'
p[5]='/var/run/reboot-required'
p[6]='/sys/bus/usb/devices/1-0:1.0/authorized'
p[7]='/sys/devices/system/cpu/intel_pstate/no_turbo'
p[8]='/usr/bin'
p[9]='/home/eth'
p[10]='/var/lib/lighthouse';[[ $cunm = $znm2 ]] && p[10]='/sata/lighthouse'                                                                                   # cl data
p[11]="${p[9]}/beacon.log"                                                                                                                                    # cc minute log
p[12]="${p[9]}/bmedias.log"                                                                                                                                   # cc daily  log
p[13]="${p[9]}/geth.log"                                                                                                                                      # ec minute log
p[14]="${p[9]}/barqivo.log"                                                                                                                                   # cc yearly log
p[15]="${p[9]}/beacon.restart"                                                                                                                                # cl restart control files
p[16]="${p[10]}/beacon"                                                                                                                                       # cc data
p[17]="${p[10]}/validators"                                                                                                                                   # vc data
p[18]='/var/lib/goethereum';[[ $cunm = $znm4 ]] && p[18]='/sata/goethereum'                                                                                   # el data
p[19]="$(dirname ${p[4]})/timesyncd.conf"                                                                                                                     # Network Time Synchronization configuration
p[20]='/etc/default/motd-news'                                                                                                                                # disable dynamic MOTD news service
p[21]='/etc/netplan/00-installer-config.yaml'                                                                                                                 # network configuration abstraction
p[22]='/etc/apt/apt.conf.d/50unattended-upgrades'                                                                                                             # automatically upgrade packages
p[23]='/etc/update-motd.d/00-header'                                                                                                                          # delete header of the MOTD
p[24]='/etc/update-motd.d/10-help-text'                                                                                                                       # delete help text associated with the distro
p[25]='/etc/grub.d/30_os-prober'                                                                                                                              # grub-mkconfig helper script
p[26]='/etc/logrotate.d/rsyslog'                                                                                                                              # automatic rotation syslog config
p[27]='/etc/update-motd.d/97-overlayroot'                                                                                                                     # unexecute MOTD Protecting Root Filesystem
p[28]='/etc/bind/named.conf.options'                                                                                                                          # options domain name server
p[29]='/etc/default/named'                                                                                                                                    # default domain name server
p[30]='/etc/ntp.conf'                                                                                                                                         # ntpd config
p[31]="${p[17]}/slashing_protection.sqlite"                                                                                                                   # cl slashing_protection data
p[32]='/etc/nginx/conf.d/plexmediaserver.conf'                                                                                                                # nginx config for plex
p[33]='/etc/transmission-daemon/settings.json'                                                                                                                # transmission settings
p[34]='/etc/hosts'                                                                                                                                            # hosts config
p[35]='/etc/ssh/ssh_config.d/ztc.conf'                                                                                                                        # ssh config
p[36]='/etc/environment'                                                                                                                                      # system environment
p[37]='/var/lib/javaethereum';[[ $cunm = $znm4 ]] && p[37]='/sata/javaethereum'                                                                               # el data

# sed/grep scripts
p[40]='s%^ *#*NTP=.*$%NTP=192.168.8.28 ntp02.oal.ul.pt ntp04.oal.ul.pt time.google.com time.cloudflare.com time.facebook.com%i'                               # my time servers
p[41]='s%^ *ENABLED=.*$%ENABLED=0%i'                                                                                                                          # motd-news disable
p[42]='s%bind[^"]*"%bind -4"%'                                                                                                                                # use only ipv4
p[43]='s%^ */* *Unattended-Upgrade::Mail .*$%Unattended-Upgrade::Mail "hernanilr@gmail.com";%i;s%^ */*\(.*codename}-updates.*$\)%\1%i'                        # unattended-upgrades
p[44]='s%^ *printf%# printf%i'                                                                                                                                # unprint stuff
p[45]='printf "Welcome to %s %s\\n" "$(uname -n)" "$DISTRIB_DESCRIPTION"'                                                                                     # my header motd
p[46]='s%timeout *=.*$%timeout=1%i'                                                                                                                           # grub timeout
p[47]='geth\[\|besu\[\|lighthouse'                                                                                                                            # el/cl clients
p[48]='/dnssec-validation/q'                                                                                                                                  # print lines until pattern
p[49]="s%^ *pool \([^a-z]\)%# pool \1%"                                                                                                                       # ntp del other pool servers
p[49]="${p[49]};s%^ *#.*restrict.*192.*%restrict 192.168.8.0 mask 255.255.255.0 notrap nomodify%"                                                             # ntp my lan unlimited access
p[49]="${p[49]};/^ *#.*Specify/a "                                                                                                                            # ntp my pool servers
p[49]="${p[49]}pool 0.pt.pool.ntp.org iburst"
p[49]="${p[49]}\npool 0.europe.pool.ntp.org iburst"
p[49]="${p[49]}\npool 1.europe.pool.ntp.org iburst"
p[49]="${p[49]}\npool 0.ubuntu.pool.ntp.org iburst"
p[50]="s%--execution-endpoint  *\([^ ]*/\)[0-9\.]*:8551[^ ]*%--execution-endpoint \1$zip4:8551%"                                                              # cc service change to 34 (merge)
p[51]="s%--execution-endpoint  *\([^ ]*/\)[0-9\.]*:8551[^ ]*%--execution-endpoint \1$zip1:8551%"                                                              # cc service change to 25 (merge)
p[52]="s%download-dir\": \"[^\"]*\"%download-dir\": \"/sata/downloads\"%"                                                                                     # transmission config
p[52]="${p[52]};s%incomplete-dir\": \"[^\"]*\"%incomplete-dir\": \"/sata/downloads\"%"
p[52]="${p[52]};s%lpd-enabled\": .*%lpd-enabled\": true,%"
p[52]="${p[52]};s%rpc-whitelist\": \"[^\"]*\"%rpc-whitelist\": \"127.0.0.1,192.168.8.*\"%"
p[52]="${p[52]};s%rpc-username\": \"[^\"]*\"%rpc-username\": \"eu\"%"
p[52]="${p[52]};s%rpc-password\": \"[^\"]*\"%rpc-password\": \"\"%"
p[52]="${p[52]};s%umask\": [0-9]*%umask\": 2%"
p[53]='s%^ *#*NTP=.*$%NTP=time.google.com time.cloudflare.com time.facebook.com%i'                                                                            # general time servers
p[54]="\n${p[1]}\n{\n\trotate 7\n\tdaily\n\tmissingok\n\tnotifempty\n\tnocompress\n\tsharedscripts\n\tpostrotate\n\t\t/usr/lib/rsyslog/rsyslog-rotate\n\tendscript\n}"
p[55]=""
p[55]="${p[55]}\n\tlisten-on { any; };"
p[55]="${p[55]}\n\tlisten-on-v6 { none; };"
p[55]="${p[55]}\n\tversion \"not currently available\";"
p[55]="${p[55]}\n\trecursion yes;"
p[55]="${p[55]}\n\tallow-recursion { localhost; 192.168.8.0/24; };"
p[55]="${p[55]}\n\tallow-query { localhost; 192.168.8.0/24; };"
if [[ $cunm = $znm2 ]];then
  p[55]="${p[55]}\n\tallow-transfer { 192.168.8.25; 192.168.8.31; 192.168.8.34; };"
  p[55]="${p[55]}\n\talso-notify { 192.168.8.25; 192.168.8.31; 192.168.8.34; };"
  p[55]="${p[55]}\n\tmax-cache-size 50%;"
else
  p[55]="${p[55]}\n\tallow-transfer { none; };"
  p[55]="${p[55]}\n\tmax-cache-size 10%;"
fi
p[55]="${p[55]}\n\tquerylog yes;"
p[55]="${p[55]}\n};"
p[56]=""
p[56]="${p[56]}\nnetwork:"
p[56]="${p[56]}\n  version: 2"
p[56]="${p[56]}\n  renderer: networkd"
p[56]="${p[56]}\n  ethernets:"
for m in $(ip l|sed -n 's%.* \([a-z0-9]*\): .* state UP .*%\1%p'|tail -n1);do
  p[56]="${p[56]}\n    $m:"
  p[56]="${p[56]}\n      match:"
  p[56]="${p[56]}\n        macaddress: $(cat /sys/class/net/$m/address)"
  p[56]="${p[56]}\n      dhcp4: false"
  [[ $cunm = $znm1 ]] && p[56]="${p[56]}\n      addresses: [192.168.8.25/24]"
  [[ $cunm = $znm2 ]] && p[56]="${p[56]}\n      addresses: [192.168.8.28/24]"
  [[ $cunm = $znm3 ]] && p[56]="${p[56]}\n      addresses: [192.168.8.31/24]"
  [[ $cunm = $znm4 ]] && p[56]="${p[56]}\n      addresses: [192.168.8.34/24]"
  p[56]="${p[56]}\n      critical: true"
  p[56]="${p[56]}\n      routes:"
  p[56]="${p[56]}\n        - to: 0.0.0.0/0"
  p[56]="${p[56]}\n          via: 192.168.8.254"
  p[56]="${p[56]}\n          metric: 100"
  p[56]="${p[56]}\n          on-link: true"
  p[56]="${p[56]}\n      nameservers:"
  [[ $cunm = $znm1 ]] && p[56]="${p[56]}\n        addresses: [192.168.8.28, 192.168.8.25]"
  [[ $cunm = $znm2 ]] && p[56]="${p[56]}\n        addresses: [192.168.8.28, 192.168.8.25]"
  [[ $cunm = $znm3 ]] && p[56]="${p[56]}\n        addresses: [192.168.8.28, 192.168.8.25]"
  [[ $cunm = $znm4 ]] && p[56]="${p[56]}\n        addresses: [192.168.8.28, 192.168.8.25]"
  p[56]="${p[56]}\n      link-local: [ ]"
done
for m in $(ip l|sed -n 's%.* \([a-z0-9]*\): .* state DOWN .*%\1%p');do
  p[56]="${p[56]}\n    $m:"
  p[56]="${p[56]}\n      dhcp4: true"
  if [[ $m =~ ^wlo[0-9] ]];then
    p[56]="${p[56]}\n      activation-mode: off"
  else
    p[56]="${p[56]}\n      activation-mode: manual"
  fi
done
p[57]='s%--subscribe-all-subnets --import-all-attestations %%'                                                                                                # cc service remove long-lived
p[58]='s%--validator-monitor-file%--subscribe-all-subnets --import-all-attestations --validator-monitor-file%'                                                # cc service add    long-lived
p[59]='s%--beacon-nodes *\([^ ]*:5052\),\([^ ]*:5052\)[^ ]*%--beacon-nodes \2,\1%'                                                                            # vc service switch cc order

# services management
p[60]='systemctl'
p[61]="${p[60]} status"
p[62]="${p[60]} stop"
p[63]="${p[60]} start"
p[64]="${p[60]} enable"
p[65]="${p[60]} disable"
p[66]="${p[60]} restart"
p[67]='timedatectl'
p[68]='networkctl'
p[69]='resolvectl'
p[70]='eth-geth'
p[71]='eth-beacon'
p[72]='transmission-daemon'
p[73]='eth-validator'
p[74]='prometheus'
p[75]='prometheus-node-exporter'
p[76]='grafana-server'
p[77]='systemd-timesyncd'
p[78]='named'
p[79]='plexmediaserver'
p[80]='nginx'
p[81]='server {'
p[81]="${p[81]}\nlisten 80;"
p[81]="${p[81]}\nserver_name $zip2;"
p[81]="${p[81]}\nlocation / {"
p[81]="${p[81]}\nproxy_pass http://127.0.0.1:32400;"
p[81]="${p[81]}\nproxy_set_header Host \$host;"
p[81]="${p[81]}\nproxy_set_header X-Real-IP \$remote_addr;"
p[81]="${p[81]}\nproxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;"
p[81]="${p[81]}\n#upgrade to WebSocket protocol when requested"
p[81]="${p[81]}\nproxy_set_header Upgrade \$http_upgrade;"
p[81]="${p[81]}\nproxy_set_header Connection \"Upgrade\";"
p[81]="${p[81]}\n}"
p[81]="${p[81]}\n}"
p[82]=""
[[ $cunm = $znm1 ]] && p[82]="${p[82]}\nHost ztc2\n  Port 2022\n  IdentityFile ~/.ssh/id_ed25519\n\nHost ztc3\n  Port 2023\n  IdentityFile ~/.ssh/id_ed25519\n\nHost ztc4\n  Port 2024\n  IdentityFile ~/.ssh/id_ed25519"
[[ $cunm = $znm2 ]] && p[82]="${p[82]}\nHost ztc1\n  Port 2021\n  IdentityFile ~/.ssh/id_ed25519\n\nHost ztc3\n  Port 2023\n  IdentityFile ~/.ssh/id_ed25519\n\nHost ztc4\n  Port 2024\n  IdentityFile ~/.ssh/id_ed25519"
[[ $cunm = $znm3 ]] && p[82]="${p[82]}\nHost ztc1\n  Port 2021\n  IdentityFile ~/.ssh/id_ed25519\n\nHost ztc2\n  Port 2022\n  IdentityFile ~/.ssh/id_ed25519\n\nHost ztc4\n  Port 2024\n  IdentityFile ~/.ssh/id_ed25519"
[[ $cunm = $znm4 ]] && p[82]="${p[82]}\nHost ztc1\n  Port 2021\n  IdentityFile ~/.ssh/id_ed25519\n\nHost ztc2\n  Port 2022\n  IdentityFile ~/.ssh/id_ed25519\n\nHost ztc3\n  Port 2023\n  IdentityFile ~/.ssh/id_ed25519"
p[83]="s%hrv-zotac\([0-9]\).*%hrv-zotac\1 ztc\1%;/127.0.1.1/a \ "
[[ $cunm = $znm1 ]] && p[83]="${p[83]}\n192.168.8.28\thrv-zotac2 ztc2\n192.168.8.31\thrv-zotac3 ztc3\n192.168.8.34\thrv-zotac4 ztc4"
[[ $cunm = $znm2 ]] && p[83]="${p[83]}\n192.168.8.25\thrv-zotac1 ztc1\n192.168.8.31\thrv-zotac3 ztc3\n192.168.8.34\thrv-zotac4 ztc4"
[[ $cunm = $znm3 ]] && p[83]="${p[83]}\n192.168.8.25\thrv-zotac1 ztc1\n192.168.8.28\thrv-zotac2 ztc2\n192.168.8.34\thrv-zotac4 ztc4"
[[ $cunm = $znm4 ]] && p[83]="${p[83]}\n192.168.8.25\thrv-zotac1 ztc1\n192.168.8.28\thrv-zotac2 ztc2\n192.168.8.31\thrv-zotac3 ztc3"
p[83]="${p[83]}\n207.180.214.8\tvpsl"
p[83]="${p[83]}\n173.249.42.190\tvpsm"
p[83]="${p[83]}\n164.68.107.45\tvpss"

function pjp { local e="";[[ $# -ge 1 ]] && { e="${p[$1]}";shift; };until [[ $# -lt 1 ]];do e="$e/${p[$1]}";shift;done;echo "$e"; }                           # paths join
function pjw { local e="";[[ $# -ge 1 ]] && { e="${p[$1]}";shift; };until [[ $# -lt 1 ]];do e="$e ${p[$1]}";shift;done;echo "$e"; }                           # words join
function swb { echo -e "\n\e[5m${1^^}\e[25m\n"; }                                                                                                             # get flash
function swu { echo -e "${1^^}"; }                                                                                                                            # get upper
function swn { echo -e "$1"; }                                                                                                                                # get normal
function sau { id $1 &>${p[3]} || sex "useradd --no-create-home --shell /bin/false $1"; }                                                                     # system useradd
function cmw { [[ $2 ]] && sex "chmod $2 $1";[[ $3 ]] && sex "chown $3:${4:-$3} $1"; }                                                                        # chmod/chown file
function cex { swb "$1";echo $H|sudo -S $1       2>${p[3]}; }                                                                                                 # superuser-command (visible)
function nex { swn "$1";echo $H|sudo -S $1       2>${p[3]}; }                                                                                                 # superuser-command (visible)
function yex { swb "$1";echo $H|sudo -S $1 <<< y &>${p[3]}; }                                                                                                 # superuser-command (visible & yes)
function pex {          echo $H|sudo -S $1       2>${p[3]}; }                                                                                                 # superuser-command (pipe)
function sex {          echo $H|sudo -S $1       &>${p[3]}; }                                                                                                 # superuser-command (silent)
function idi { local e="deny from $1 to $2"                       ;if [[ $4 ]];then nex "ufw $4 $e";else nex "ufw $e comment $3";fi; }                        # deny  frm ip to ip
function ide { local e="deny from $1 port ${2/\// proto }"        ;if [[ $4 ]];then nex "ufw $4 $e";else nex "ufw $e comment $3";fi; }                        # deny  frm ip/prt
function pde { local e="deny $1"                                  ;if [[ $3 ]];then nex "ufw $3 $e";else nex "ufw $e comment $2";fi; }                        # deny  prt
function pai { local e="allow from $2 to any port ${1/\// proto }";if [[ $4 ]];then nex "ufw $4 $e";else nex "ufw $e comment $3";fi; }                        # allow prt frm ip
function pae { local e="allow $1"                                 ;if [[ $3 ]];then nex "ufw $3 $e";else nex "ufw $e comment $2";fi; }                        # allow prt
function ple { local e="limit $1"                                 ;if [[ $3 ]];then nex "ufw $3 $e";else nex "ufw $e comment $2";fi; }                        # limit prt (<6 within 30s)
function nwf { [[ $B = mainnet ]] || echo " --testnet $B"; }                                                                                                  # lighthouse network flag
function sis { sex "mv ${p[9]}/$(basename ${p[31]}) ${p[17]}";[[ -f ${p[31]} ]] && touch ${p[10]}/vc_slash;cmw ${p[31]} 600 $1; }                             # init slash db
function snc { echo ${1/[a-z]*-/}|tr -d '[ao]'; }                                                                                                             # get small server name
function vco { if [[ $cuvc = $znm3 ]];then echo $znm4;else echo $znm3;fi; }                                                                                   # get other vc server name
function unv {
  local vuel=${1:-22.7.1};curl -LO https://hyperledger.jfrog.io/artifactory/besu-binaries/besu/$vuel/besu-$vuel.tar.gz;sha256sum besu-$vuel.tar.gz            # download besu binaries
  tar xvf besu-$vuel.tar.gz;sex "cp -a besu-$vuel ${p[0]}/besu";sex "chown eth1:eth1 -R ${p[0]}/besu";cmw ${p[0]}/besu 755 eth1                               # install  besu binaries
}

p[84]="1 [$(snc $(vco))]\tt tvc (vp,vd,cp slash -> $cuvc)"
p[85]="3 [$(snc $cuvc)]\trm lock;t3"
p[86]="\n0\t\tcuvc=$cuvc"
p[86]="${p[86]}\n${p[84]}"
p[86]="${p[86]}\n2\t\tsleep 7m"
p[86]="${p[86]}\n${p[85]}"
p[86]="${p[86]}\n4\t\tcheck slash,srv,dirs"
p[86]="${p[86]}\n5\t\trm lock;t vea\n"
p[87]='eth-besu'
p[88]="JAVA_HOME='/usr/lib/jvm/java-11-openjdk-amd64'"                                                                                                        # besu needs java
p[89]="${p[9]}/besu.log"                                                                                                                                      # ec minute log
p[90]='  *[A-Z][A-Z][A-Z][A-Z][A-Z]* *'                                                                                                                       # filter log msg (not dump)
p[99]='0x534029B6371dc4453DD750Bc1198181F55C859fe'

bpid=$($(pjw 61 71) 2>${p[3]}|sed -n 's%.*PID: *\([0-9]*\).*%\1%p')
rblk=22238623
ratt=00019000
pmis=00010000
pmat=00018800
pmah=00004500
pdly=00000500
decp=1000000000
chrs=24
ehrs=12
rate=4000
bpri=20                                                                                                                                                       # min    configured peers
bprs=10                                                                                                                                                       # step   configured peers
bprf=80                                                                                                                                                       # max    configured peers
[[ $rate -eq 0 ]] && rate=$(curl -sX GET 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?symbol=ETH&convert=EUR&CMC_PRO_API_KEY=3ae5f3df-bd71-489d-a9dd-b626995fba31'|sed 's%.*price.:\([0-9]*\.[0-9]*\).*%\1%')

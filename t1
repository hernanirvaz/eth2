#!/bin/bash

meeu=$(whoami)
cunm=$(uname -n)
cust=$(uname -n|cut -c1-3)
zip1='192.168.8.25'
zip2='192.168.8.28'
zip3='192.168.8.31'
zip4='192.168.8.34'
znm1='hrv-zotac1'
znm2='hrv-zotac2'
znm3='hrv-zotac3'
znm4='hrv-zotac4'
vip1='207.180.214.8'
vip2='173.249.42.190'
vip3='164.68.107.45'
vnm1='vmi471826.contaboserver.net'
vnm2='vmi506976.contaboserver.net'
vnm3='vmi469069.contaboserver.net'
if [[ $cust = hrv ]];then cuec=$zip1;else cuec=$vip1;fi;[[ $cunm = $znm4 ]] && cuec=$zip4

w0='systemctl'
w1="$w0 status"
w2="$w0 stop"
w3="$w0 start"
w4="$w0 enable"
w5="$w0 disable"
n0='eth-geth'
n1='eth-beacon'
n3='eth-validator'
n4='prometheus'
n5='prometheus-node-exporter'
n6='grafana-server'
n7='systemd-timesyncd'
n8='named'
n9='systemd-resolved'
o0='plexmediaserver'
o1='transmission-daemon'
o3='geth\[\|lighthouse'
o4='Package\|Core\|Composite\|Sensor\|temp[0-9]'
o5="\n/var/log/syslog\n{\n\trotate 7\n\tdaily\n\tmissingok\n\tnotifempty\n\tnocompress\n\tsharedscripts\n\tpostrotate\n\t\t/usr/lib/rsyslog/rsyslog-rotate\n\tendscript\n}"
o6=""
o6="$o6\n\tlisten-on { any; };"
o6="$o6\n\tlisten-on-v6 { none; };"
o6="$o6\n\tversion \"not currently available\";"
o6="$o6\n\trecursion yes;"
o6="$o6\n\tallow-recursion { localhost; 192.168.8.0/24; };"
o6="$o6\n\tallow-query { localhost; 192.168.8.0/24; };"
if [[ $cunm = $znm2 ]];then
  o6="$o6\n\tallow-transfer { 192.168.8.25; 192.168.8.31; 192.168.8.34; };"
  o6="$o6\n\talso-notify { 192.168.8.25; 192.168.8.31; 192.168.8.34; };"
  o6="$o6\n\tmax-cache-size 50%;"
else
  o6="$o6\n\tallow-transfer { none; };"
  o6="$o6\n\tmax-cache-size 10%;"
fi
o6="$o6\n\tquerylog yes;"
o6="$o6\n};"
o9='0x82f6E45b47c5C03F8D52dDDa03B3F65897Cd5AB2'

s0='/usr/local/bin'
s1='/var/log/syslog'
s2='/etc/prometheus'
s3='/dev/null'
s4='/etc/systemd/system'
s5='/var/run/reboot-required'
s6='/sys/bus/usb/devices/1-0:1.0/authorized'
s7='/sys/devices/system/cpu/intel_pstate/no_turbo'
s8='/usr/bin'
p0='/home/eth'
p1='/var/lib/lighthouse'
p2="$p0/beacon.log"
p3="$p0/bmedias.log"
p5="$p0/geth.log"
p6="$p0/barqivo.log"
p4="$p0/beacon.restart"
p7="$p1/beacon"
p8="$p1/validators"
p9='/var/lib/goethereum';[[ $cunm = $znm4 ]] && p9='/sata/goethereum'

function swb { echo -e "\n\e[5m${1^^}\e[25m\n"; }                                                                                                             # show flash
function swu { echo -e "${1^^}"; }                                                                                                                            # show upper
function swn { echo -e "$1"; }                                                                                                                                # show normal
function sau { user=$1;id $1 &>$s3 || sex "useradd --no-create-home --shell /bin/false $user"; }                                                              # system useradd
function cmw { [[ $2 ]] && sex "chmod $2 $1";[[ $3 ]] && sex "chown $3:${4:-$3} $1"; }                                                                        # chmod/chown file
function cex { swb "$1";echo $H|sudo -S $1       2>$s3; }                                                                                                     # superuser-command (visible)
function nex { swn "$1";echo $H|sudo -S $1       2>$s3; }                                                                                                     # superuser-command (visible)
function yex { swb "$1";echo $H|sudo -S $1 <<< y &>$s3; }                                                                                                     # superuser-command (visible & yes)
function pex {          echo $H|sudo -S $1       2>$s3; }                                                                                                     # superuser-command (pipe)
function sex {          echo $H|sudo -S $1       &>$s3; }                                                                                                     # superuser-command (silent)
function idi { local e="deny from $1 to $2"                       ;if [[ $4 ]];then nex "ufw $4 $e";else nex "ufw $e comment $3";fi; }                        # deny  frm ip to ip
function ide { local e="deny from $1 port ${2/\// proto }"        ;if [[ $4 ]];then nex "ufw $4 $e";else nex "ufw $e comment $3";fi; }                        # deny  frm ip/prt
function pde { local e="deny $1"                                  ;if [[ $3 ]];then nex "ufw $3 $e";else nex "ufw $e comment $2";fi; }                        # deny  prt
function pai { local e="allow from $2 to any port ${1/\// proto }";if [[ $4 ]];then nex "ufw $4 $e";else nex "ufw $e comment $3";fi; }                        # allow prt frm ip
function pae { local e="allow $1"                                 ;if [[ $3 ]];then nex "ufw $3 $e";else nex "ufw $e comment $2";fi; }                        # allow prt
function ple { local e="limit $1"                                 ;if [[ $3 ]];then nex "ufw $3 $e";else nex "ufw $e comment $2";fi; }                        # limit prt (<6 within 30s)
function nwf { [[ $B = mainnet ]] || echo " --testnet $B"; }                                                                                                  # lighthouse network flag
function iig { local f=;until [[ $# -lt 1 ]];do f="$f --ignore=$1";shift;done;echo $f; }                                                                      # get list of ignore flags
function idw { ip link|grep DOWN|cut -d' ' -f2|tr -d :; }                                                                                                     # get down interfaces
function lcp { [[ -x $p0/.cargo/bin/lighthouse ]] && until [[ $# -lt 1 ]];do scp $p0/.cargo/bin/lighthouse $1:~;shift;done; }                                 # propagate lighthouse
function lwr {                                                                                                                                                # install   lighthouse
  [[ $cunm = $znm1 ]] && lcp ztc2 ztc3 ztc4;[[ $cunm = $vnm1 ]] && lcp vpss
  [[ -x $p0/lighthouse && ! -d $p0/lighthouse ]] && { sex "cp $s0/lighthouse $s0/lighthouse.sav";sex "mv $p0/lighthouse $s0"; }
  [[ -x $s0/lighthouse                        ]] && { cmw $s0/lighthouse 755 eth;swb 'NOVO LIGHT INSTALADO - PODE/DEVE VERIFICAR'; }
}

c0='/etc/systemd/timesyncd.conf'
c1='/etc/default/motd-news'
c2='/lib/systemd/system/systemd-networkd-wait-online.service'
c3='/etc/apt/apt.conf.d/50unattended-upgrades'
c4='/etc/update-motd.d/00-header'
c5='/etc/update-motd.d/10-help-text'
c6='/etc/grub.d/30_os-prober'
c7='/etc/logrotate.d/rsyslog'
c8='/etc/update-motd.d/97-overlayroot'
c9='/etc/bind/named.conf.options'
e0='/etc/default/named'
r0='s%^ *#*NTP=.*$%NTP=192.168.8.28 ntp02.oal.ul.pt ntp04.oal.ul.pt time.google.com time.cloudflare.com time.facebook.com%i'                                  # my timesyncd servers
r1='s%^ *ENABLED=.*$%ENABLED=0%i'                                                                                                                             # motd-news disable
r2="s%ExecStart\(.*\)online.*$%ExecStart\1online $(iig $(idw))%i"                                                                                             # ignore down interfaces
r3='s%^ */* *Unattended-Upgrade::Mail .*$%Unattended-Upgrade::Mail "hernanilr@gmail.com";%i'                                                                  # unattended-upgrades email
r4='s%^ *printf%# printf%i'                                                                                                                                   # unprint stuff
r5='printf "Welcome to %s %s\\n" "$(uname -n)" "$DISTRIB_DESCRIPTION"'                                                                                        # my header motd
r6='s%timeout *=.*$%timeout=1%i'                                                                                                                              # grub timeout
r7='s%^ */var/log/syslog%# /var/log/syslog%'                                                                                                                  # old logrotate delete
r8='/dnssec-validation/q'                                                                                                                                     # print lines until pattern
r9='s%bind[^"]*"%bind -4"%'                                                                                                                                   # use only ipv4

bpid=$($w1 $n1 2>$s3|sed -n 's%.*PID: *\([0-9]*\).*%\1%p')
rblk=22238623
ratt=00019000
pmis=00010000
pmat=00018800
pmah=00004500
pdly=00000500
decp=1000000000
hors=24
rate=4000
bpri=20                                                                                                                                                       # min    configured peers
bprs=10                                                                                                                                                       # step   configured peers
bprf=80                                                                                                                                                       # max    configured peers
[[ $rate -eq 0 ]] && rate=$(curl -sX GET 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?symbol=ETH&convert=EUR&CMC_PRO_API_KEY=3ae5f3df-bd71-489d-a9dd-b626995fba31'|sed 's%.*price.:\([0-9]*\.[0-9]*\).*%\1%')

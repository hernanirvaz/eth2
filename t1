#!/bin/bash

w0='systemctl'
w1="$w0 status"
w2="$w0 stop"
w3="$w0 start"
w4="$w0 enable"
w5="$w0 disable"
n0='eth-geth'
n1='eth-beacon'
n3='eth-validator'
n4='prometheus'
n5='prometheus-node-exporter'
n6='grafana-server'
n7='systemd-timesyncd'
o0='plexmediaserver'
o1='transmission-daemon'
o2='named'
o3='geth\[\|lighthouse'
o4='Package\|Core\|Composite\|Sensor\|temp[0-9]'
a0='0x82f6E45b47c5C03F8D52dDDa03B3F65897Cd5AB2'

meeu=$(whoami)
cunm=$(uname -n)
cust=$(uname -n|cut -c1-3)
zip1='192.168.8.25'
zip2='192.168.8.28'
zip3='192.168.8.31'
zip4='192.168.8.34'
znm1='hrv-zotac1'
znm2='hrv-zotac2'
znm3='hrv-zotac3'
znm4='hrv-zotac4'
vip1='207.180.214.8'
vip2='173.249.42.190'
vip3='164.68.107.45'
vnm1='vmi471826.contaboserver.net'
vnm2='vmi506976.contaboserver.net'
vnm3='vmi469069.contaboserver.net'
if [[ $cust = hrv ]];then cuec=$zip1;else cuec=$vip1;fi;[[ $cunm = $znm4 ]] && cuec=$zip4

s0='/usr/local/bin'
s1='/var/log/syslog'
s2='/etc/prometheus'
s3='/dev/null'
s4='/etc/systemd/system'
s5='/var/run/reboot-required'
s6='/sys/bus/usb/devices/1-0:1.0/authorized'
s7='/sys/devices/system/cpu/intel_pstate/no_turbo'
s8='/usr/bin'
p0='/home/eth'
p1='/var/lib/lighthouse'
p2="$p0/beacon.log"
p3="$p0/bmedias.log"
p5="$p0/geth.log"
p6="$p0/barqivo.log"
p4="$p0/beacon.restart"
p7="$p1/beacon"
p8="$p1/validators"
p9='/var/lib/goethereum';[[ $cunm = $znm4 ]] && p9='/sata/goethereum'
c0='/etc/systemd/timesyncd.conf'
c1='/etc/default/motd-news'
c2='/lib/systemd/system/systemd-networkd-wait-online.service'
c3='/etc/apt/apt.conf.d/50unattended-upgrades'
c4='/etc/update-motd.d/00-header'
c5='/etc/update-motd.d/10-help-text'
c6='/etc/grub.d/30_os-prober'
c7='/etc/update-motd.d/97-overlayroot'

function swb { echo -e "\n\e[5m${1^^}\e[25m\n"; }                                                                                                             # show flash
function swu { echo -e "${1^^}"; }                                                                                                                            # show upper
function swn { echo -e "$1"; }                                                                                                                                # show normal
function sau { user=$1;id $1 &>$s3 || sex "useradd --no-create-home --shell /bin/false $user"; }                                                              # system useradd
function cmw { [[ $2 ]] && sex "chmod $2 $1";[[ $3 ]] && sex "chown $3:$3 $1"; }                                                                              # chmod/chown file
function cex { swb "$1";echo $H|sudo -S $1       2>$s3; }                                                                                                     # superuser-command (visible)
function yex { swb "$1";echo $H|sudo -S $1 <<< y &>$s3; }                                                                                                     # superuser-command (visible & yes)
function pex {          echo $H|sudo -S $1       2>$s3; }                                                                                                     # superuser-command (pipe)
function sex {          echo $H|sudo -S $1       &>$s3; }                                                                                                     # superuser-command (silent)
function sst { $w1 $1 2>$s3|grep "${2:-inactive\|failed}"; }                                                                                                  # service status word test
function ss1 { $w1 $1 2>$s3|sed -n "s%.*$2 *\(${3:-.}*\).*%\1%p"; }                                                                                           # service status word - 1 extraction
function ss2 { $w1 $1 2>$s3|sed -n "s%.*Active: *\(.*\)%\1%;s% *since.*;%; $1%p"; }                                                                           # service status word - 2 extraction
function sso { dts;echo "$1 $(printf '%6s' $(ss1 $2 Memory:)) $dt status: $(ss2 $2)"; }                                                                       # service status output
function idi { cex "ufw $4 deny from $1 to $2 comment $3"; }                                                                                                  # deny  frm ip to ip
function ide { cex "ufw $4 deny from $1 port ${2/\// proto } comment $3"; }                                                                                   # deny  frm ip/prt
function pde { cex "ufw $3 deny $1 comment $2"; }                                                                                                             # deny  prt
function pai { cex "ufw $4 allow from $2 to any port ${1/\// proto } comment $3"; }                                                                           # allow prt frm ip
function pae { cex "ufw $3 allow $1 comment $2"; }                                                                                                            # allow prt
function ple { cex "ufw $3 limit $1 comment $2"; }                                                                                                            # limit prt (<6 within 30s)
function lcp { [[ -x $p0/.cargo/bin/lighthouse ]] && until [[ $# -lt 1 ]];do scp $p0/.cargo/bin/lighthouse $1:~;shift;done; }                                 # propagate lighthouse
function lwr {                                                                                                                                                # install   lighthouse
  [[ $cunm = $znm1 ]] && lcp ztc2 ztc3 ztc4;[[ $cunm = $vnm1 ]] && lcp vpss
  [[ -x $p0/lighthouse && ! -d $p0/lighthouse ]] && { sex "cp $s0/lighthouse $s0/lighthouse.sav";sex "mv $p0/lighthouse $s0"; }
  [[ -x $s0/lighthouse                        ]] && { cmw $s0/lighthouse 755 eth;swb 'NOVO LIGHT INSTALADO - PODE/DEVE VERIFICAR'; }
}

bpid=$(ss1 $n1 PID: [0-9])
rblk=22238623
ratt=00019000
pmis=00010000
pmat=00018800
pmah=00004500
pdly=00000500
decp=1000000000
hors=24
rate=4000
bpri=20                                                                                                                                                       # min    configured peers
bprs=10                                                                                                                                                       # step   configured peers
bprf=80                                                                                                                                                       # max    configured peers
[[ $rate -eq 0 ]] && rate=$(curl -sX GET 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?symbol=ETH&convert=EUR&CMC_PRO_API_KEY=3ae5f3df-bd71-489d-a9dd-b626995fba31'|sed 's%.*price.:\([0-9]*\.[0-9]*\).*%\1%')

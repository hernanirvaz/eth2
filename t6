#!/bin/bash

source /home/eth/eth2/t1

# utilities for commands/journal
function cex { echo -e "${i}$1${f}";echo $H|sudo -S $1 2>/dev/null; }
function jsh { cex "journalctl --no-hostname --no-full -f $1"; }
function dmr { echo $H|sudo -S systemctl daemon-reload 2>/dev/null; }
function dsh { echo -e "\nresolvectl query $1";resolvectl query "$1"; }
function drs { echo -e "${i}RESET DNS${f}"                                                    ;sp;sudo systemctl stop systemd-resolved;sa;sudo systemctl start systemd-resolved; }
function nrs { echo -e "${i}RESET NETPLAN & DNS${f}";echo $H|sudo -S netplan apply 2>/dev/null;sp;sudo systemctl stop systemd-resolved;sa;sudo systemctl start systemd-resolved; }
function nsh {
  echo -e "ROUTES\t\t" $(ip route show|grep 'default via'|grep -v 'linkdown'|cut -d' ' -f3)
  m=$(ip a|grep 'state UP'|cut -d: -f2)
  echo -e "DNS\t\t" $(resolvectl|grep 'Current DNS'|cut -d' ' -f6)
  for n in $m;do echo -e "$n\t\t" $(resolvectl dns|grep $n|cut -d' ' -f4-6);done
}
function csh {
  if [[ $(timedatectl|grep synchronized:|sed 's%.*synchronized: \([a-z]*\).*%\1%') = yes ]];then c1=OK;else c1=NO;fi
  m='CLCK'
  m="$m $c1 $(printf '%3i' $(echo $H|sudo -S grep -i 'check system clock' $p4 2>/dev/null|wc -l))"
  m="$m $(date --rfc-3339=seconds)"
  m="$m status: $(systemctl status systemd-timesyncd|grep Active:|sed 's%.*Active: \(.*\)%\1%')"
  echo -e "$m"
}
function esh {
  e1=$(echo $H|sudo -S grep -v 'openethereum\|geth\[\|lighthouse' $p4 2>/dev/null|grep -i 'error' |wc -l)
  e2=$(echo $H|sudo -S grep -v 'openethereum\|geth\[\|lighthouse' $p4 2>/dev/null|grep -i 'error' |tail -n1|sed 's%.*hrv-zotac[0-9] *\(.*\)%\1%;s%:%%g;s%  *% %g'|cut -c1-53)
  e3=$(echo $H|sudo -S grep -i 'openethereum\|geth\[\|lighthouse' $p4 2>/dev/null|grep -v ' INFO '|wc -l)
  e4=$(echo $H|sudo -S grep -i 'openethereum\|geth\[\|lighthouse' $p4 2>/dev/null|grep -v ' INFO '|tail -n1|sed 's%.*[0-9]*:[0-9]*:[0-9]*\.[0-9][0-9][0-9]]* *\(.*\)%\1%;s%:%%g;s%:%%g;s%  *% %g'|cut -c1-53)
  m="ERRO"
  m="$m $(printf '%2i' $e1)"
  m="$m $(printf '%3i' $e3)"
  m="$m $(date --rfc-3339=seconds)"
  [[ $e1 -gt 0 ]] && m="$m sys: $e2"
  [[ $e3 -gt 0 ]] && m="$m eth2: $e4"
  echo -e "$m"
}
function psh {
  h5=$(echo $H|sudo -S grep 'e above threshold' $p4 2>/dev/null|head -n1|sed 's%.* \([0-9]*:[0-9]*:[0-9]*\).*%\1%');if [[ $h5 ]];then h5="throttled: $h5";else h5='';fi
  h6=$(echo $H|sudo -S grep 'ture/speed normal' $p4 2>/dev/null|tail -n1|sed 's%.* \([0-9]*:[0-9]*:[0-9]*\).*%\1%');if [[ $h6 ]];then h6="ok: $h6"       ;else h6='';fi
  h7=0
  h8=0
  if [[ $(which sensors) ]]; then
    for v in $(sensors|grep 'Package\|Core'|sed 's%.*: *\([-+][0-9][0-9]*\.[0-9]*\).*%\1%')
    do h7=$((h7+1));h8=$(echo "scale=1;$h8$v"|bc)
    done
  else
    h7=1
  fi
  echo -e "TEMP $(printf '%5.1f' $(echo "scale=1;$h8/$h7"|bc))C $(date --rfc-3339=seconds) $h5 $h6"
}
# Plex Media Server
function rxw { cex "ufw$2 allow from 192.168.8.0/24 $1"; }
function xop { cex 'ufw delete deny 32400             ';rxw 'to any port 32400 comment plex'; }
function xcl { cex 'ufw        deny 32400 comment plex';rxw 'to any port 32400 '   ' delete'; }
function xe { xop;cex 'ufw reload';cex "systemctl enable $plex"; }
function xa { [[ $(systemctl status $plex 2>/dev/null|grep -i 'inactive\|failed') ]] && { cex "systemctl start $plex"; } }
function xp { [[ $(systemctl status $plex 2>/dev/null|grep -i loaded) ]] && { cex "systemctl stop $plex"; } }
function xd { cex "systemctl disable $plex";xcl;cex 'ufw reload'; }
# Transmission BitTorrent Daemon
function rop { cex 'ufw allow 51413 comment torrent';rxw 'to any port 9091 comment torrent'; }
function rcl { cex 'ufw deny  51413 comment torrent';rxw 'to any port 9091'       ' delete'; }
function re { rop;cex 'ufw reload';cex "systemctl enable $trrt"; }
function ra { [[ $(systemctl status $trrt 2>/dev/null|grep -i 'inactive\|failed') ]] && { cex "systemctl start $trrt"; } }
function rp { [[ $(systemctl status $trrt 2>/dev/null|grep -i loaded) ]] && { cex "systemctl stop $trrt"; } }
function rd { cex "systemctl disable $trrt";rcl;cex 'ufw reload'; }
# Bind9
function sop { cex 'ufw delete deny 53            ';rxw 'to any port 53 comment dns'; }
function scl { cex 'ufw        deny 53 comment dns';rxw 'to any port 53 '  ' delete'; }
function se { sop;cex 'ufw reload';cex "systemctl enable $dnsd"; }
function sa { [[ $(systemctl status $dnsd 2>/dev/null|grep -i disabled) ]] || { [[ $(systemctl status $dnsd 2>/dev/null|grep -i 'inactive\|failed') ]] && cex "systemctl start $dnsd"; } }
function sp { [[ $(systemctl status $dnsd 2>/dev/null|grep -i loaded) ]] && { cex "systemctl stop $dnsd"; } }
function sd { cex "systemctl disable $dnsd";scl;cex 'ufw reload'; }
# open/close goethereum/openethereum/beacon/validator/grafana
function gfw { if [[ $cust = hrv ]];then cex "ufw$2 allow from $zip2 $1";cex "ufw$2 allow from $zip3 $1";else cex "ufw$2 allow from $vip1 $1";cex "ufw$2 allow from $vip3 $1";fi; }
function gop { cex 'ufw allow 30303 comment eth1';cex 'ufw delete deny 8545              ';gfw 'to any port 8545 comment geapi'; }
function gcl { cex 'ufw deny  30303 comment eth1';cex 'ufw        deny 8545 comment geapi';gfw 'to any port 8545'     ' delete'; }
function ofw { if [[ $cust = hrv ]];then cex "ufw$2 allow from $zip2 $1";cex "ufw$2 allow from $zip3 $1";else cex "ufw$2 allow from $vip1 $1";cex "ufw$2 allow from $vip3 $1";fi; }
function oop { cex 'ufw allow 30303 comment eth1';cex 'ufw delete deny 8545              ';gfw 'to any port 8545 comment oeapi'; }
function ocl { cex 'ufw deny  30303 comment eth1';cex 'ufw        deny 8545 comment oeapi';gfw 'to any port 8545'     ' delete'; }
function bfw { if [[ $cust = hrv ]];then cex "ufw$2 allow from 192.168.8.0/24 $1";else cex "ufw$2 allow from $vip3 $1";fi; }
function bop { cex 'ufw allow 9000 comment eth2';cex 'ufw delete deny 5052              ';bfw 'to any port 5052 comment bnapi'; }
function bcl { cex 'ufw deny  9000 comment eth2';cex 'ufw        deny 5052 comment bnapi';bfw 'to any port 5052'     ' delete'; }
function vfw { if [[ $cust = hrv ]];then cex "ufw$2 allow from $zip1 $1";else cex "ufw$2 allow from $vip1 $1";fi; }
function vop { cex 'ufw delete deny 5064              ';`# vfw 'to any port 5064 comment vcmet'` ; }
function vcl { cex 'ufw        deny 5064 comment vcmet';`# vfw 'to any port 5064'     ' delete'` ; }
function fop { cex 'ufw allow 3000/tcp comment grafana'; }
function fcl { cex 'ufw deny  3000/tcp                '; }
# enable/arranca goethereum/openethereum/beacon/validator/prometheus/grafana 
function ge { gop;cex 'ufw reload';cex "systemctl enable $ethg"; }
function oe { oop;cex 'ufw reload';cex "systemctl enable $etho"; }
function be { bop;cex 'ufw reload';cex "systemctl enable $ethb"; }
function ve { [[ ! -f $dtdi/vc_lock ]] && { vop;cex 'ufw reload';cex "systemctl enable $ethv"; } }
function pe { cex 'ufw reload';cex "systemctl enable $ethp"; }
function ne { cex 'ufw reload';cex "systemctl enable $ethn"; }
function fe { fop;cex 'ufw reload';cex "systemctl enable $ethf"; }
function ga { [[ $(systemctl status $ethg 2>/dev/null|grep -i 'inactive\|failed') ]] && [[ -d /var/lib/goethereum   ]] && { cex "systemctl start $ethg"; } }
function oa { [[ $(systemctl status $etho 2>/dev/null|grep -i 'inactive\|failed') ]] && [[ -d /var/lib/openethereum ]] && { cex "systemctl start $etho"; } }
function ba { [[ $(systemctl status $ethb 2>/dev/null|grep -i 'inactive\|failed') ]] && { cex "systemctl start $ethb"; } }
function va {
  if [[ $(systemctl status $ethv 2>/dev/null|grep -i 'inactive\|failed') ]]; then
    if [[ -f $dtdi/vc_lock ]]; then
      if [[ -f /home/eth/slashing_protection.sqlite ]]; then
        echo $H|sudo -S cp /home/eth/slashing_protection.sqlite $vldt 2>/dev/null
        sudo chown eth3:eth3 $vldt/slashing_protection.sqlite
        sudo chmod 600 $vldt/slashing_protection.sqlite
      fi
    else
      cex "systemctl start $ethv"
      rm $dtdi/vc_slash
    fi
  fi
}
function pa { [[ $(systemctl status $ethp 2>/dev/null|grep -i 'inactive\|failed') ]] && { cex "systemctl start $ethp"; } }
function na { [[ $(systemctl status $ethn 2>/dev/null|grep -i 'inactive\|failed') ]] && { cex "systemctl start $ethn"; } }
function fa { [[ $(systemctl status $ethf 2>/dev/null|grep -i 'inactive\|failed') ]] && { cex "systemctl start $ethf"; } }
# para/disable goethereum/openethereum/beacon/validator/prometheus/grafana 
function gp { [[ $(systemctl status $ethg 2>/dev/null|grep -i loaded) ]] && { cex "systemctl stop $ethg"; } }
function op { [[ $(systemctl status $etho 2>/dev/null|grep -i loaded) ]] && { cex "systemctl stop $etho"; } }
function bp { [[ $(systemctl status $ethb 2>/dev/null|grep -i loaded) ]] && { cex "systemctl stop $ethb"; } }
function vp { [[ $(systemctl status $ethv 2>/dev/null|grep -i loaded) ]] && { cex "systemctl stop $ethv";touch $dtdi/vc_slash; } }
function pp { [[ $(systemctl status $ethp 2>/dev/null|grep -i loaded) ]] && { cex "systemctl stop $ethp"; } }
function np { [[ $(systemctl status $ethn 2>/dev/null|grep -i loaded) ]] && { cex "systemctl stop $ethn"; } }
function fp { [[ $(systemctl status $ethf 2>/dev/null|grep -i loaded) ]] && { cex "systemctl stop $ethf"; } }
function gd { cex "systemctl disable $ethg";gcl;cex 'ufw reload'; }
function od { cex "systemctl disable $etho";ocl;cex 'ufw reload'; }
function bd { cex "systemctl disable $ethb";bcl;cex 'ufw reload'; }
function vd { cex "systemctl disable $ethv";vcl;cex 'ufw reload';touch $dtdi/vc_lock; }
function pd { [[ $(systemctl status $ethp 2>/dev/null|grep -i loaded) ]] && { cex "systemctl disable $ethp"; } }
function nd { [[ $(systemctl status $ethn 2>/dev/null|grep -i loaded) ]] && { cex "systemctl disable $ethn"; } }
function fd { [[ $(systemctl status $ethf 2>/dev/null|grep -i loaded) ]] && { cex "systemctl disable $ethf";fcl;cex 'ufw reload'; } }
# service variavel set for goethereum/openethereum/beacon
function g0 { g0=0;[[ -d /var/lib/goethereum ]] && g0=$(echo $H|sudo -S du -s /var/lib/goethereum 2>/dev/null|cut -f1); }
function g1 { g1=0;[[ $(systemctl status $ethg 2>/dev/null|grep -i running) ]] && { if [[ $cunm = $znm1 ]];then g="http://$zip1:8545";else g="http://$vip1:8545";fi;g1=$(geth attach $g --exec eth.syncing); }; }
function g2 { g2=0;[[ $(systemctl status $ethg 2>/dev/null|grep -i running) ]] && { if [[ $cunm = $znm1 ]];then g="http://$zip1:8545";else g="http://$vip1:8545";fi;g2=$(geth attach $g --exec net.peerCount); }; }
function g7 {
  t=-1;n=0;g7=OK
  if [[ $(systemctl status $ethg 2>/dev/null|grep -i running) && -f $p5 ]]; then
    n=$(echo $H|sudo -S grep -i 'imported new' $p4 2>/dev/null|wc -l)
    t=$(grep -i blocks: $p5|tail -n1|sed 's%.*blocks: *\([0-9]*\).*%\1%')
  fi
  [[ $n -eq $t ]] && g7='BK'
}
function o1 {
  o1='{"currentBlock":"0xbe7edd","highestBlock":"0xbe82b9","startingBlock":"0xbe7c7a","warpChunksAmount":null,"warpChunksProcessed":null}'
  if [[ -d /var/lib/openethereum ]]; then
    if [[ $cunm = $znm1 ]];then o5="POST $zip1:8545";else o5="POST $vip1:8545";fi
    o1=$(curl --data '{"method":"eth_syncing","params":[],"id":1,"jsonrpc":"2.0"}' -H 'Content-Type: application/json' -sX $o5|sed 's%.*result":\(.*\),.*%\1%')
  fi
}
function o2 {
  o2=0
  if [[ -d /var/lib/openethereum ]]; then
    if [[ $cunm = $znm1 ]];then o5="POST $zip1:8545";else o5="POST $vip1:8545";fi
    o6=$(curl --data '{"method":"net_peerCount","params":[],"id":1,"jsonrpc":"2.0"}' -H 'Content-Type: application/json' -sX $o5|sed 's%.*result":"0x\([a-z0-9]*\)".*%\1%')
    o2=$(echo "obase=10; ibase=16; ${o6^^}"|bc)
  fi
}
function o7 {
  t=-1;n=0;o7=OK
  if [[ $(systemctl status $etho 2>/dev/null|grep -i running) && -f $p6 ]]; then
    n=$(echo $H|sudo -S grep -i 'Imported  *#' $p4 2>/dev/null|wc -l)
    t=$(grep -i blocks: $p6|tail -n1|sed 's%.*blocks: *\([0-9]*\).*%\1%')
  fi
  [[ $n -eq $t ]] && o7='BK'
}
function b2 { b2=0;[[ -d /var/lib/lighthouse ]] && b2=$(echo $H|sudo -S grep -i 'lighthouse.*peers:' $p4 2>/dev/null|tail -n1|sed 's%.*peers: *\([0-9]*\).*%\1%'); }
function b7 {
  n=$(echo "$H"|sudo -S grep "lighthouse.$bpid" $p4 2>/dev/null|tail -n3600)
  w=$(echo "$n"|grep -i 'processed block'|wc -l)
  q=$(echo "$n"|grep -i 'block received' |wc -l)
  r=$(echo "$n"|grep -v ' INFO '|wc -l)
  t=$(echo "$n"|grep    ' INFO '|wc -l)
  p=$(echo "$H"|sudo -S grep -i 'published block' $p4 2>/dev/null|wc -l)
  z=0;for v in $(echo $H|sudo -S grep -i 'attestation(s) missing' $p4 2>/dev/null|sed 's%.*validators: *\[\(.*\)\].*%\1%;s%,%%g');do y=($v);z=$((z+${#y[@]}));done
  c=0;for v in $(echo $H|sudo -S grep -i 'attestation(s).*target' $p4 2>/dev/null|sed 's%.*validators: *\[\(.*\)\].*%\1%;s%,%%g');do y=($v);c=$((c+${#y[@]}));done
  h=0;for v in $(echo $H|sudo -S grep -i 'attestation(s).*head'   $p4 2>/dev/null|sed 's%.*validators: *\[\(.*\)\].*%\1%;s%,%%g');do y=($v);h=$((h+${#y[@]}));done
  k=0;for v in $(echo $H|sudo -S grep -i 'attestation(s) had'     $p4 2>/dev/null|sed 's%.*validators: *\[\(.*\)\].*%\1%;s%,%%g');do y=($v);k=$((k+${#y[@]}));done
  a=0;for v in $(echo $H|sudo -S grep -i 'attestation(s) success' $p4 2>/dev/null|sed 's%.*validators: *\[\(.*\)\].*%\1%;s%,%%g');do y=($v);a=$((a+${#y[@]}));done
  b7=OK
  bhe
  if [[ $((x1+x2+x3)) -ge $l1rs && -f $p2 ]]; then
    if [[ $((x1+x2+x3)) -ge $l2rs ]]; then
      [[ $(tail -n $l2rs $p2|cut -d' ' -f1|sort -u) = BEAC ]] && b7='BK'
    else
      [[ $(tail -n $hors $p2|cut -d' ' -f1|sort -u) = BEAC ]] && b7='BK'
    fi
  fi
}
function gs {
  if [[ -d /var/lib/goethereum && ( $cunm = $vnm1 || $cunm = $znm1 ) ]]; then
    g0;g1;g2
    if [[ $(echo $g1|grep -i false) ]]; then
      m="SYNCED - PEERCOUNT $g2"
    else
      g5=$(echo $H|sudo -S grep -i 'new block headers' $p4 2>/dev/null)
      g6=$(echo $H|sudo -S grep -i 'new state entries' $p4 2>/dev/null)
      h=$(echo  $g1 |sed -Ee 's%.*highestBlock: *([0-9]+).*%\1%i')
      c=$(echo  $g1 |sed -Ee 's%.*currentBlock: *([0-9]+).*%\1%i')
      k=$(echo  $g1 |sed -Ee 's%.*knownStates: *([0-9]+).*%\1%i')
      p=$(echo  $g1 |sed -Ee 's%.*pulledStates: *([0-9]+).*%\1%i')
      b=$(echo "$g5"|head -1|cut -d= -f4|cut -d' ' -f1)
      d=$(echo "$g5"|tail -1|cut -d= -f4|cut -d' ' -f1)
      y=$(echo "$g6"|head -1|cut -d= -f4|cut -d' ' -f1)
      t=$(echo "$g6"|tail -1|cut -d= -f4|cut -d' ' -f1)
      m="SYNCING - PEERCOUNT: $g2\nBlocks api: $h ($((h-c)))\tStates api: $k ($((k-p)))\nBlocks log: $d ($((d-b)))\tStates log: $t ($((t-y))))"
    fi
  else
    m="NOT HERE ($cunm)"
  fi
}
function gk {
  g1;g2;g7
  if [[ $(echo $g1|grep -i false) ]];then m='SYC';else m='NSY';fi
  m="$g7 $m $(date --rfc-3339=seconds)"
  m="$m nodes: $(printf '%2i' ${g2:-0}) blocks: $(printf '%4i' $n)"
}
function ok {
  o1;o2;o7
  if [[ $(echo $o1|grep -i false) ]];then m='SYC';else m='NSY';fi
  m="$o7 $m $(date --rfc-3339=seconds)"
  m="$m nodes: $(printf '%2i' ${o2:-0}) blocks: $(printf '%4i' $n)"
}
function grs {
  if [[ $1 -ne 0 ]]; then
    cp /etc/systemd/system/$ethg.service ~/$ethg.save
    g4=$(grep maxpeers ~/$ethg.save|sed 's%.*maxpeers \([0-9]*\).*%\1%')
    g4=$(($g4+$1))
    [[ $g4 -ge 5 && $g4 -le 15 ]] && sed "s%--maxpeers [0-9]*%--maxpeers $g4%" ~/$ethg.save > /etc/systemd/system/$ethg.service
  fi
  resolvectl query smtp.gmail.com 2>/dev/null 1>&2
  echo $H|sudo -S systemctl stop  $ethg   2>/dev/null
  echo $H|sudo -S systemctl daemon-reload 2>/dev/null;sleep 30s
  echo $H|sudo -S systemctl start $ethg   2>/dev/null
  echo -e "GETH RESTAR $(date --rfc-3339=seconds)" >> $p5
}
function ors {
  if [[ $1 -ne 0 ]]; then
    cp /etc/systemd/system/$etho.service ~/$etho.save
    o4=$(grep max-peers ~/$etho.save|sed 's%.*max-peers=\([0-9]*\).*%\1%')
    o4=$(($o4+$1))
    [[ $o4 -ge 10 && $o4 -le 15 ]] && sed "s%--max-peers=[0-9]*%--max-peers=$o4%" ~/$etho.save > /etc/systemd/system/$etho.service
  fi
  resolvectl query smtp.gmail.com 2>/dev/null 1>&2
  echo $H|sudo -S systemctl stop  $etho   2>/dev/null
  echo $H|sudo -S systemctl daemon-reload 2>/dev/null;sleep 30s
  echo $H|sudo -S systemctl start $etho   2>/dev/null
  echo -e "OETH RESTAR $(date --rfc-3339=seconds)" >> $p6
}
function bk {
  t=0;y=0
  for v in $(echo $H|sudo -S grep -i 'src: gossip' $p4 2>/dev/null|sed 's%.*delay_ms: *\([0-9]*\).*%\1%')
  do y=$(($y+1));t=$(($t+$v))
  done
  j=0
  [[ $y -gt 0 ]] && j=$(($t/$y))
  b2;b7
  dt=$(date --rfc-3339=seconds)
  bho
}
function bhe {
  x4=$((10*(15*z+9*c+h+k)));if [[ $a -gt 200 ]];then x1=$((x4/a));else x1=0;fi
  x5=$((10*w))             ;if [[ $q -gt 100 ]];then x2=$((x5/q));else x2=0;fi
  x6=$((90*r))             ;if [[ $t -gt 100 ]];then x3=$((x6/t));else x3=0;fi
}
function bho {
  #    0  1   2          3              4      5  6               7   8    9                 10   11  12 13     14 15 16  17 18     19  20  21   22   23   24        25   26
  # BEAC OK   0 2021-11-12 22:44:02+00:00 nodes: 21 reward_penalty: 294 5.10 attestation_block: 3879 3240 0 erros:  9 29 140 20      1 735  10   18 4782 1620    delay:  965
  b=$(echo "scale=0;($p*$rblk+$a*$ratt)*$rate/$decp"|bc)
  d=$(echo "scale=2;($z*$pmis+$c*$pmat+$h*$pmah+$k*$pdly)*$rate/$decp"|bc)
  m="$b7 $(printf '%3i' $((x1+x2+x3))) $dt"
  m="$m nodes: $(printf '%2i' ${b2:-0})"
  m="$m reward_penalty: $(printf '%3i' $b) $(printf '%3.2f' $d)"
  m="$m attestation_block: $(printf '%4i' $a) $(printf '%4i' $x4) $(printf '%1i' $p)"
  m="$m erros: $(printf '%1i' $z) $(printf '%2i' $c) $(printf '%3i' $h) $(printf '%2i' $k)"
  m="$m $(printf '%6i' $w) $(printf '%3i' $q) $(printf '%3i' $x5)"
  m="$m $(printf '%4i' $r) $(printf '%4i' $t) $(printf '%4i' $x6)    "
  m="$m delay: $(printf '%4i' $j)"
}
function bhr {
  [[ -f ${p2}new ]] && rm ${p2}new 
  [[ -f ${p3}new ]] && rm ${p3}new 

  while read -a v;do
    dt="${v[3]} ${v[4]}"
    b7=${v[1]}
    b2=${v[6]} # nodes
    a=${v[11]} # attestation
    p=${v[13]} # block
    z=${v[15]} # erros missing
    c=${v[16]} # erros target
    h=${v[17]} # erros head
    k=${v[18]} # erros had
    w=${v[19]} # processed block
    q=${v[20]} # block received
    r=${v[22]} # not INFO
    t=${v[23]} #     INFO
    bhe
    j=${v[26]} # delay
    bho
    echo -e "${v[0]} $m" >> ${p2}new
  done <<< $(cat $p2)

  v1=0;v2=0;h2='23:58';h9=0;bm0
  while read -a o;do
    h1="${o[3]}"
    h0=$h9
    h9=$(grep -n "$h1 $h2" ${p2}new|cut -d: -f1)
    h3=$(head -n  $h9      ${p2}new|grep "BEAC.*$h2"|sort -k10.1n|grep -n $h1|cut -d: -f1)
    v1=$((h3+v1))
    v2=$((1+v2))
    v3=$(printf '%.0f' $(echo "scale=5;$v1/$v2"|bc))
    v4=${o[6]}
    if [[ ${#o[@]} -gt 16 ]];then v6=" ${o[16]}";else v6='';fi
    dt="${o[3]} ${o[4]}"
    while read -a v;do bm1;done <<< $(head -n$h9 ${p2}new|tail -n$((h9-h0))|grep BEAC)
    bm2
    bm3 $h9
    echo -e "${o[0]} $m" >> ${p3}new
  done <<< $(cat $p3)
}
function bm0 {
  n00=0;n50=0;n45=0;n40=0;n35=0;n30=0;n25=0;n20=0
  c00=0;c50=0;c45=0;c40=0;c35=0;c30=0;c25=0;c20=0
  a00=0;a50=0;a45=0;a40=0;a35=0;a30=0;a25=0;a20=0
  z00=0;z50=0;z45=0;z40=0;z35=0;z30=0;z25=0;z20=0
  x00=0;x50=0;x45=0;x40=0;x35=0;x30=0;x25=0;x20=0
  k00=0;k50=0;k45=0;k40=0;k35=0;k30=0;k25=0;k20=0
}
function bm1 {
  v15=$((10#${v[15]}));v16=$((10#${v[16]}));v17=$((10#${v[17]}));v18=$((10#${v[18]}));v06=$((10#${v[6]}))
  if [[ $v06 -ge 25 ]];then
    if [[ $v06 -ge 30 ]];then
      if [[ $v06 -ge 35 ]];then
        if [[ $v06 -ge 40 ]];then
          if [[ $v06 -ge 45 ]];then
            if [[ $v06 -ge 50 ]]
            then z50=$((z50+v16));x50=$((x50+v17));n50=$((n50+v18));k50=$((k50+v15));c50=$((c50+1))
            else z45=$((z45+v16));x45=$((x45+v17));n45=$((n45+v18));k45=$((k45+v15));c45=$((c45+1))
            fi
          else z40=$((z40+v16));x40=$((x40+v17));n40=$((n40+v18));k40=$((k40+v15));c40=$((c40+1))
          fi
        else z35=$((z35+v16));x35=$((x35+v17));n35=$((n35+v18));k35=$((k35+v15));c35=$((c35+1))
        fi
      else z30=$((z30+v16));x30=$((x30+v17));n30=$((n30+v18));k30=$((k30+v15));c30=$((c30+1))
      fi
    else z25=$((z25+v16));x25=$((x25+v17));n25=$((n25+v18));k25=$((k25+v15));c25=$((c25+1))
    fi
  else z20=$((z20+v16));x20=$((x20+v17));n20=$((n20+v18));k20=$((k20+v15));c20=$((c20+1))
  fi
}
function bm2 {
  c00=$((c20+c25+c30+c35+c40+c45+c50))
  z00=$((z20+z25+z30+z35+z40+z45+z50))
  n00=$((n20+n25+n30+n35+n40+n45+n50))
  x00=$((x20+x25+x30+x35+x40+x45+x50))
  k00=$((k20+k25+k30+k35+k40+k45+k50))
  [[ $c50 -gt 0 ]] && a50=$(echo "scale=2;($k50*$pmis+$z50*$pmat+$x50*$pmah+$n50*$pdly)/$c50*$rate/$decp"|bc)
  [[ $c45 -gt 0 ]] && a45=$(echo "scale=2;($k45*$pmis+$z45*$pmat+$x45*$pmah+$n45*$pdly)/$c45*$rate/$decp"|bc)
  [[ $c40 -gt 0 ]] && a40=$(echo "scale=2;($k40*$pmis+$z40*$pmat+$x40*$pmah+$n40*$pdly)/$c40*$rate/$decp"|bc)
  [[ $c35 -gt 0 ]] && a35=$(echo "scale=2;($k35*$pmis+$z35*$pmat+$x35*$pmah+$n35*$pdly)/$c35*$rate/$decp"|bc)
  [[ $c30 -gt 0 ]] && a30=$(echo "scale=2;($k30*$pmis+$z30*$pmat+$x30*$pmah+$n30*$pdly)/$c30*$rate/$decp"|bc)
  [[ $c25 -gt 0 ]] && a25=$(echo "scale=2;($k25*$pmis+$z25*$pmat+$x25*$pmah+$n25*$pdly)/$c25*$rate/$decp"|bc)
  [[ $c20 -gt 0 ]] && a20=$(echo "scale=2;($k20*$pmis+$z20*$pmat+$x20*$pmah+$n20*$pdly)/$c20*$rate/$decp"|bc)
  [[ $c00 -gt 0 ]] && a00=$(echo "scale=2;($k00*$pmis+$z00*$pmat+$x00*$pmah+$n00*$pdly)/$c00*$rate/$decp"|bc)
}
function bm3 {
  #    0  1   2          3              4      5  6    7    8    9   10   11   12   13   14    15
  # BEAC  2   1 2021-11-14 16:16:34+00:00 nodes: 20 avg: 0.00 0.00 0.00 0.00 0.00 0.00 1.75  1.75
  m="$(printf '%2i' $v3) $(printf '%3i' $h3) $dt nodes: $(printf '%2i' $v4)"
  m="$m avg: $(printf '%4.2f' $a50) $(printf '%4.2f' $a45) $(printf '%4.2f' $a40) $(printf '%4.2f' $a35) $(printf '%4.2f' $a30) $(printf '%4.2f' $a25) $(printf '%4.2f' $a20)"
  m="$m $(printf '%5.2f' $a00)$v6"
}
function bm4 {
  #                                                      1                             2                         3                          4        4
  #    0      1          2              3    4 5 6 7 8 9 0   1    2 3 4 5 6 7 8   9    0 1 2 3 4 5 6    7    8 9 0 1 2 3 4     5    6 7 8 9 0 1 2    3
  # BEAC    400 2021-11-14 16:52:36+00:00 cnt: 0 0 0 0 0 0 411 mis: 0 0 0 0 0 0 625 mat: 0 0 0 0 0 0 3501 mah: 0 0 0 0 0 0 25550 dly: 0 0 0 0 0 0 3941
  n="$(printf '%6i' $r1) $dt"
  n="$n cnt: $c50 $c45 $c40 $c35 $c30 $c25 $c20"
  n="$n mis: $k50 $k45 $k40 $k35 $k30 $k25 $k20"
  n="$n mat: $z50 $z45 $z40 $z35 $z30 $z25 $z20"
  n="$n mah: $x50 $x45 $x40 $x35 $x30 $x25 $x20"
  n="$n dly: $n50 $n45 $n40 $n35 $n30 $n25 $n20"
}
function bm {
  bm0
  r0=0;r1=0
  if [[ -f $p7 ]]; then
    read -a o <<< $(tail -n1 $p7)
    r0=${o[1]}
    c50=${o[ 5]};c45=${o[ 6]};c40=${o[ 7]};c35=${o[ 8]};c30=${o[ 9]};c25=${o[10]};c20=${o[11]}
    k50=${o[13]};k45=${o[14]};k40=${o[15]};k35=${o[16]};k30=${o[17]};k25=${o[18]};k20=${o[19]}
    z50=${o[21]};z45=${o[22]};z40=${o[23]};z35=${o[24]};z30=${o[25]};z25=${o[26]};z20=${o[27]}
    x50=${o[29]};x45=${o[30]};x40=${o[31]};x35=${o[32]};x30=${o[33]};x25=${o[34]};x20=${o[35]}
    n50=${o[37]};n45=${o[38]};n40=${o[39]};n35=${o[40]};n30=${o[41]};n25=${o[42]};n20=${o[43]}
  fi
  if [[ -f $p2 ]]; then
    r1=$(cat $p2|wc -l)
    while read -a v;do bm1;done <<< $(tail -n$((r1-r0)) $p2|grep BEAC)
  fi
  bm2
  [[ $h3 -eq 0 || ! $h3 ]] && bo
  v1=0;v2=0
  [[ -f $p3 ]] && while read -a v;do v1=$((${v[2]}+v1));v2=$((1+v2));done <<< $(cat $p3)
  v3=$(printf '%.0f' $(echo "scale=5;($v1+$h3)/(1+$v2)"|bc))
  v4=$(systemctl status eth-beacon|grep target-peers|sed 's%.*target-peers \([0-9]*\).*%\1%')
  dt=$(date --rfc-3339=seconds)
  if [[ $v4 -ge 25 ]];then
    if [[ $v4 -ge 30 ]];then
      if [[ $v4 -ge 35 ]];then
        if [[ $v4 -ge 40 ]];then
          if [[ $v4 -ge 45 ]];then
            if [[ $v4 -ge 50 ]]
            then v5=$a50
            else v5=$a45
            fi
          else v5=$a40
          fi
        else v5=$a35
        fi
      else v5=$a30
      fi
    else v5=$a25
    fi
  else v5=$a20
  fi
  v7=$v5;v8=0
  [[ $(printf '%.0f' $(echo "$a20*100"|bc)) -lt $(printf '%.0f' $(echo "$v7*100"|bc)) ]] && { v7=$a20;v8=$((20-v4)); }
  [[ $(printf '%.0f' $(echo "$a25*100"|bc)) -lt $(printf '%.0f' $(echo "$v7*100"|bc)) ]] && { v7=$a25;v8=$((25-v4)); }
  [[ $(printf '%.0f' $(echo "$a30*100"|bc)) -lt $(printf '%.0f' $(echo "$v7*100"|bc)) ]] && { v7=$a30;v8=$((30-v4)); }
  [[ $(printf '%.0f' $(echo "$a35*100"|bc)) -lt $(printf '%.0f' $(echo "$v7*100"|bc)) ]] && { v7=$a35;v8=$((35-v4)); }
  [[ $(printf '%.0f' $(echo "$a40*100"|bc)) -lt $(printf '%.0f' $(echo "$v7*100"|bc)) ]] && { v7=$a40;v8=$((40-v4)); }
  [[ $(printf '%.0f' $(echo "$a45*100"|bc)) -lt $(printf '%.0f' $(echo "$v7*100"|bc)) ]] && { v7=$a45;v8=$((45-v4)); }
  [[ $(printf '%.0f' $(echo "$a50*100"|bc)) -lt $(printf '%.0f' $(echo "$v7*100"|bc)) ]] && { v7=$a50;v8=$((50-v4)); }
  if [[ ($h3 -gt $v3 && $(printf '%.0f' $(echo "$v5*100"|bc)) -ge $(printf '%.0f' $(echo "$a00*100"|bc))) && $v8 -ne 0 ]];then v6=" PEERS_$v8";else v6='';v8=0;fi
  bm3
}
function gst {
  echo "GETH $(printf '%6s' $(systemctl status $ethg|grep Memory:|sed 's%.*Memory: \(.*\)%\1%')) $(date --rfc-3339=seconds) status: $(systemctl status $ethg|grep Active:|sed 's%.*Active: \(.*\)%\1%')"
}
function ost {
  echo "OETH $(printf '%6s' $(systemctl status $etho|grep Memory:|sed 's%.*Memory: \(.*\)%\1%')) $(date --rfc-3339=seconds) status: $(systemctl status $etho|grep Active:|sed 's%.*Active: \(.*\)%\1%')"
}
function bst {
  echo "BEAC $(printf '%6s' $(systemctl status $ethb|grep Memory:|sed 's%.*Memory: \(.*\)%\1%')) $(date --rfc-3339=seconds) status: $(systemctl status $ethb|grep Active:|sed 's%.*Active: \(.*\)%\1%')"
}
function vst {
  echo "VALI $(printf '%6s' $(systemctl status $ethv|grep Memory:|sed 's%.*Memory: \(.*\)%\1%')) $(date --rfc-3339=seconds) status: $(systemctl status $ethv|grep Active:|sed 's%.*Active: \(.*\)%\1%')"
}
function boo {
  if [[ -f $p2 ]]; then
    h0=$h3;h9=$h3
    if [[ $(echo $1|egrep '^[0-9]+$') ]];then h9=$1;else if [[ $h9 -lt $l2rs && $(echo "$b9"|wc -l) -gt $l2rs ]];then h0=$l2rs;h9=$l2rs;fi;fi
    if [[ $(echo $1|egrep '^[0-9]+$') ]];then h0=$1;else if [[ $h0 -gt $hors ]];then h0=$hors;fi;fi
    echo "$b9"|sort -k10.1n|head -n$h9|tail -n$h0
  fi
}
function bo {
  h2='00:00';h3=0
  if [[ -f $p2 ]]; then
    b8=$(grep BEAC $p2|tail -n1|sed 's%.* \([0-9]*-[0-9]*-[0-9]*\) \([0-9]*:[0-9]*\):.*%\1 \2%')
    h1=$(echo $b8|cut -d' ' -f1)
    if [[ $(echo $1|egrep '^[0-9]+:[0-9]+$') ]];then h2=$1;else if [[ $(echo $2|egrep '^[0-9]+:[0-9]+$') ]];then h2=$2;else h2=$(echo $b8|cut -d' ' -f2);fi;fi
    b9=$(grep "BEAC.*$h2" $p2)
    if [[ $(echo $1|egrep '^[0-9]+$')        ]];then h3=$1;else if [[ $(echo $2|egrep '^[0-9]+$')        ]];then h3=$2;else h3=$(echo "$b9"|sort -k10.1n|grep -n $h1|cut -d: -f1);fi;fi
    n=0
    while [[ ! $h3 ]];do
      n=$((n+1))
      h1=$(date -d "$n days ago $h2" '+%Y-%m-%d')
      h3=$(echo "$b9"|sort -k10.1n|grep -n $h1|cut -d: -f1)
    done
  fi 
}
function bh {
  [[ $1 ]] || echo -e "BEAC BH $(printf '%3i' $((${1:-$hors}-$l2rs)))"
  tail -n${1:-$hors} $p2|head -n$((${1:-$hors}-$l2rs))
  [[ $1 ]] || echo -e "BEAC BH $(printf '%3i' $l2rs)"
  tail -n$l2rs       $p2|head -n$l2rs
  [[ $1 ]] || { bo;echo -e "BEAC BO $(printf '%3i' $h3)/$(echo "$b9"|wc -l)";boo; }
  echo -e "BEAC BL";bk;echo -e "BEAC $m"
  [[ $1 ]] || { bm;echo -e "BEAC BM\nBEAC $m\n"; }
  [[ $1 ]] || { bst;vst; }
  [[ $1 ]] || { csh; }
  [[ $1 ]] || { psh; }
  [[ $1 ]] || { esh; }
}
function brs {
  if [[ ! -f /home/eth/beacon.restart.inicio ]]; then
    touch /home/eth/beacon.restart.inicio
    while [[ -f /home/eth/beacon.restart.inicio ]]; do
      b6=$(echo $H|sudo -S grep "lighthouse.$bpid.* INFO Synced " $p4 2>/dev/null|tail -n32|sed 's%.* epoch: \([0-9]*\).*%\1%'|sort -u)
      if [[ $(echo "$b6"|wc -l) -eq 1 ]]; then
        touch /home/eth/beacon.restart.interval
        b1=0
        while [[ $b1 -lt 400 && -f /home/eth/beacon.restart.interval ]]; do
          b4=$(echo $H|sudo -S grep "lighthouse.$bpid.* INFO " $p4 2>/dev/null|tail -n $pors|sed 's%.* INFO \([^ ]*\) .*%\1%'|sort -u)
          b5=$(echo "$b4"|head -n1)
          if [[ $(echo "$b4"|wc -l) -eq 2 && $(echo "$b4"|tail -n1) = Synced && ( $b5 = New || $b5 = Processed ) ]]; then
            if [[ $1 -ne 0 ]]; then
              cp /etc/systemd/system/$ethb.service ~/$ethb.save
              b3=$(grep target-peers ~/$ethb.save|sed 's%.*target-peers \([0-9]*\).*%\1%')
              b3=$(($b3+$1))
              [[ $b3 -ge 20 && $b3 -le 50 ]] && sed "s%--target-peers [0-9]*%--target-peers $b3%" ~/$ethb.save > /etc/systemd/system/$ethb.service
            fi
            bk
            if [[ $2 || $b7 != OK ]]; then
              echo -e "RSTI $m" >> $p2
              resolvectl query smtp.gmail.com 2>/dev/null 1>&2
              [[ $2 = vcreset ]] && { echo $H|sudo -S systemctl stop $ethv 2>/dev/null; }
              echo $H|sudo -S systemctl stop $ethb    2>/dev/null
              echo $H|sudo -S systemctl daemon-reload 2>/dev/null
              b1=400
              rm -f /home/eth/beacon.restart.interval
              if [[ $2 = reboot ]]; then
                rm -f /home/eth/beacon.restart.inicio
                echo $H|sudo -S reboot 2>/dev/null
              else
                echo $H|sudo -S systemctl start $ethb 2>/dev/null
                [[ $2 = vcreset ]] && { echo $H|sudo -S systemctl start $ethv 2>/dev/null; }
              fi
            fi
          fi
          sleep 3s
          b1=$(($b1+1))
        done
        rm -f /home/eth/beacon.restart.inicio
      fi 
      sleep 1s
    done
  fi
}
function ssp {
  echo -e "${i}QUER MESMO TRANSFERIR VALIDATORS?${f}"
  read rsp
  if [[ $rsp = sim && ! -f $dtdi/vc_slash && ! -f $dtdi/vc_lock && -f $dtdi/vc_keys ]]; then
    vp;vd
    echo -e "${i}SAVE SLASHING PROTECTION DB${f}"
    echo $H|sudo -S cp $vldt/slashing_protection.sqlite /home/eth 2>/dev/null
    sudo chown eth:eth /home/eth/slashing_protection.sqlite
    if [[ $cunm = $znm3 ]]; then
      scp /home/eth/slashing_protection.sqlite vpss:~
      echo -e "${i}SAVED SLASHING PROTECTION DB IN vpss${f}"
    else
      scp /home/eth/slashing_protection.sqlite ztc3.fruga.pt:~
      echo -e "${i}SAVED SLASHING PROTECTION DB IN ztc3${f}"
    fi
  fi
}

[[ $1 = dsh ]] && { dsh ${2:-pt.archive.ubuntu.com}; }
[[ $1 = drs ]] && { drs; }
[[ $1 = nsh ]] && { nsh; }
[[ $1 = nrs ]] && { nrs; }
[[ $1 = trs ]] && { [[ $(systemctl status systemd-timesyncd 2>/dev/null|grep -i masked) ]] || { cex "systemctl restart systemd-timesyncd"; };csh; }
[[ $1 = vcp ]] && { ssp; }
[[ $1 = gs  ]] && { gs;echo -e "GETH $m"; }
[[ $1 = gl  ]] && { gk;echo -e "GETH $m"; }
[[ $1 = ol  ]] && { ok;echo -e "OETH $m"; }
[[ $1 = glf ]] && { gk;echo -e "GETH $m" >> $p5; }
[[ $1 = olf ]] && { ok;echo -e "OETH $m" >> $p6; }
[[ $1 = bl  ]] && { bk;echo -e "BEAC $m"; }
[[ $1 = bm  ]] && { bm;    echo -e "BEAC $m"; }
[[ $1 = bn  ]] && { bm;bm4;echo -e "BEAC $n"; }
[[ $1 = blf ]] && { bk;echo -e "BEAC $m" >> $p2; }
[[ $1 = bmf ]] && { bm;echo -e "BEAC $m" >> $p3; }
[[ $1 = gh  ]] && { tail -n ${2:-$hors} $p5;gk;echo -e "GETH $m\n";gst;csh;psh;esh; }
[[ $1 = oh  ]] && { tail -n ${2:-$hors} $p6;ok;echo -e "OETH $m\n";ost;csh;psh;esh; }
[[ $1 = cpe ]] && { csh;psh;esh; }
[[ $1 = bh  ]] && { [[ -f $p2 ]] && { bh $2; } }
[[ $1 = bhr ]] && { [[ -f $p2 ]] && { bhr; } }
[[ $1 = bo  ]] && { bo $2 $3;boo $2; }
[[ $1 = gkr ]] && { g7;[[ $g7 != OK ]] && grs ${2:-0}; }
[[ $1 = okr ]] && { o7;[[ $o7 != OK ]] && ors ${2:-0}; }
[[ $1 = bkr ]] && { b7;[[ $b7 != OK ]] && brs ${2:-0}; }
[[ $1 = bnc ]] && { bm;bm4;echo -e "BEAC $n" >> $p7;[ $v8 -ne 0 ]] && brs $v8 bnreset; }
[[ $1 = grs ]] && { grs ${2:-0}; }
[[ $1 = ors ]] && { ors ${2:-0}; }
[[ $1 = brs ]] && { brs ${2:-0} bnreset; }
[[ $1 = srs ]] && { brs ${2:-0} reboot; }
[[ $1 = lrs ]] && { brs ${2:-0} vcreset; }
# lista servicos & portas
[[ $1 = ll  ]] && { cex "systemctl list-units $pate $patp $patf"; }
[[ $1 = lp  ]] && { netstat -tulpn; }
# outros journal system/lighthouse
[[ $1 = el  ]] && { echo $H|sudo -S grep -i 'openethereum\|geth\[\|lighthouse' $p4 2>/dev/null|if [[ $2 ]];then grep -i "[a-z]* [0-9]* $2";else grep -v ' INFO ';fi; }
[[ $1 = sl  ]] && { echo $H|sudo -S grep -v 'openethereum\|geth\[\|lighthouse' $p4 2>/dev/null|if [[ $2 ]];then grep -i "[a-z]* [0-9]* $2";else grep -i 'error' ;fi; }
[[ $1 = ws  ]] && { cex "ufw status numbered"; }
[[ $1 = wa  ]] && if [[ $(echo $H|sudo -S ufw status 2>/dev/null|grep -i inactive) ]];then echo -e "${i}ARRANCA FIREWALL${f}";sudo ufw enable; else echo -e "${i}FIREWALL JA ACTIVE${f}";fi
[[ $1 = wpr ]] && { cex "ufw disable"; }
# journal
[[ $1 = yj ]] && { jsh; }
[[ $1 = ej ]] && { jsh "-u $pate"; }
[[ $1 = gj ]] && { jsh "-u $ethg"; }
[[ $1 = oj ]] && { jsh "-u $etho"; }
[[ $1 = bj ]] && { jsh "-u $ethb"; }
[[ $1 = vj ]] && { jsh "-u $ethv"; }
[[ $1 = pj ]] && { jsh "-u $ethp"; }
[[ $1 = nj ]] && { jsh "-u $ethn"; }
[[ $1 = fj ]] && { jsh "-u $ethf"; }
[[ $1 = xj ]] && { jsh "-u $plex"; }
[[ $1 = rj ]] && { jsh "-u $trrt"; }
[[ $1 = sj ]] && { jsh "-u $dnsd"; }
# arranca
[[ $1 = ga ]] && { dmr;ga; }
[[ $1 = oa ]] && { dmr;oa; }
[[ $1 = ba ]] && { dmr;ba; }
[[ $1 = va ]] && { dmr;va; }
[[ $1 = pa ]] && { dmr;pa; }
[[ $1 = na ]] && { dmr;na; }
[[ $1 = fa ]] && { dmr;fa; }
[[ $1 = xa ]] && { dmr;xa; }
[[ $1 = ra ]] && { dmr;ra; }
[[ $1 = sa ]] && { dmr;sa; }
# para & arranca & journal
[[ $1 = gaj ]] && { dmr;ga;jsh "-u $ethg"; }
[[ $1 = oaj ]] && { dmr;oa;jsh "-u $etho"; }
[[ $1 = baj ]] && { dmr;ba;jsh "-u $ethb"; }
[[ $1 = vaj ]] && { dmr;va;jsh "-u $ethv"; }
[[ $1 = saj ]] && { dmr;sa;jsh "-u $dnsd"; }
[[ $1 = gpa ]] && { gp;dmr;ga;jsh "-u $ethg"; }
[[ $1 = opa ]] && { op;dmr;oa;jsh "-u $etho"; }
[[ $1 = bpa ]] && { bp;dmr;ba;jsh "-u $ethb"; }
[[ $1 = vpa ]] && { vp;dmr;va;jsh "-u $ethv"; }
[[ $1 = xpa ]] && { xp;xa; }
[[ $1 = rpa ]] && { rp;ra; }
[[ $1 = spa ]] && { sp;sa;jsh "-u $dnsd"; }
[[ $1 = gpd ]] && { gp;gd; }
[[ $1 = opd ]] && { op;od; }
[[ $1 = bpd ]] && { bp;bd; }
[[ $1 = vpd ]] && { vp;vd; }
[[ $1 = xpd ]] && { xp;xd; }
[[ $1 = rpd ]] && { rp;rd; }
[[ $1 = spd ]] && { sp;sd; }
[[ $1 = gea ]] && { ge;dmr;ga;jsh "-u $ethg"; }
[[ $1 = oea ]] && { oe;dmr;oa;jsh "-u $etho"; }
[[ $1 = bea ]] && { be;dmr;ba;jsh "-u $ethb"; }
[[ $1 = vea ]] && { ve;dmr;va;jsh "-u $ethv"; }
[[ $1 = xea ]] && { xe;xa; }
[[ $1 = rea ]] && { re;ra; }
[[ $1 = sea ]] && { se;sa;jsh "-u $dnsd"; }
# enable
[[ $1 = ge ]] && { ge; }
[[ $1 = oe ]] && { oe; }
[[ $1 = be ]] && { be; }
[[ $1 = ve ]] && { ve; }
[[ $1 = pe ]] && { pe; }
[[ $1 = ne ]] && { ne; }
[[ $1 = fe ]] && { fe; }
[[ $1 = xe ]] && { xe; }
[[ $1 = re ]] && { re; }
[[ $1 = se ]] && { se; }
# para
[[ $1 = fpr ]] && { fp; }
[[ $1 = npr ]] && { np; }
[[ $1 = ppr ]] && { pp; }
[[ $1 = vpr ]] && { vp; }
[[ $1 = bpr ]] && { bp; }
[[ $1 = gpr ]] && { gp; }
[[ $1 = opr ]] && { op; }
[[ $1 = xpr ]] && { xp; }
[[ $1 = rpr ]] && { rp; }
[[ $1 = spr ]] && { sp; }
# disable
[[ $1 = fds ]] && { fd; }
[[ $1 = nds ]] && { nd; }
[[ $1 = pds ]] && { pd; }
[[ $1 = vds ]] && { vd; }
[[ $1 = bds ]] && { bd; }
[[ $1 = gds ]] && { gd; }
[[ $1 = ods ]] && { od; }
[[ $1 = xds ]] && { xd; }
[[ $1 = rds ]] && { rd; }
[[ $1 = sds ]] && { sd; }

if [[ ! $1 ]]; then
  c1="\nprimeira letra"
  c1="$c1\ne\t\t$ethg $ethb $ethv"
  c1="$c1\ng\t\t$ethg"
  c1="$c1\no\t\t$etho"
  c1="$c1\nb\t\t$ethb"
  c1="$c1\nv\t\t$ethv"
  c1="$c1\np\t\t$ethp"
  c1="$c1\nn\t\t$ethn"
  c1="$c1\nf\t\t$ethf"
  c1="$c1\nx\t\t$plex"
  c1="$c1\nr\t\t$trrt"
  c1="$c1\ns\t\t$dnsd"
  c1="$c1\n"
  c1="$c1\nsegunda letra"
  c1="$c1\na\t\tarranca"
  c1="$c1\naj\t\tarranca\t& journal"
  c1="$c1\ne\t\tenable"
  c1="$c1\nj\t\tjournal"
  c1="$c1\npr\t\tpara"
  c1="$c1\nds\t\tdisable"
  c1="$c1\npd\t\tpara\t& disable"
  c1="$c1\npa\t\tpara\t& arranca\t& journal"
  c1="$c1\nea\t\tenable\t& arranca\t& journal"
  c1="$c1\nk [s]\t\tcheck s=curl"
  c1="$c1\nl [s]\t\tlog   s=curl"
  c1="$c1\n"
  c1="$c1\noutros"
  c1="$c1\ngrs [n]\t\t$ethg restart n=nodes to change"
  c1="$c1\nors [n]\t\t$etho restart n=nodes to change"
  c1="$c1\nbrs [n]\t\t$ethb restart n=nodes to change"
  c1="$c1\nsrs [n]\t\tsystem restart n=nodes to change"
  c1="$c1\nlrs [n]\t\tlighthouse restart n=nodes to change"
  if [[ $cunm = $znm3 ]]; then
    c1="$c1\nvcp\t\t$ethv copy to $vnm3 server"
  else
    c1="$c1\nvcp\t\t$ethv copy to $znm3 server"
  fi
  c1="$c1\nyj\t\tsystem journal"
  c1="$c1\nsl [s]\t\tlista system journal  s=TOTAL"
  c1="$c1\nel [s]\t\tlista geth,lighthouse s=TOTAL"
  c1="$c1\nll\t\tlista servicos"
  c1="$c1\nlp\t\tlista portas"
  c1="$c1\ngs\t\tgeth syncing"
  c1="$c1\nbh\t\tbeacon historic report"
  c1="$c1\nbhr\t\tbeacon historic recalculate"
  c1="$c1\ncpe\t\tclock & cpu & errors report"
  c1="$c1\nws\t\tfirewall status"
  c1="$c1\nwa\t\tfirewall arranca"
  c1="$c1\nwpr\t\tfirewall para"
  c1="$c1\nnsh\t\tnetwork show route & DNS"
  c1="$c1\ndsh\t\tdns show"
  c1="$c1\nnrs\t\treset netplan\t& dns"
  c1="$c1\ndrs\t\treset dns"
  c1="$c1\ntrs\t\ttime sync restart"
  echo -e "\n$c1\n"
fi

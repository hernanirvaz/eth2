#!/bin/bash

source /home/eth/eth2/t1

# Plex Media Server
function rxw { uu "ufw$2 allow from 192.168.8.0/24 $1"; }
function xop { uu 'ufw delete deny 32400             ';rxw 'to any port 32400 comment plex'; }
function xcl { uu 'ufw        deny 32400 comment plex';rxw 'to any port 32400 '   ' delete'; }
function xe { xop;uu 'ufw reload';uu "systemctl enable $plex"; }
function xa { [ "$(systemctl status $plex 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $plex"; } }
function xp { [ "$(systemctl status $plex 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $plex"; } }
function xd { uu "systemctl disable $plex";xcl;uu 'ufw reload'; }
# Transmission BitTorrent Daemon
function rop { uu 'ufw allow 51413 comment torrent';rxw 'to any port 9091 comment torrent'; }
function rcl { uu 'ufw deny  51413 comment torrent';rxw 'to any port 9091'       ' delete'; }
function re { rop;uu 'ufw reload';uu "systemctl enable $trrt"; }
function ra { [ "$(systemctl status $trrt 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $trrt"; } }
function rp { [ "$(systemctl status $trrt 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $trrt"; } }
function rd { uu "systemctl disable $trrt";rcl;uu 'ufw reload'; }
# Bind9
function sop { uu 'ufw delete deny 53            ';rxw 'to any port 53 comment dns'; }
function scl { uu 'ufw        deny 53 comment dns';rxw 'to any port 53 '  ' delete'; }
function se { sop;uu 'ufw reload';uu "systemctl enable $dnsd"; }
function sa { [ "$(systemctl status $dnsd 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $dnsd"; } }
function sp { [ "$(systemctl status $dnsd 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $dnsd"; } }
function sd { uu "systemctl disable $dnsd";scl;uu 'ufw reload'; }

function gfw { if [ "$cust" = "hrv" ];then uu "ufw$2 allow from $zip2 $1";uu "ufw$2 allow from $zip3 $1";else uu "ufw$2 allow from $vip1 $1";uu "ufw$2 allow from $vip3 $1";fi; }
function gop { uu 'ufw allow 30303 comment eth1';uu 'ufw delete deny 8545              ';gfw 'to any port 8545 comment geapi'; }
function gcl { uu 'ufw deny  30303 comment eth1';uu 'ufw        deny 8545 comment geapi';gfw 'to any port 8545'     ' delete'; }
function bfw { if [ "$cust" = "hrv" ];then uu "ufw$2 allow from $zip3 $1";else uu "ufw$2 allow from $vip3 $1";fi; }
function bop { uu 'ufw allow 9000 comment eth2';uu 'ufw delete deny 5052              ';bfw 'to any port 5052 comment bnapi'; }
function bcl { uu 'ufw deny  9000 comment eth2';uu 'ufw        deny 5052 comment bnapi';bfw 'to any port 5052'     ' delete'; }
function vfw { if [ "$cust" = "hrv" ];then uu "ufw$2 allow from $zip1 $1";else uu "ufw$2 allow from $vip1 $1";fi; }
function vop { uu 'ufw delete deny 5064              ';vfw 'to any port 5064 comment vcmet'; }
function vcl { uu 'ufw        deny 5064 comment vcmet';vfw 'to any port 5064'     ' delete'; }
function fop { uu 'ufw allow 3000/tcp comment grafana'; }
function fcl { uu 'ufw deny  3000/tcp                '; }

function uu { echo -e "${i}$1${f}";echo $H|sudo -S $1 2>/dev/null; }
function ut { echo -e "${i}$1${f}";echo $H|sudo -S $1 2>/dev/null|tail -n $2; }
function jb { uu "journalctl --no-hostname --no-full -f $1"; }
function dr { echo $H|sudo -S systemctl daemon-reload 2>/dev/null; }

function ge { gop;uu 'ufw reload';uu "systemctl enable $ethg"; }
function be { bop;uu 'ufw reload';uu "systemctl enable $ethb"; }
function ve { [ ! -f $dtdi/vc_lock ] && { vop;uu 'ufw reload';uu "systemctl enable $ethv"; } }
function pe { uu 'ufw reload';uu "systemctl enable $ethp"; }
function ne { uu 'ufw reload';uu "systemctl enable $ethn"; }
function fe { fop;uu 'ufw reload';uu "systemctl enable $ethf"; }
function ga { [ "$(systemctl status $ethg 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethg"; } }
function ba { [ "$(systemctl status $ethb 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethb"; } }
function va { [ "$(systemctl status $ethv 2>/dev/null|grep -i 'inactive\|failed')" ] && [ ! -f $dtdi/vc_lock ] && { uu "systemctl start $ethv"; } }
function pa { [ "$(systemctl status $ethp 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethp"; } }
function na { [ "$(systemctl status $ethn 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethn"; } }
function fa { [ "$(systemctl status $ethf 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethf"; } }
function gp { [ "$(systemctl status $ethg 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethg"; } }
function bp { [ "$(systemctl status $ethb 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethb"; } }
function vp { [ "$(systemctl status $ethv 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethv"; } }
function pp { [ "$(systemctl status $ethp 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethp"; } }
function np { [ "$(systemctl status $ethn 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethn"; } }
function fp { [ "$(systemctl status $ethf 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethf"; } }
function gd { uu "systemctl disable $ethg";gcl;uu 'ufw reload'; }
function bd { uu "systemctl disable $ethb";bcl;uu 'ufw reload'; }
function vd { uu "systemctl disable $ethv";vcl;uu 'ufw reload';touch $dtdi/vc_lock; }
function pd { [ "$(systemctl status $ethp 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethp"; } }
function nd { [ "$(systemctl status $ethn 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethn"; } }
function fd { [ "$(systemctl status $ethf 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethf";fcl;uu 'ufw reload'; } }
function g0 { g0=0;[ -d /var/lib/goethereum ] && g0=$(echo $H|sudo -S du -s /var/lib/goethereum 2>/dev/null|cut -f1); }
function g1 { g1=0;[ -d /var/lib/goethereum ] && { if [ "$cunm" = "$znm1" ];then g="http://$zip1:8545";else g="http://$vip1:8545";fi;g1=$(geth attach $g --exec eth.syncing); }; }
function g2 { g2=0;[ -d /var/lib/goethereum ] && { if [ "$cunm" = "$znm1" ];then g="http://$zip1:8545";else g="http://$vip1:8545";fi;g2=$(geth attach $g --exec net.peerCount); }; }
function g3 {
  d=$(echo $H|sudo -S grep -i peers: /var/log/syslog 2>/dev/null|tail -n 1|sed -e 's%,% %g;s%  *% %g')
  if [ "$(echo $d|cut -d' ' -f22)" = "peers:" ];then g3=$(echo $d|cut -d' ' -f23);else g3=$(echo $d|cut -d' ' -f22);fi
}
function gs {
  if [ -d /var/lib/goethereum ] && ([ "$cunm" = "$vnm1" ] || [ "$cunm" = "$znm1" ]); then
    g0;g1;g2
    if [ "$(echo $g1|grep -i false)" ]; then
      m="GETH SYNCING DONE - PEERCOUNT $g2"
    else
      if [ "$cunm" = "$znm1" ]; then
        r0=$(ssh vpsl "export H=$H;$p0/t6 g0")
      else
        r0=$g0
      fi
      h=$(echo $g1|sed -Ee 's%.*highestBlock: *([0-9]+).*%\1%i')
      c=$(echo $g1|sed -Ee 's%.*currentBlock: *([0-9]+).*%\1%i')
      k=$(echo $g1|sed -Ee 's%.*knownStates: *([0-9]+).*%\1%i')
      p=$(echo $g1|sed -Ee 's%.*pulledStates: *([0-9]+).*%\1%i')
      b=$(echo $H|sudo -S grep -i 'Imported new block headers' /var/log/syslog 2>/dev/null|head -1|cut -d= -f4|cut -d' ' -f1)
      d=$(echo $H|sudo -S grep -i 'Imported new block headers' /var/log/syslog 2>/dev/null|tail -1|cut -d= -f4|cut -d' ' -f1)
      i=$(echo $H|sudo -S grep -i 'Imported new state entries' /var/log/syslog 2>/dev/null|head -1|cut -d= -f4|cut -d' ' -f1)
      t=$(echo $H|sudo -S grep -i 'Imported new state entries' /var/log/syslog 2>/dev/null|tail -1|cut -d= -f4|cut -d' ' -f1)
      m="GETH SYNCING - PEERCOUNT: $g2\nBlocks api: $h ($((h-c)))\tStates api: $k ($((k-p)))\nBlocks log: $d ($((d-b)))\tStates log: $t ($((t-i)))\nFiles size: $(($r0/1000))M ($(((r0-g0)/1000))M)"
    fi
  else
    m="NO GETH HERE ($cunm)"
  fi
}
function rq { echo -e "\nresolvectl query ${1:-pt.archive.ubuntu.com}";resolvectl query "${1:-pt.archive.ubuntu.com}"; }
function rs { echo -e "${i}RESET NETPLAN & SYSTEMD-RESOLVED${f}";echo $H|sudo -S netplan apply 2>/dev/null;sudo systemctl restart systemd-resolved; }
function cr {
  if [ "$cunm" = "$znm1" ] || [ "$cunm" = "$znm2" ] || [ "$cunm" = "$znm3" ]; then
    if [ "$(ip route show|grep 'default via'|cut -d' ' -f3)" = "192.168.8.1" ];then m=3; else m=1;fi
    echo -e "${i}CHANGE ROUTE 192.168.8.${m}"
    sed -e "s%via:.*%via: 192.168.8.$m%" /etc/netplan/00-installer-config.yaml > ~/00-installer-config.save
    echo $H|sudo -S mv ~/00-installer-config.save /etc/netplan/00-installer-config.yaml 2>/dev/null
    sudo chown root:root /etc/netplan/00-installer-config.yaml 
    sudo chmod 644 /etc/netplan/00-installer-config.yaml 
    rs
  fi
}
function ds { echo -e "${i}RESET DNS & SYSTEMD-RESOLVED${f}";sp;sudo systemctl stop  systemd-resolved;sa;sudo systemctl start systemd-resolved; }
#function cf {
#  if [ "$cunm" = "$znm1" ] || [ "$cunm" = "$znm2" ]; then
#    if [ "$(grep 'forwarders {' /etc/bind/named.conf.options |cut -d' ' -f3)" = "192.168.8.1;" ];then m=3; else m=1;fi
#    echo -e "${i}CHANGE FORWARDER 192.168.8.${m}${f}"
#    sed -e "s%forwarders .*%forwarders { 192.168.8.$m; };%" /etc/bind/named.conf.options > ~/named.save
#    echo $H|sudo -S mv ~/named.save /etc/bind/named.conf.options 2>/dev/null
#    sudo chown root:root /etc/bind/named.conf.options 
#    sudo chmod 644 /etc/bind/named.conf.options
#    ds
#  fi
#}
function sr { echo -e "ROUTE\t\t$(ip route show|grep 'default via'|cut -d' ' -f3)"; }
function sf {
  m="$(netstat -i|grep -v '^lo\|Iface\|Kernel'|cut -d' ' -f1)"
  # [ -f /etc/bind/named.conf.options ] && echo -e "FORWARDER\t$(grep 'forwarders {' /etc/bind/named.conf.options 2>/dev/null|cut -d' ' -f3)"
  echo -e "DNS\t\t$(resolvectl|grep 'Current DNS'|cut -d' ' -f6)"
  echo -e "$m\t\t$(resolvectl dns|grep $m|cut -d' ' -f4-6)"
}
function gk {
  t=-1;n=0;v=0
  if [ "$(systemctl status $ethg 2>/dev/null|grep -i running)" ]; then
    g2
    [ "$(date --rfc-3339=seconds|cut -d' ' -f2|cut -d: -f1)" -eq 0 ] && rm /home/eth/geth.count
    [ -f /home/eth/geth.count ] && t=$(cat /home/eth/geth.count)
    n=$(echo $H|sudo -S grep -i 'new chain segment' /var/log/syslog 2>/dev/null|wc -l)
  fi
}
function bk {
  t=0;n=0;v=0;y=0;z=0;a=0;x=0;p=0
  for v in $(echo $H|sudo -S grep -i 'gossip' /var/log/syslog 2>/dev/null|sed -e 's%,% %g;s%  *% %g'|cut -d' ' -f23)
  do n=$(($n+1));t=$(($t+$v))
  done
  if [ "$n" -gt 0 ]; then
    g3
    v=$(($t/$n))
    a=$(echo $H|sudo -S grep -i 'attestation success' /var/log/syslog 2>/dev/null|wc -l)
    t=$(echo $H|sudo -S grep -i 'lighthouse'          /var/log/syslog 2>/dev/null|grep -v ' INFO '|grep    ' WARN '|wc -l)
    y=$(echo $H|sudo -S grep -i 'lighthouse'          /var/log/syslog 2>/dev/null|grep -v ' INFO '|grep -v ' WARN '|wc -l)
    h=$(echo $H|sudo -S grep -i 'incorrect head'      /var/log/syslog 2>/dev/null|wc -l)
    c=$(echo $H|sudo -S grep -i 'incorrect target'    /var/log/syslog 2>/dev/null|wc -l)
    z=$(echo $H|sudo -S grep -i 'attestation missing' /var/log/syslog 2>/dev/null|wc -l)
    p=$(echo $H|sudo -S grep -i 'published block'     /var/log/syslog 2>/dev/null|wc -l)
  fi
  b="$(echo "scale=2;($p*$rblk+$a*$ratt+00000000)*${2:-2000}/1000000000"|bc)"
  d="$(echo "scale=2;($h*$phed+$c*$ptrg+$z*$patt)*${2:-2000}/1000000000"|bc)"
  m=""
  if [ "${1:-k}" = "k" ]; then
    m="$m\nREWARDS PENALTIES\t$b€ $d€"
    m="$m\nPUBLISHED BLOCKS\t$p"
    m="$m\nNUMBER GOSSIPS\t\t$n"
    m="$m\nNUMBER ATTESTATIONS\t$a $(($a*100/$n))%"
    m="$m\nWARN ERRO\t\t$t $y $((($t+$y)*100/$a))%"
    m="$m\nHEAD TRGT MISS\t\t$h $c $z"
    m="$m\nNODES\t\t\t${g3:-0}"
    m="$m\nAVG GOSSIP DELAYS\t$v"
  else
    m="$m rewards_penalties: $b€ $d€,"
    m="$m published_blocks: $p,"
    m="$m number_gossips: $n,"
    m="$m number_attestations: $a $(($a*100/$n))%,"
    m="$m warn_erro: $t $y $((($t+$y)*100/$a))%,"
    m="$m head_trgt_miss: $h $c $z,"
    m="$m nodes: ${g3:-0},"
    m="$m avg_gossip_delays: $v"
  fi
}

[ "$1" = "rs"  ] && { rs; }
[ "$1" = "ds"  ] && { ds; }
[ "$1" = "rq"  ] && { rq $2; }
[ "$1" = "cr"  ] && { cr; }
#[ "$1" = "cf"  ] && { cf; }
#[ "$1" = "crf" ] && { cr;cf; }
[ "$1" = "sr"  ] && { sr;sf; }
[ "$1" = "gk"  ] && { gk  ;if [ "$n" -gt "$t" ];then echo $n > /home/eth/geth.count;m="OK";else m="BLOCKED";fi;echo -e "GETH $m $(uname -n)\n\n$(date --rfc-3339=date)\nNODES\t${g2:-0}"; }
[ "$1" = "gl"  ] && { gk  ;if [ "$n" -gt "$t" ];then echo $n > /home/eth/geth.count;m="OK";else m="BLOCKED";fi;echo -e "GETH $m $(uname -n) $(date --rfc-3339=date) nodes: ${g2:-0}"; }
[ "$1" = "bk"  ] && { bk k;echo -e "BEAC $(uname -n)\n\n$(date --rfc-3339=date)$m"; }
[ "$1" = "bl"  ] && { bk l;echo -e "BEAC $(uname -n) $(date --rfc-3339=date)$m"; }

# lista servicos
[ "$1" = "ll" ] && { uu "systemctl list-units $pate $patp $patf"; }
# lista portas
[ "$1" = "lp" ] && { netstat -tulpn; }
# outros journal system/lighthouse
[ "$1" = "el" ] && { echo $H|sudo -S grep -i 'geth\|lighthouse'      /var/log/syslog 2>/dev/null|if [ "$2" ];then tee;else grep -v ' INFO ';fi; }
[ "$1" = "sl" ] && { echo $H|sudo -S grep -v 'geth\|lighthouse\|UFW' /var/log/syslog 2>/dev/null|if [ "$2" ];then tee;else grep -i 'error' ;fi; }
#[ "$1" = "bl" ] && { echo $H|sudo -S grep -i 'Successfully published block' /var/log/syslog 2>/dev/null; }
#[ "$1" = "nr" ] && { ut "grep -i record /var/log/syslog" "${2:-30}"; }
[ "$1" = "np" ] && { g2;g3;echo -e "PEERS: GETH ${g2:-0}, BEACON ${g3:-0}"; }
[ "$1" = "gs" ] && { gs;echo -e $m; }
[ "$1" = "ws" ] && { uu "ufw status numbered"; }
[ "$1" = "wa" ] && if [ "$(echo $H|sudo -S ufw status 2>/dev/null|grep -i inactive)" ];then echo -e "${i}ARRANCA FIREWALL${f}";sudo ufw enable; else echo -e "${i}FIREWALL JA ACTIVE${f}";fi
[ "$1" = "wpr" ] && { uu "ufw disable"; }

# journal
[ "$1" = "yj" ] && { jb; }
[ "$1" = "ej" ] && { jb "-u $pate"; }
[ "$1" = "gj" ] && { jb "-u $ethg"; }
[ "$1" = "bj" ] && { jb "-u $ethb"; }
[ "$1" = "vj" ] && { jb "-u $ethv"; }
[ "$1" = "pj" ] && { jb "-u $ethp"; }
[ "$1" = "nj" ] && { jb "-u $ethn"; }
[ "$1" = "fj" ] && { jb "-u $ethf"; }
[ "$1" = "xj" ] && { jb "-u $plex"; }
[ "$1" = "rj" ] && { jb "-u $trrt"; }
[ "$1" = "sj" ] && { jb "-u $dnsd"; }
# arranca
[ "$1" = "ga" ] && { dr;ga; }
[ "$1" = "ba" ] && { dr;ba; }
[ "$1" = "va" ] && { dr;va; }
[ "$1" = "pa" ] && { dr;pa; }
[ "$1" = "na" ] && { dr;na; }
[ "$1" = "fa" ] && { dr;fa; }
[ "$1" = "xa" ] && { dr;xa; }
[ "$1" = "ra" ] && { dr;ra; }
[ "$1" = "sa" ] && { dr;sa; }
# para & arranca & journal
[ "$1" = "gaj" ] && { dr;ga;jb "-u $ethg"; }
[ "$1" = "baj" ] && { dr;ba;jb "-u $ethb"; }
[ "$1" = "vaj" ] && { dr;va;jb "-u $ethv"; }
[ "$1" = "saj" ] && { dr;sa;jb "-u $dnsd"; }
[ "$1" = "gpa" ] && { gp;dr;ga;jb "-u $ethg"; }
[ "$1" = "bpa" ] && { bp;dr;ba;jb "-u $ethb"; }
[ "$1" = "vpa" ] && { vp;dr;va;jb "-u $ethv"; }
[ "$1" = "xpa" ] && { xp;xa; }
[ "$1" = "rpa" ] && { rp;ra; }
[ "$1" = "spa" ] && { sp;sa;jb "-u $dnsd"; }
[ "$1" = "gpd" ] && { gp;gd; }
[ "$1" = "bpd" ] && { bp;bd; }
[ "$1" = "vpd" ] && { vp;vd; }
[ "$1" = "xpd" ] && { xp;xd; }
[ "$1" = "rpd" ] && { rp;rd; }
[ "$1" = "spd" ] && { sp;sd; }
[ "$1" = "gea" ] && { ge;dr;ga;jb "-u $ethg"; }
[ "$1" = "bea" ] && { be;dr;ba;jb "-u $ethb"; }
[ "$1" = "vea" ] && { ve;dr;va;jb "-u $ethv"; }
[ "$1" = "xea" ] && { xe;xa; }
[ "$1" = "rea" ] && { re;ra; }
[ "$1" = "sea" ] && { se;sa;jb "-u $dnsd"; }
# enable
[ "$1" = "ge" ] && { ge; }
[ "$1" = "be" ] && { be; }
[ "$1" = "ve" ] && { ve; }
[ "$1" = "pe" ] && { pe; }
[ "$1" = "ne" ] && { ne; }
[ "$1" = "fe" ] && { fe; }
[ "$1" = "xe" ] && { xe; }
[ "$1" = "re" ] && { re; }
[ "$1" = "se" ] && { se; }
# para
[ "$1" = "fpr" ] && { fp; }
[ "$1" = "npr" ] && { np; }
[ "$1" = "ppr" ] && { pp; }
[ "$1" = "vpr" ] && { vp; }
[ "$1" = "bpr" ] && { bp; }
[ "$1" = "gpr" ] && { gp; }
[ "$1" = "xpr" ] && { xp; }
[ "$1" = "rpr" ] && { rp; }
[ "$1" = "spr" ] && { sp; }
# disable
[ "$1" = "fds" ] && { fd; }
[ "$1" = "nds" ] && { nd; }
[ "$1" = "pds" ] && { pd; }
[ "$1" = "vds" ] && { vd; }
[ "$1" = "bds" ] && { bd; }
[ "$1" = "gds" ] && { gd; }
[ "$1" = "xds" ] && { xd; }
[ "$1" = "rds" ] && { rd; }
[ "$1" = "sds" ] && { sd; }

if [ -z "$1" ]; then
  c1="\nprimeira letra"
  c1="$c1\ne\t$ethg $ethb $ethv"
  c1="$c1\ng\t$ethg"
  c1="$c1\nb\t$ethb"
  c1="$c1\nv\t$ethv"
  c1="$c1\np\t$ethp"
  c1="$c1\nn\t$ethn"
  c1="$c1\nf\t$ethf"
  c1="$c1\nx\t$plex"
  c1="$c1\nr\t$trrt"
  c1="$c1\ns\t$dnsd"
  c1="$c1\n"
  c1="$c1\nsegunda letra"
  c1="$c1\na\tarranca"
  c1="$c1\naj\tarranca\t& journal"
  c1="$c1\ne\tenable"
  c1="$c1\nj\tjournal"
  c1="$c1\npr\tpara"
  c1="$c1\nds\tdisable"
  c1="$c1\npd\tpara\t& disable"
  c1="$c1\npa\tpara\t& arranca\t& journal"
  c1="$c1\nea\tenable\t& arranca\t& journal"
  c1="$c1\nk\tcheck"
  c1="$c1\nl\tlog"
  c1="$c1\n"
  c1="$c1\noutros"
  c1="$c1\nyj\tsystem journal"
  c1="$c1\nsl [s]\tlista system journal  s=TOTAL"
  c1="$c1\nel [s]\tlista geth,lighthouse s=TOTAL"
  c1="$c1\nll\tlista servicos"
  c1="$c1\nlp\tlista portas"
  c1="$c1\nnp\tnode peers"
#  c1="$c1\nnr\tnode record"
  c1="$c1\ngs\tgeth syncing"
  c1="$c1\nws\tfirewall status"
  c1="$c1\nwa\tfirewall arranca"
  c1="$c1\nwpr\tfirewall para"
  c1="$c1\ncr\tchange route"
#  c1="$c1\ncf\tchange forwarders"
#  c1="$c1\ncrf\tchange route & forwarders"
  c1="$c1\nsr\tshow route & DNS"
  c1="$c1\nrs\treset netplan\t& systemd-resolved"
  c1="$c1\nds\treset dns\t& systemd-resolved"
  c1="$c1\nrq\tdns query"
  echo -e "\n$c1\n"
fi

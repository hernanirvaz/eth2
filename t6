#!/bin/bash

source /home/eth/eth2/t1

# get synced geth chaindata to an unsynced geth 400GB
# rsync -hrtpe 'ssh -p 2020' --compress-level=9 --progress --stats 207.180.214.8:/home/eth/eth2 ./teste

# Plex Media Server & Transmission BitTorrent Daemon
function rxw { uu "ufw$2 allow from 192.168.8.0/24 $1"; }
function xop { uu 'ufw delete deny 32400             ';rxw 'to any port 32400 comment plex'; }
function xcl { uu 'ufw        deny 32400 comment plex';rxw 'to any port 32400 '   ' delete'; }
function xe { xop;uu 'ufw reload';uu "systemctl enable $plex"; }
function xa { [ "$(systemctl status $plex 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $plex"; } }
function xp { [ "$(systemctl status $plex 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $plex"; } }
function xd { uu "systemctl disable $plex";xcl;uu 'ufw reload'; }
function rop { uu 'ufw allow 51413 comment torrent';rxw 'to any port 9091 comment torrent'; }
function rcl { uu 'ufw deny  51413 comment torrent';rxw 'to any port 9091'       ' delete'; }
function re { rop;uu 'ufw reload';uu "systemctl enable $trrt"; }
function ra { [ "$(systemctl status $trrt 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $trrt"; } }
function rp { [ "$(systemctl status $trrt 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $trrt"; } }
function rd { uu "systemctl disable $trrt";rcl;uu 'ufw reload'; }

function gfw { if [ "$cust" = "hrv" ];then uu "ufw$2 allow from $zip2 $1";uu "ufw$2 allow from $zip3 $1";else uu "ufw$2 allow from $vip1 $1";uu "ufw$2 allow from $vip3 $1";fi; }
function gop { uu 'ufw allow 30303 comment eth1';uu 'ufw delete deny 8545              ';gfw 'to any port 8545 comment geapi'; }
function gcl { uu 'ufw deny  30303 comment eth1';uu 'ufw        deny 8545 comment geapi';gfw 'to any port 8545'     ' delete'; }
function bfw { if [ "$cust" = "hrv" ];then uu "ufw$2 allow from $zip3 $1";else uu "ufw$2 allow from $vip3 $1";fi; }
function bop { uu 'ufw allow 9000 comment eth2';uu 'ufw delete deny 5052              ';bfw 'to any port 5052 comment bnapi'; }
function bcl { uu 'ufw deny  9000 comment eth2';uu 'ufw        deny 5052 comment bnapi';bfw 'to any port 5052'     ' delete'; }
function vfw { if [ "$cust" = "hrv" ];then uu "ufw$2 allow from $zip1 $1";else uu "ufw$2 allow from $vip1 $1";fi; }
function vop { uu 'ufw delete deny 5064              ';vfw 'to any port 5064 comment vcmet'; }
function vcl { uu 'ufw        deny 5064 comment vcmet';vfw 'to any port 5064'     ' delete'; }
function fop { uu 'ufw allow 3000/tcp comment grafana'; }
function fcl { uu 'ufw deny  3000/tcp                '; }

function uu { echo -e "${i}$1${f}";echo $H|sudo -S $1 2>/dev/null; }
function ut { echo -e "${i}$1${f}";echo $H|sudo -S $1 2>/dev/null|tail -n $2; }
function jb { uu "journalctl --no-hostname --no-full -f $1"; }
function dr { uu "systemctl daemon-reload"; }

function ge { gop;uu 'ufw reload';uu "systemctl enable $ethg"; }
function be { bop;uu 'ufw reload';uu "systemctl enable $ethb"; }
function ve { [ ! -f $dtdi/vc_lock ] && { vop;uu 'ufw reload';uu "systemctl enable $ethv"; } }
function pe { uu 'ufw reload';uu "systemctl enable $ethp"; }
function ne { uu 'ufw reload';uu "systemctl enable $ethn"; }
function fe { fop;uu 'ufw reload';uu "systemctl enable $ethf"; }

function ga { [ "$(systemctl status $ethg 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethg"; } }
function ba { [ "$(systemctl status $ethb 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethb"; } }
function va { [ "$(systemctl status $ethv 2>/dev/null|grep -i 'inactive\|failed')" ] && [ ! -f $dtdi/vc_lock ] && { uu "systemctl start $ethv"; } }
function pa { [ "$(systemctl status $ethp 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethp"; } }
function na { [ "$(systemctl status $ethn 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethn"; } }
function fa { [ "$(systemctl status $ethf 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethf"; } }

function gp { [ "$(systemctl status $ethg 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethg"; } }
function bp { [ "$(systemctl status $ethb 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethb"; } }
function vp { [ "$(systemctl status $ethv 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethv"; } }
function pp { [ "$(systemctl status $ethp 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethp"; } }
function np { [ "$(systemctl status $ethn 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethn"; } }
function fp { [ "$(systemctl status $ethf 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethf"; } }

function gd { uu "systemctl disable $ethg";gcl;uu 'ufw reload'; }
function bd { uu "systemctl disable $ethb";bcl;uu 'ufw reload'; }
function vd { uu "systemctl disable $ethv";vcl;uu 'ufw reload'; }
function pd { [ "$(systemctl status $ethp 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethp"; } }
function nd { [ "$(systemctl status $ethn 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethn"; } }
function fd { [ "$(systemctl status $ethf 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethf";fcl;uu 'ufw reload'; } }

function g0 { g0=0;[ -d /var/lib/goethereum ] && g0=$(echo $H|sudo -S du -s /var/lib/goethereum 2>/dev/null|cut -f1); }
function g1 { g1=0;[ -d /var/lib/goethereum ] && g1=$(geth attach $geapi --exec eth.syncing); }
function g2 { g2=0;[ -d /var/lib/goethereum ] && g2=$(geth attach $geapi --exec net.peerCount); }
function gs {
  if [ -d /var/lib/goethereum ] && ([ "$cunm" = "$vnm1" ] || [ "$cunm" = "$znm1" ]); then
    if [ "$cunm" = "$znm1" ];then geapi="http://$zip1:8545";else geapi="http://$vip1:8545";fi
    g0
    g1
    g2
    if [ "$(echo $g1|grep -i false)" ]; then
      m="GETH SYNCING DONE - PEERCOUNT $g2"
    else
      if [ "$cunm" = "$znm1" ]; then
        r0=$(ssh vpsl "export H=$H;$p0/t6 g0")
      else
        r0=$g0
      fi
      h=$(echo $g1|sed -Ee 's%.*highestBlock: *([0-9]+).*%\1%i')
      c=$(echo $g1|sed -Ee 's%.*currentBlock: *([0-9]+).*%\1%i')
      k=$(echo $g1|sed -Ee 's%.*knownStates: *([0-9]+).*%\1%i')
      p=$(echo $g1|sed -Ee 's%.*pulledStates: *([0-9]+).*%\1%i')
      b=$(echo $H|sudo -S grep -i 'Imported new block headers' /var/log/syslog 2>/dev/null|head -1|cut -d= -f4|cut -d' ' -f1)
      d=$(echo $H|sudo -S grep -i 'Imported new block headers' /var/log/syslog 2>/dev/null|tail -1|cut -d= -f4|cut -d' ' -f1)
      i=$(echo $H|sudo -S grep -i 'Imported new state entries' /var/log/syslog 2>/dev/null|head -1|cut -d= -f4|cut -d' ' -f1)
      t=$(echo $H|sudo -S grep -i 'Imported new state entries' /var/log/syslog 2>/dev/null|tail -1|cut -d= -f4|cut -d' ' -f1)
      m="GETH SYNCING - PEERCOUNT: $g2\nBlocks api: $h ($((h-c)))\tStates api: $k ($((k-p)))\nBlocks log: $d ($((d-b)))\tStates log: $t ($((t-i)))\nFiles size: $(($r0/1000))M ($(((r0-g0)/1000))M)"
    fi
  else
    m="NO GETH HERE ($cunm)"
  fi
}

function cr {
  if [ "$cunm" = "$znm1" ] || [ "$cunm" = "$znm2" ] || [ "$cunm" = "$znm3" ]; then
    if [ "$(ip route show|grep 'default via'|cut -d' ' -f3)" = "192.168.8.1" ];then m=3; else m=1;fi
    h=''
    if [ "$cunm" != "$znm3" ]; then
      h='& DNS FORWARDER '
      sed -e "s%forwarders .*%forwarders { 192.168.8.$m; };%" /etc/bind/named.conf.options > ~/named.save
      echo $H|sudo -S mv ~/named.save /etc/bind/named.conf.options 2>/dev/null
      sudo chown root:root /etc/bind/named.conf.options 
      sudo chmod 644 /etc/bind/named.conf.options
    fi
    echo -e "${i}CHANGE ROUTE ${h}192.168.8.${m}${f}"
    sed -e "s%via:.*%via: 192.168.8.$m%" /etc/netplan/00-installer-config.yaml > ~/00-installer-config.save
    echo $H|sudo -S mv ~/00-installer-config.save /etc/netplan/00-installer-config.yaml 2>/dev/null
    sudo chown root:root /etc/netplan/00-installer-config.yaml 
    sudo chmod 644 /etc/netplan/00-installer-config.yaml 
    [ "$cunm" != "$znm3" ] && sudo systemctl stop named
    sudo systemctl stop systemd-resolved
    sudo netplan apply
    [ "$cunm" != "$znm3" ] && sudo systemctl start named
    sudo systemctl start systemd-resolved
  fi
}
function nn {
  if [ "$cunm" = "$znm1" ];then geapi="http://$zip1:8545";else geapi="http://$vip1:8545";fi;g2
  g3=$(echo $H|sudo -S grep -i peers: /var/log/syslog 2>/dev/null|tail -n 1|sed -e 's%,% %g;s%  *% %g'|cut -d' ' -f22)
  echo -e "${i}PEERS: GETH ${g2:-0}, BEACON ${g3:-0}${f}"
}
[ "$1" = "cr" ] && { cr; }
[ "$1" = "np" ] && { nn; }
[ "$1" = "nr" ] && { ut "grep -i record /var/log/syslog" "${2:-30}"; }

# lista servicos
[ "$1" = "ll" ] && { uu "systemctl list-units $pate $patp $patf"; }
# lista portas
[ "$1" = "lp" ] && { netstat -tulpn; }
# outros journal system/lighthouse
[ "$1" = "el" ] && { echo $H|sudo -S grep -i 'geth\|lighthouse'      /var/log/syslog 2>/dev/null|grep -v ' INFO '|sort -k 9; }
[ "$1" = "sl" ] && { echo $H|sudo -S grep -v 'geth\|lighthouse\|UFW' /var/log/syslog 2>/dev/null; }
[ "$1" = "rl" ] && { echo $H|sudo -S grep -v 'geth\|lighthouse\|UFW' /var/log/syslog 2>/dev/null|grep -i 'error'; }
[ "$1" = "bl" ] && { echo $H|sudo -S grep -i 'Successfully published block\|Block from API' /var/log/syslog 2>/dev/null; }
[ "$1" = "al" ] && { a=$(echo $H|sudo -S grep -i 'Successfully published attestation\|aggregated attestation' /var/log/syslog 2>/dev/null|wc -l);echo "attestations: ${a:-0}"; }
[ "$1" = "gs" ] && { gs;echo -e $m; }
[ "$1" = "g0" ] && { g0;echo -e $g0; }
[ "$1" = "ws" ] && { uu "ufw status numbered"; }
[ "$1" = "wa" ] && if [ "$(echo $H|sudo -S ufw status 2>/dev/null|grep -i inactive)" ];then echo -e "${i}ARRANCA FIREWALL${f}";sudo ufw enable; else echo -e "${i}FIREWALL JA ACTIVE${f}";fi
[ "$1" = "wpr" ] && { uu "ufw disable"; }

# journal
[ "$1" = "sj" ] && { jb; }
[ "$1" = "dj" ] && { jb '-u named'; }
[ "$1" = "tj" ] && { jb "-u $pate -u $patp -u $patf"; }
[ "$1" = "ej" ] && { jb "-u $pate"; }
[ "$1" = "mj" ] && { jb "-u $patp -u $patf"; }
[ "$1" = "gj" ] && { jb "-u $ethg"; }
[ "$1" = "bj" ] && { jb "-u $ethb"; }
[ "$1" = "vj" ] && { jb "-u $ethv"; }
[ "$1" = "pj" ] && { jb "-u $ethp"; }
[ "$1" = "nj" ] && { jb "-u $ethn"; }
[ "$1" = "fj" ] && { jb "-u $ethf"; }
[ "$1" = "xj" ] && { jb "-u $plex"; }
[ "$1" = "rj" ] && { jb "-u $trrt"; }
# arranca
[ "$1" = "ta" ] && { dr;ga;ba;va;pa;na;fa; }
[ "$1" = "ea" ] && { dr;ga;ba;va; }
[ "$1" = "ma" ] && { dr;pa;na;fa; }
[ "$1" = "ga" ] && { dr;ga; }
[ "$1" = "ba" ] && { dr;ba; }
[ "$1" = "va" ] && { dr;va; }
[ "$1" = "pa" ] && { dr;pa; }
[ "$1" = "na" ] && { dr;na; }
[ "$1" = "fa" ] && { dr;fa; }
[ "$1" = "xa" ] && { dr;xa; }
[ "$1" = "ra" ] && { dr;ra; }
# para & arranca & journal
[ "$1" = "gaj" ] && { dr;ga;jb "-u $ethg"; }
[ "$1" = "baj" ] && { dr;ba;jb "-u $ethb"; }
[ "$1" = "vaj" ] && { dr;va;jb "-u $ethv"; }
[ "$1" = "grs" ] && { gp;dr;ga;jb "-u $ethg"; }
[ "$1" = "brs" ] && { bp;dr;ba;jb "-u $ethb"; }
[ "$1" = "vrs" ] && { vp;dr;va;jb "-u $ethv"; }
# enable
[ "$1" = "te" ] && { ge;be;ve;pe;ne;fe; }
[ "$1" = "ee" ] && { ge;be;ve; }
[ "$1" = "me" ] && { pe;ne;fe; }
[ "$1" = "ge" ] && { ge; }
[ "$1" = "be" ] && { be; }
[ "$1" = "ve" ] && { ve; }
[ "$1" = "pe" ] && { pe; }
[ "$1" = "ne" ] && { ne; }
[ "$1" = "fe" ] && { fe; }
[ "$1" = "xe" ] && { xe; }
[ "$1" = "re" ] && { re; }
# para
[ "$1" = "tpr" ] && { fp;np;pp;vp;bp;gp; }
[ "$1" = "epr" ] && { vp;bp;gp; }
[ "$1" = "mpr" ] && { fp;np;pp; }
[ "$1" = "fpr" ] && { fp; }
[ "$1" = "npr" ] && { np; }
[ "$1" = "ppr" ] && { pp; }
[ "$1" = "vpr" ] && { vp; }
[ "$1" = "bpr" ] && { bp; }
[ "$1" = "gpr" ] && { gp; }
[ "$1" = "xpr" ] && { xp; }
[ "$1" = "rpr" ] && { rp; }
# disable
[ "$1" = "tds" ] && { fd;nd;pd;vd;bd;gd; }
[ "$1" = "eds" ] && { vd;bd;gd; }
[ "$1" = "mds" ] && { fd;nd;pd; }
[ "$1" = "fds" ] && { fd; }
[ "$1" = "nds" ] && { nd; }
[ "$1" = "pds" ] && { pd; }
[ "$1" = "vds" ] && { vd; }
[ "$1" = "bds" ] && { bd; }
[ "$1" = "gds" ] && { gd; }
[ "$1" = "xds" ] && { xd; }
[ "$1" = "rds" ] && { rd; }

if [ -z "$1" ]; then
  c1="\nprimeira letra"
  c1="$c1\nt\t$ethg $ethb $ethv $ethp $ethn $ethf"
  c1="$c1\ne\t$ethg $ethb $ethv"
  c1="$c1\nm\t$ethp $ethn $ethf"
  c1="$c1\ng\t$ethg"
  c1="$c1\nb\t$ethb"
  c1="$c1\nv\t$ethv"
  c1="$c1\np\t$ethp"
  c1="$c1\nn\t$ethn"
  c1="$c1\nf\t$ethf"
  c1="$c1\nx\t$plex"
  c1="$c1\nr\t$trrt"
  c1="$c1\n"
  c1="$c1\nsegunda letra"
  c1="$c1\na\tarranca"
  c1="$c1\naj\tarranca & journal"
  c1="$c1\ne\tenable"
  c1="$c1\nj\tjournal"
  c1="$c1\npr\tpara"
  c1="$c1\nds\tdisable"
  c1="$c1\nrs\tpara & arranca & journal - restart"
  c1="$c1\n"
  c1="$c1\noutros"
  c1="$c1\nsj\tsystem journal"
  c1="$c1\ndj\tdns journal"
  c1="$c1\nsl\tlista system journal TOTAL"
  c1="$c1\nrl\tlista system journal ERROR"
  c1="$c1\nel\tlista $ethg $ethb $ethv !INFO"
  c1="$c1\nbl\tlista block proposals"
  c1="$c1\nal\tlista attestations"
  c1="$c1\nll\tlista servicos"
  c1="$c1\nlp\tlista portas"
  c1="$c1\nnp\tnode peers"
  c1="$c1\nnr\tnode record"
  c1="$c1\ngs\tgeth syncing"
  c1="$c1\nws\tfirewall status"
  c1="$c1\nwa\tfirewall arranca"
  c1="$c1\nwpr\tfirewall para"
  c1="$c1\ncr\tchange route"
  echo -e "\n$c1\n"
fi

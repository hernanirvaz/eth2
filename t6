#!/bin/bash

source /home/eth/eth2/t1

function nu0 { printf ${2:-%i}   $1                                   2>$p03; }                                                                               # get numeric output
function nu1 { printf ${3:-%.0f} $(echo "scale=${2:-1};$1"|bc 2>$p03) 2>$p03; }                                                                               # get arbitrary precision calculations
function nu2 { local n=$1;local i=$2;shift;shift;if [[ $# -gt 0 ]];then nu1 "(0$(printf %+.${n}f $@ 2>$p03))/$#" $((n+1)) %.${i}f;else printf %i;fi; }        # get average list numbers
function nu3 { nu1 "($1*$pmis+$2*$pmat+$3*$pmah+$4*$pdly)/${5:-1}*$rate/1000000" 7; }                                                                         # get penalty
function nu4 { nu1 "($1*$ratt+$2*$rblk)*$rate/100000000"                         7; }                                                                         # get reward
function rl0 { local f=$p16/logs/beacon.log   ;echo $H|sudo -S grep -h $r44                               $f.1 $f 2>$p03|grep -v None; }                      # get cc intern lines (specific)
function rl1 { local f=$p16/logs/beacon.log   ;echo $H|sudo -S cat                    $f.5 $f.4 $f.3 $f.2 $f.1 $f 2>$p03             ; }                      # get cc intern lines
function rl2 { local f=$p17/logs/validator.log;echo $H|sudo -S cat                    $f.5 $f.4 $f.3 $f.2 $f.1 $f 2>$p03             ; }                      # get vc intern lines
function rl3 { local f=$p01                   ;echo $H|sudo -S grep -h $r34 $f.7 $f.6 $f.5 $f.4 $f.3 $f.2 $f.1 $f 2>$p03             ; }                      # get all eth syslog lines
function rl4 { local f=$p01                   ;echo $H|sudo -S grep -h $r35                               $f.1 $f 2>$p03             ; }                      # get all eth syslog lines
function lg0 { sed -n "s%$1 *\([0-9]*\).*%\1%p" $2 2>$p03; }                                                                                                  # get list of numbers
function lg1 { if [[ $l4 ]];then echo "$l4"|sed -n "$1$r36;$1$r37";else printf %i 1;fi; }                                                                     # get s/ms delays from log lines
function lg2 { if [[ $l4 ]];then echo "$l4"|sed -n "$1$r38;$1$r39";else printf %i 1;fi; }                                                                     # get s/ms delays from log lines
function lg3 { if [[ $1 -gt 0 ]];then l4=$(rl0|tail -n$1);else l4=$(rl0);fi;b1=$(nu2 3 0 $(lg1 "$r45"));b5=$(nu2 3 0 $(lg1 "$r46")); }                        # set imported/observed delays
function fs0 { pex "grep    ${2:-$r32}.*$1 $p01"; }                                                                                                           # get specific syslog lines
function fs1 { pex "grep    ${1:-$r34}     $p01"; }                                                                                                           # get eth      syslog lines
function fs2 { pex "grep -v ${1:-$r34}     $p01"; }                                                                                                           # get sys      syslog lines
function fs3 { fs0 $1 $2|lg0 .*$1 ; }                                                                                                                         # get peers    syslog lines
function fs4 { fs0 $1   |tail -n$2; }                                                                                                                         # get specific syslog lines
function fs5 { fs2      |tail -n300|grep Core.*temperature; }                                                                                                 # get tail cpu syslog lines
function fs6 { if [[ $1 ]];then grep -i "[a-z][a-z][a-z]  *[0-9]* $1";else grep -i  'error'    ;fi; }                                                         # filter system    log lines
function fs7 { if [[ $1 ]];then grep -i "[a-z][a-z][a-z]  *[0-9]* $1";else grep -iv '[ =]INFO ';fi; }                                                         # filter el/cl/mev log lines
function pt0 { until [[ $# -le 1 || $1 =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]];do shift;done;printf %s $1; }                                                       # yyyy-mm-dd test
function pt1 { until [[ $# -le 1 || $1 =~ ^[0-9]{2}:[0-9]{2}$          ]];do shift;done;printf %s $1; }                                                       # hh:mm      test
function pt2 { until [[ $# -le 1 || $1 =~ ^[0-9]+$                     ]];do shift;done;printf %i $1; }                                                       # integer    test
function pt3 { until [[ $# -le 1 || $1 =~ ^[a-z]+$                     ]];do shift;done;printf %s $1; }                                                       # string     test
function jsh { cex "journalctl --no-hostname --no-full -f $1"; }                                                                                              # my journal   format
function spc { nn=$2;cp $p04/$1.service $p02/$1.sav;sed "s%peers\([ =]*\)[0-9]*%peers\1$2%" $p02/$1.sav > $p04/$1.service; }                                  # service configuration change
function snp { local n=$(($2+nn));(($2!=0&&n>=$3&&n<=$4)) && spc $1 $n;sex "$s02 $1";sex "$s00 daemon-reload"; }                                              # service peers change/stop/reload
function srt { [[ -f $p45 ]]; }                                                                                                                               # system needs reboot test
function sra { if srt;then nu0 $(($(date +%s)-$(date -r $p45 +%s)));else printf %i;fi }                                                                       # system reboot age (secounds)
function sot { [[ $(sra) -ge $((60*60*${1:-24})) ]]; }                                                                                                        # 24 hours old system reboot test
function stt { [[ $d1 =~ 23:5[89] ]]; }                                                                                                                       # time test
function sci { nu0 $(ip a|sed -n 's% *inet  *192.168.8.\([0-9]*\).*%\1%p' 2>$p03); }                                                                          # get ip/24
function sni { case $1 in 25) printf $znm1;;28) printf $znm2;;31) printf $znm3;;34) printf $znm4;;*) printf $cunm;;esac; }                                    # get name from ip/24
function sst { $s01 $1 2>$p03|grep "${2:-inactive\|failed}" 2>$p03; }                                                                                         # systemctl status word test
function ss1 { $s01 $1 2>$p03|sed -n "s%.*$2[ =]\(${3:-.}*\).*%\1%p" 2>$p03; }                                                                                # systemctl status 1 extraction
function ss2 { $s01 $1 2>$p03|sed -n "s%.*Active: *\(.*\)%\1%p" 2>$p03|sed "s% *since.*;%%" 2>$p03|cut -c1-40; }                                              # systemctl status 2 extraction
function dmr { sex "$s00 daemon-reload"; }                                                                                                                    # daemon-reload
function dts { read       d0 d1   <<< ${1:-$(date '+%F %H:%M')};dt="$d0 $d1"; }                                                                               # set date/time vars
function dtl { read _ _ _ d0 d1 _ <<< $(bff|tail -n1)          ;dt="$d0 $d1"; }                                                                               # set date/time vars with last beacon log
function dnn { printf '%10s %5s node%02i: %2i' $dt $nn $nr 2>$p03; }                                                                                          # get date/nodes info
function tsy { if [[ $(echo $@|grep false) ]];then printf SYC;else printf NSY;fi; }                                                                           # get el SYN/NSY text
function els { lg0 .*sgs: $1|tail -n1; }                                                                                                                      # get el last segment
function era { tail -n${2:-$ehrs} $1 2>$p03|cut -d' ' -f1|sort -u|wc -l; }                                                                                    # get el/cc restart activity
function eh0 { [[ -f $1 ]] || return;tail -n${2:-$ehrs} $1 2>$p03; }                                                                                          # el historic report
function eb0 { e0=$(fs0 Imported $2|wc -l);ok=OK;[[ $(echo $@|grep false) && ($e0 -eq $(els $1) || $nr -lt $(eb1)) && $(era $1) -eq 1 ]] && ok=BK; }          # Imported new chain segment & OK/BK
function eb1 { nu0 $(((nn*100-nn*30)/100)); }                                                                                                                 # get current peers-30%
function ero { [[ -f $2 ]] || return;dts;swn "$(nu0 $1 R%03i) ${3:-RS} SRV $(dnn)" >> $2; }                                                                   # log restart info
function sng { $p02/eth2/t7 2>$p03; }                                                                                                                         # get next gap without validator tasks
function stg { printf %s $(date -d@${1:-0} +%M:%S|tr -d :)t$(date -d@$(($(date +%s)+${1:-0})) +%H:%M:%S|tr -d :); }                                           # get end file sleep tag
function sf1 { printf %s ${1:-$(date +%H:%M:%S)}; }                                                                                                           # get filterd t7 parm 1
function sf2 { printf %i ${2:-24}; }                                                                                                                          # get filterd t7 parm 2
function smn { local g=${1:-24}                  ;nu0 $((g>360?360:g<24?24:g)); }                                                                             # get max/min seconds to future (12x30/24)
function sfn { local g=$(($(bss $1)-$(date +%s)));nu0 $((g>3?g:3))            ; }                                                                             # get min seconds to future
function spt { [[ $(date +%s) -ge $(bss $1 6) ]]; }                                                                                                           # ideal position test (based on time)
function ssf { [[ $1 -gt 0 ]] || return;local f=$2.s$(stg $1);touch $f;sleep $1s;rm -f $f; }                                                                  # sleep with file info
function ssw { while :;do local t=$(sng);if [[ $(sf2 $t) -le ${1:-36} || 24 -ge $(sfn $t) ]];then ssf $(smn $(sfn $t)) $2;else break;fi;done; }               # sleep while small (gap or remaining) time
function bnn {
  if [[ $# -gt 0 ]];then
    nr=${@:$#};nm=$(printf '%i\n' $@|sort -n|head -n1 2>$p03);nd=$(nu1 "sqrt(((0$(printf '+%i^2' $@ 2>$p03))-(0$(printf '+%i' $@ 2>$p03))^2/$#)/$#)*1000" 4)  # set cur/min/std peers vars
  else
    nr=0      ;nm=0                                          ;nd=0
  fi
}
function sso {
  [[ $(sst $2 disabled) || ! $(sst $2 $2) ]] && return;dts;local e="$1 $(printf '%6s %10s %5s status: %-40s' $(ss1 $2 Memory:) $dt "$(ss2 $2)")"              # memory & status
  [[ $1 = GETH ]] && bnn $(fs3 peercount= $r30) $(nu0 $(gcl net.peerCount))                                                                                   # set min peers
  [[ $1 = GETH ]] && e="$e $(printf 'el:p%02i:m%02i p2p:%5i' $nr $nm $(ss1 $2 port     [0-9]) 2>$p03)$(gb1 synced $(gcl eth.syncing)) i2:$(gdi 0)"            # el peers/port tag
  [[ $1 = BESU ]] && bnn $(fs3 Peers:     $r31) $(up0 $(ucl net_peerCount))                                                                                   # set min peers
  [[ $1 = BESU ]] && e="$e $(printf 'el:p%02i:m%02i p2p:%5i' $nr $nm $(ss1 $2 p2p-port [0-9]) 2>$p03)$(ub1 synced $(ucl eth_syncing)) i2:$(udi 0)"            # el peers/port tag
  [[ $1 = BEAC ]] && bnn $(fs3 peers:         ) $(bpc $(bcl peer_count   ))                                                                                   # set min peers
  [[ $1 = BEAC ]] && e="$e $(printf 'cl:p%02i:m%02i p2p:%5i' $nr $nm $(ss1 $2 port     [0-9]) 2>$p03)$(bb1 $(bcl syncing))"                                   # cl peers/port tag
  [[ $1 = BEAC ]] && e="$e el:http $(ss1 $2 execution-endpoint '[^ ]'|sed -n $r24)"                                                                           # el http
  [[ $1 = VALI ]] && { dtl;bo5;e="$e $(printf 'vl:c%02i:m%02i' $b2 $b3 2>$p03) cc:http $(ss1 $2 nodes '[^ ]'|sed -n $r24)"; };swn "$e"                        # set homologous/avg & cl http
}
# el control commands
function grs {                                                                                                                                                # el gap restart
  [[ $(ls $p40.* 2>$p03) ]] && return;local n=${3:-36};[[ $2 = RB ]] && n=84;ssw $n $p40
  local t=$(sng);local f=$p40.i$(stg);touch $f;local n=0;paf;while [[ -f $f ]];do ((n+=$(sfn $t)));ssf $(sfn $t) $p40
  if spt $t;then rm $f;gv0;[[ $2 = RB ]] && gq0;snp $s10 $1 10 50                                                                                             # change peers/stop el
    if [[ $2 = RB ]];then ero $n $p10 $2;sex reboot;else sex "$s03 $s10";ssf 40 $p40;gq0;ero $n $p10 $2;fi                                                    # reboot/start el
  fi;done;rm -f $f
}
function gdi { if [[ $1 -gt 0 ]];then l4=$(rl4|tail -n$1);else l4=$(rl4);fi;nu2 3 0 $(lg2 "$r42"); }                                                          # get delay imported
function gcl { $p07/geth attach --exec $1 "http://$ciec:8545"               2>$p03 ; }                                                                        # exec RPC HTTP
function gi0 { nu0 $(echo $@|sed -n 's%.*highestBlock: *\([0-9]*\).*%\1%ip' 2>$p03); }                                                                        # get el highest block
function gc0 { nu0 $(echo $@|sed -n 's%.*currentBlock: *\([0-9]*\).*%\1%ip' 2>$p03); }                                                                        # get el current block
function gv0 { nn=$(nu0 $(ss1 $s10 maxpeers [0-9])); }                                                                                                        # set configured peers
function gq0 { nr=$(nu0 $(gcl net.peerCount      )); }                                                                                                        # set el current peers
function gb1 { if [[ $(echo $@|grep false) ]];then [[ $1 ]] && printf " $1";else printf ' syncing: %6i' $(($(gi0 $@)-$(gc0 $@)));fi; }                        # get el syncing blocks remaining
function gl0 {                                                                                                                                                # el report
  dts;ok=OK
  if [[ $(sst $s10 running) ]];then local e=$(gcl eth.syncing);gv0;gq0;eb0 $p10 $r30 $e
    m="GETH $ok $(tsy $e) $(dnn) sgs: $(nu0 $e0 %4i)$(gb1 '' $e) i2: $(gdi 99)"                                                                               # OK SYC/NSY (dnn) sgs: 5 blocks: 8
  else
    m="GSRV NOT ON $dt"
  fi
}
function urs {                                                                                                                                                # el gap restart
  [[ $(ls $p41.* 2>$p03) ]] && return;local n=${3:-36};[[ $2 = RB ]] && n=84;ssw $n $p41
  local t=$(sng);local f=$p41.i$(stg);touch $f;local n=0;paf;while [[ -f $f ]];do ((n+=$(sfn $t)));ssf $(sfn $t) $p41
  if spt $t;then rm $f;uv0;[[ $2 = RB ]] && uq0;snp $s11 $1 10 50                                                                                             # change peers/stop el
    if [[ $2 = RB ]];then ero $n $p11 $2;sex reboot;else sex "$s03 $s11";ssf 40 $p41;uq0;ero $n $p11 $2;fi                                                    # reboot/start el
  fi;done;rm -f $f
}
function udi { if [[ $1 -gt 0 ]];then l4=$(rl4|tail -n$1);else l4=$(rl4);fi;nu2 3 0 $(lg2 "$r43"); }                                                          # get delay imported
function ucl { curl -sX POST --data "{\"jsonrpc\":\"2.0\",\"method\":\"$1\",\"params\":[],\"id\":51}" "http://$ciec:8545" 2>$p03; }                           # exec RPC HTTP
function ui0 { nu0 $((16#$(nu0 $(echo $@|sed -n 's%.*highestBlock" *: *"0x\([^"]*\)".*%\1%ip' 2>$p03)))); }                                                   # get el highest block
function uc0 { nu0 $((16#$(nu0 $(echo $@|sed -n 's%.*currentBlock" *: *"0x\([^"]*\)".*%\1%ip' 2>$p03)))); }                                                   # get el current block
function up0 { nu0 $((16#$(nu0 $(echo $@|sed -n 's%.*result" *: *"0x\([^"]*\)".*%\1%ip'       2>$p03)))); }                                                   # get el result
function uv0 { nn=$(nu0 $(ss1 $s11 max-peers [0-9])); }                                                                                                       # set configured peers
function uq0 { nr=$(up0 $(ucl net_peerCount       )); }                                                                                                       # set el current peers
function ub1 { if [[ $(echo $@|grep false) ]];then [[ $1 ]] && printf " $1";else printf ' syncing: %6i' $(($(ui0 $@)-$(uc0 $@)));fi; }                        # get el syncing blocks remaining
function ul0 {                                                                                                                                                # el report
  dts;ok=OK
  if [[ $(sst $s11 running) ]];then local e=$(ucl eth_syncing);uv0;uq0;eb0 $p11 $r31 $e
    m="BESU $ok $(tsy $e) $(dnn) sgs: $(nu0 $e0 %4i)$(ub1 '' $e) i2: $(udi 99)"                                                                               # OK SYC/NSY (dnn) sgs: 5 blocks: 8
  else
    m="BSRV NOT ON $dt"
  fi
}
# cc control commands
function bcl { curl -sX GET "http://$cicc:5052/eth/v1/node/$1" -H "accept: application/json" 2>$p03; }                                                        # exec RPC HTTP
function bsd { nu0 $(echo $@|sed -n 's%.*"sync_distance" *: *"\([^"]*\)".*%\1%ip' 2>$p03); }                                                                  # get cl syncing distance
function bpc { nu0 $(echo $@|sed -n 's%.*"connected" *: *"\([^"]*\)".*%\1%ip'     2>$p03); }                                                                  # get cl peers connected
function bz0 { nu0 $((10*(5*zk+2*zz+zx+zw)))                                             ; }                                                                  # get numerator paid errors
function bw0 { nu0 $((10*z1))                                                            ; }                                                                  # get numerator processed blocks
function bf0 { nu0 $((90*z3))                                                            ; }                                                                  # get numerator general errors
function bi0 { nu0 $((nd+zk*300+zz*20+zx))                                               ; }                                                                  # get delete day idx
function bu0 { nu0 $(((z5>400?$(bz0)/z5:0)+(z2>300?$(bw0)/z2:0)+(z4>999?$(bf0)/z4:0)))   ; }                                                                  # get restart idx
function bv0 { nn=$(nu0 $(ss1 $s12 target-peers [0-9])); }                                                                                                    # get configured peers
function bs0 { l0=$(fs4 $bpid] 3600); }                                                                                                                       # set last cc log lines
function bs5 { l5=$(fs0 attestation.s); }                                                                                                                     # set attesta log lines
function bb0 { bs0;bs5;bl1;bl2;[[ (1 -eq $(era $p12 $chrs) && $(bu0) -ge 1) || (1 -eq $(era $p12 5) && $(bu0) -ge 5) ]] && ok=BK; }                           # set ok (OK/BK)
function bbl { cat $p12 2>$p03|wc -l; }                                                                                                                       # get cc       line count
function bml { cat $p13 2>$p03|wc -l; }                                                                                                                       # get cc-daily line count
function bfl { grep "BEAC.*$1"      2>$p03; }                                                                                                                 # filter cc lines
function bff { grep "BEAC.*$1" $p12 2>$p03; }                                                                                                                 # filter cc log
function bb1 { if [[ $(echo $@|grep is_syncing\":false) ]];then printf ' synced';else printf ' syncing: %6i' $(bsd $@);fi; }                                  # get cl syncing distance remaining
function bl0 { dts;ok=OK;if [[ $(sst $s12 running) ]];then bl3;bv0;bnn $(fs3 peers:) $(bpc $(bcl peer_count));bb0;blo;else m="BSRV NOT ON $dt";fi; }          # cc report
function bl1 {                                                                                                                                                # set restart idx vars
  z1=${1:-$(echo "$l0"|grep 'RPC block'|wc -l)};z2=${2:-$(echo "$l0"|grep 'New block'|wc -l)};z3=${3:-$(echo "$l0"|grep -v ' INFO ' |wc -l)}                  # set processed/received blocks,error lines
  z4=${4:-$(echo "$l0"|grep ' INFO '   |wc -l)};z5=${5:-$(bl4 success)};zw=${6:-$(bl4 had)};ok=${7:-OK}                                                       # set info lines,success/had activities
}
function bl2 { zk=${1:-$(bl4 missing)};zz=${2:-$(bl4 target)};zx=${3:-$(bl4 head)}; }                                                                         # set missing/target/head activities
function bl3 { b0=${1:-$(fs0 Valid.block|wc -l)};if [[ $2$3 ]];then b1=$2;b5=$3;else lg3 2;fi; }                                                              # set pub-blocks & imported/observed delays
function bl4 { echo "$l5"|sed -n "s%.*$1.*validators: *\[\(.*\)\].*%\1%p"|wc -w; }                                                                            # get number of paid activities
function bii { printf '%4i %4i %4i' $b1 $b5 $(((4*b1+b5)/5)) 2>$p03; }                                                                                        # shw imported/observed data
#    0  1   2          3     4       5  6   7    8    9  10   11  12 13  14 15 16  17 18 19   20  21 22   23   24  25   26   27   28
# BEAC OK   0 2022-11-21 23:46 node50: 55 rp: 3728 2630 ab: 4906 1350 0 er:  0 10 103 12  0  547   0  3 3597  270 io:  370 4336 1163
function blo {
  m="BEAC $ok $(nu0 $(bu0) %3i) $(dnn) $(printf 'rp: %4.0f %4.0f ab: %4i %4i %1i' $(nu4 $z5 $b0) $(nu3 $zk $zz $zx $zw) $z5 $(bz0) $b0 2>$p03)"
  m="$m $(printf 'er: %2i %2i %3i %2i %2i %4i %3i %2i %4i %4i' $zk $zz $zx $zw $z1 $z2 $(bw0) $z3 $z4 $(bf0) 2>$p03) io: $(bii)"
}
function bio { lg3 $1;dts;m="BEIO $(nu0 $1 %6i) $dt io: $(bii)"; }                                                                                            # shw imported/observed delays
function bcc { if bct       ;then printf c;else printf _;fi; }                                                                                                # get change configured peers char
function bdc { if bht && bst;then printf d;else printf _;fi; }                                                                                                # get delete cc log day       char
function bmi { zk=0;zz=0;zx=0;unset v;v[1]=0;unset k;k[0]=0;unset z;z[0]=0;unset x;x[0]=0;unset w;w[0]=0;unset c;c[0]=0;unset a;a[0]=0;bm6; }                 # ini err/cnt/avg penalty arrays
function bm0 {                                                                                                                                                # cc-daily report
  [[ -f $p12 ]] || return;bmi;b4=0;dts;bv0;bnn $(fs3 peers:);bs5;bl2;[[ -f $p14 ]] && bm4;lg3 0                                                               # set vars/arrays
  l3=$(tail -n$(($(bbl)-v[1])) $p12 2>$p03|bfl);[[ $l3 ]] && bm1;bm2;bo4;bm5 ${a[$nn]};b7="peers$(bdc)$(bcc)io:"                                              # add cc lines & homologous/avg position
}
function bm1 {
  local g=${1:-$bpri};l1=$(echo "$l3"|sed -nEe "s%.+node$g:.+er: +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+).+%\1\t\2\t\3\t\4%p" 2>$p03)                          # set paid errors for current array
  [[ $l1 ]] && { bkm $g;bzm $g;bxm $g;bwm $g;bcm $g; };((g<bprf)) && bm1 $((g+bprs))                                                                          # recursively sum paid err arrays
}
function bm2 { k[0]=$(($(bnk)));z[0]=$(($(bnz)));x[0]=$(($(bnx)));w[0]=$(($(bnw)));c[0]=$(($(bnc)));a[0]=$(bm3 0);bm7; }                                      # tot err/cnt/penalty arrays
function bm3 { nu3 ${k[$1]} ${z[$1]} ${x[$1]} ${w[$1]} ${c[$1]} ; }                                                                                           # get penalty from paid err arrays
function bm4 { read -a v <<< $(tail -n1 $p14);bmk;bmz;bmx;bmw;bmc; }                                                                                          # set err/cnt penalty arrays from barqivo
function bm5 { local g=${2:-$bpri};local n=$1;if ((a[g]<n));then b4=$((g-nn));n=${a[$g]};fi;((g<bprf)) && bm5 $n $((g+bprs)); }                               # set recursively peer change <- min penalties
function bm6 { local g=${1:-$bpri};k[$g]=0;z[$g]=0;x[$g]=0;w[$g]=0;c[$g]=0;a[$g]=0         ;((g<bprf)) && bm6    $((g+bprs)); }                               # ini recursively penalty arrays
function bm7 { local g=${1:-$bpri};a[$g]=$(bm3 $g)                                         ;((g<bprf)) && bm7    $((g+bprs)); }                               # avg recursively penalty arrays
function bcm { local g=${1:-$bpri};((c[g]+=$(echo "$l1"|wc -l 2>$p03)                        )); }                                                            # sum               cnt array
function bkm { local g=${1:-$bpri};((k[g]+=$((0$(printf '+%i' $(echo "$l1"|cut -f1) 2>$p03))))); }                                                            # sum missing       err array
function bzm { local g=${1:-$bpri};((z[g]+=$((0$(printf '+%i' $(echo "$l1"|cut -f2) 2>$p03))))); }                                                            # sum failed target err array
function bxm { local g=${1:-$bpri};((x[g]+=$((0$(printf '+%i' $(echo "$l1"|cut -f3) 2>$p03))))); }                                                            # sum failed head   err array
function bwm { local g=${1:-$bpri};((w[g]+=$((0$(printf '+%i' $(echo "$l1"|cut -f4) 2>$p03))))); }                                                            # sum delay         err array
function bmc { local g=${1:-$bpri};local n=${2:-5 };c[$g]=${v[$n]};((g<bprf)) && bmc $((g+bprs)) $((n+1)); }                                                  # set recursively               cnt array
function bmk { local g=${1:-$bpri};local n=${2:-13};k[$g]=${v[$n]};((g<bprf)) && bmk $((g+bprs)) $((n+1)); }                                                  # set recursively missing       err array
function bmz { local g=${1:-$bpri};local n=${2:-21};z[$g]=${v[$n]};((g<bprf)) && bmz $((g+bprs)) $((n+1)); }                                                  # set recursively failed target err array
function bmx { local g=${1:-$bpri};local n=${2:-29};x[$g]=${v[$n]};((g<bprf)) && bmx $((g+bprs)) $((n+1)); }                                                  # set recursively failed head   err array
function bmw { local g=${1:-$bpri};local n=${2:-37};w[$g]=${v[$n]};((g<bprf)) && bmw $((g+bprs)) $((n+1)); }                                                  # set recursively delay         err array
function bma { local g=${2:-$bpri};if ((g<=bprf));then bma "$1 $(nu0 ${a[$g]} %4i)"      $((g+bprs));else printf "$1";fi; }                                   # sum recursively penalty       avg array
function bnc { local g=${3:-$bpri};if ((g<=bprf));then bnc "${1:-0}${2:-+}${c[$g]}" "$2" $((g+bprs));else printf "$1";fi; }                                   # sum recursively               cnt array
function bnk { local g=${3:-$bpri};if ((g<=bprf));then bnk "${1:-0}${2:-+}${k[$g]}" "$2" $((g+bprs));else printf "$1";fi; }                                   # sum recursively missing       err array
function bnz { local g=${3:-$bpri};if ((g<=bprf));then bnz "${1:-0}${2:-+}${z[$g]}" "$2" $((g+bprs));else printf "$1";fi; }                                   # sum recursively failed target err array
function bnx { local g=${3:-$bpri};if ((g<=bprf));then bnx "${1:-0}${2:-+}${x[$g]}" "$2" $((g+bprs));else printf "$1";fi; }                                   # sum recursively failed head   err array
function bnw { local g=${3:-$bpri};if ((g<=bprf));then bnw "${1:-0}${2:-+}${w[$g]}" "$2" $((g+bprs));else printf "$1";fi; }                                   # sum recursively delay         err array
function bm8 { m="$m $b7 $(printf '%4i %3i' $(bi0) $b4 2>$p03) $(bii)"; }
#  0    1   2          3     4       5  6   7    8    9   10   11   12   13   14          15   16         17   18  19   20   21   22
# BM    2   2 2022-11-21 23:46 node50: 55 mp:    0    0    0 1101    0    0    0 all_median: 1101 peers__io:  706 -30  470 5015 1379
function bmo { m="BM $(printf '%4i %3i' $b2 $b3 2>$p03) $(dnn) $(bma 'mp:') all_median: $(nu0 ${a[0]} %4i)";bm8; }
#  0    1   2          3     4       5  6        7    8    9   10         11   12  13   14   15   16
# BM    2   2 2022-11-21 23:49 node50: 55 penalty: 1101 avg: 1101 peers__io:  707 -30  470 5015 1379
function bms { m="BM $(printf '%4i %3i' $b2 $b3 2>$p03) $(dnn) $(printf 'penalty: %4i avg: %4i' ${a[$nn]} ${a[0]} 2>$p03)";bm8; }
#    0   1          2     3    4 5 6 7 8 9 10 11   12 13 14 15 16 17 18 19   20 21 22 23 24 25 26 27   28 29 30 31 32 33 34 35   36 37 38 39 40 41 42 43
# BEAC 682 2022-03-16 11:03 cnt: 4 7 0 0 0 10 10 mis: 20 20 20 20 20 20 20 mat: 14 45 30 30 30 30 30 mah: 94 68 40 40 40 40 40 dly: 79 09 50 50 50 50 50
function bno { m="BEAC $(nu0 $(bbl) %6i) $dt $(bnc 'cnt:' ' ') $(bnk 'mis:' ' ') $(bnz 'mat:' ' ') $(bnx 'mah:' ' ') $(bnw 'dly:' ' ')"; }
function boi {
  unset v;read -a v <<< $(bff|tail -n1);local n=0;local t=${1:-00:00};[[ $t = 00:00 ]] && t=${v[4]};b6=0;l2=$(bff $t)                                         # set homologous lines
  while [[ $b2 -eq 0 && $n -lt 500 ]];do bo2 ${v[3]};((n+=1));v[3]=$(date -d "$n days ago $t" +%F);done                                                       # set homologous position
}
function bo0 { [[ -f $p12 ]] || return;boi $(pt1 $@ 00:00);if [[ $(pt3 $@ s) = n ]];then b6=$b2;else b6=$(pt2 $@ 0);fi;bo6; }                                 # homologous report
function bo1 { echo "$l2"|sort -k10n -k4r; }                                                                                                                  # get homologous cc lines sorted
function bo2 { b2=$(bo1|grep -n ${1:-$(date '+%F')}|cut -d: -f1);b2=${b2:-0}; }                                                                               # set homologous position
function bo3 { b3=$(nu2 0 0 $b2 $(lg0 BM $p13)); }                                                                                                            # set homologous avg
function bo4 { [[ $b2 -eq 0 && -f $p12 ]] && boi;bo3; }                                                                                                       # set homologous position/avg
function bo5 { l2=$(bff $d1);bo2 $d0;bo3; }                                                                                                                   # set homologous position/avg
function bo6 { bo1|head -n$((b6>b2?b6:b2<5?5:b2))|tail -n$((b6>0?b6:b2>chrs?chrs:b2<5?5:b2)); }                                                               # homologous report
function bo7 { bo1|grep $(printf node%02i: $1 2>$p03); }                                                                                                      # get homologous node lines sorted
function bon { [[ -f $p12 ]] || return;bv0;nn=$(pt2 $1 $nn);l2=$(bff 23:58);bo7 $nn; }                                                                        # homologous nodes report
function boa { local g=${1:-$bpri};printf 'BO%5i %3i\n' $(bo7 $g|wc -l) $g 2>$p03;bo7 $g;((g<bprf)) && boa $((g+bprs)); }                                     # recursively show homologous nodes report
function bh0 {
  [[ -f $p12 ]] || return;tail -n${1:-$chrs} $p12;[[ $1 ]] && return                                                                                          # current    cc report
  boi;swn "BO $(printf '%4i %3i%34s%29s' $b2 $(echo "$l2"|wc -l) 2>$p03)x5 x2  x1 x1";bo6                                                                     # homologous cc report
  bl0;swn "BL $(printf '%8i%34s%29s%13s'     $(bbl)              2>$p03)rb   nb c10 er   if  c90\n$m";bm0                                                     # last       cc report
  bmo;swn "BM $(printf '%8i%34s'             $(bml)              2>$p03)i20  i30  i40  i50  i60  i70  i80\n$m"                                                # last cc-daillast y
}
function btr { if srt;then printf RB;else printf $1;fi; }                                                                                                     # get tag reboot
function bss { nu0 $((${2:-0}+$(date -d$(sf1 $1) +%s))); }                                                                                                    # get sum secounds + time
function bsc { fs4 $bpid].*INFO 99|grep Sync\ committee|wc -l; }                                                                                              # get # committee messages
function bro {
  [[ -f $p12 ]] || return;dts;bb0;bnn $(fs3 peers:) $(bpc $(bcl peer_count));swn "$(printf 'R%03i %2s %3i' $1 ${2:-$ok} $(bu0) 2>$p03) $(dnn)" >> $p12        # log restart info
}
# slots = secounds 12,24,36,48,60,72,84,96,108,120,132,144,156,168
function brs {                                                                                                                                                # cc/vc gap restart
  [[ $(ls $p42.* 2>$p03) || $(bsc) -gt 0 ]] && return;ssf ${3:-0} $p42;local n=${4:-60};[[ $2 = VC ]] && n=72;[[ $2 = RB ]] && n=84
  ssw $n $p42;local t=$(sng);local f=$p42.i$(stg);touch $f;local n=0;paf;while [[ -f $f ]];do ((n+=$(sfn $t)));ssf $(sfn $t) $p42
  if spt $t;then rm $f;bv0;snp $s12 $1 $bpri $bprf                         ;[[ $2 = VC ]] && sex "$s02 $s13"                                                  # stop cc/conf change?/stop vc?
    if [[ $2 = RB ]];then bro $n $2;gps;ups;sex reboot;else sex "$s03 $s12";[[ $2 = VC ]] && sex "$s03 $s13";ssf 40 $p42;bro $n $2;fi                         # stop ec/reboot|start cc+vc
  fi;done;rm -f $f
}
function bsb {                                                                                                                                                # cc/vc gap stop
  [[ $(ls $p42.* 2>$p03) || $(bsc) -gt 0 ]] && return;ssf ${3:-0} $p42;local n=${4:-60};[[ $2 = VC ]] && n=72
  ssw $n $p42;local t=$(sng);local f=$p42.i$(stg);touch $f;local n=0;paf;while [[ -f $f ]];do ((n+=$(sfn $t)));ssf $(sfn $t) $p42
  if spt $t;then       bv0;snp $s12 $1 $bpri $bprf                         ;[[ $2 = VC ]] && sex "$s02 $s13";local rsp=sim;swn "START BN $rsp?"               # stop cc/vc/conf change
    [[ $rsp =~ na*o* ]] || sex "$s03 $s12";if [[ $2 = VC ]];then swn "START VC $rsp?";[[ $rsp =~ na*o* ]] || sex "$s03 $s13";fi                               # start cc+vc
    rm $f;ssf 40 $p42;bro $n $2
  fi;done;rm -f $f
}
function irb { rm $p39.$1.hours 2>$p03;if sot $1;then gps;ups;bps;sex reboot;fi;if srt;then touch $p39.$1.hours;fi; }                                         # reboot if system needs it
function brh { head -n${1:-0} $p12; }                                                                                                                         # new cc head lines
function brl {                                                                                                                                                # recalculate cc logs
  [[ -f $p12 ]] || return;rm -f $p12.r;unset v;while read -a v;do ok=${v[1]};dts ${v[3]}\ ${v[4]};nn=${v[5]:4:2};nr=${v[6]}                                   # uncalculated vars
    if [[ ${v[0]} = BEAC ]];then
      bl1 ${v[19]} ${v[20]} ${v[22]} ${v[23]} ${v[11]} ${v[18]} ${v[1]};bl2 ${v[15]} ${v[16]} ${v[17]};bl3 ${v[13]} ${v[26]} ${v[27]};blo                     # BEAC lines calculated output
    else
      if [[ ${v[0]} = BSRV ]];then m="${v[0]} ${v[1]} ${v[2]} $dt";else m="${v[0]} $ok $(nu0 ${v[2]} %3i) $(dnn)";swn "$m";fi
    fi;swn "$m" >> $p12.r                                                                                                                                     # new cc output
  done <<< $(cat $p12)
}
function brm {                                                                                                                                                # recalculate cc-daily logs
  [[ -f $p12 && -f $p13 ]] || return;rm -f $p13.r;bmi;local d=0000-00-00;local l=0;local n=0;local h=0;local g=0;unset v;while read -a v;do
    d=${v[3]};h=$g;g=$(grep -n "$d 23:58" $p12|cut -d: -f1);[[ ${g:=$h} -le $h ]] && continue;dts $d\ ${v[4]};nn=${v[5]:4:2}                                  # get next cc log position
    nr=${v[6]};nd=${v[12]};l2=$(brh $g|bfl 23:58);bo2 $d;((l+=b2));((n+=1));b3=$(nu1 $l/$n)                                                                   # cur/avg homologous position
    l3=$(brh $g|tail -n$((g-h))|bfl);[[ $l3 ]] && bm1;bm2;b7=${v[11]};b1=${v[14]};b5=${v[15]};b4=${v[13]};bms;swn "$m" >> $p13.r                              # sum err arrays & new cc-daily output
  done <<< $(cat $p13)
}
function bsl {                                                                                                                                                # shrink cc      log using barqivo
  [[ -f $p12 && -f $p14 ]] || return;rm -f $p12.s;tail -n$(($(cat $p12|wc -l)-$(tail -n1 $p14|cut -d' ' -f2))) $p12 > $p12.s                                  # new    cc      log output
  rm -f $p14.s;head -n$(($(cat $p14|wc -l)-1)) $p14 > $p14.s;tail -n1 $p14|sed 's%BEAC [0-9]*%BEAC 0%' >> $p14.s                                              # new    barqivo log output
}
function bnt { [[ $b4 -ne 0 ]]; }                                                                                                                             # peers need change test
function bht { [[ $b2 -gt $b3 ]]; }                                                                                                                           # homologous/avg position test
function bst { [[ $(bi0) -ge 2500 ]]; }                                                                                                                       # peers standard deviation test
function btt { bnt && bht && ! bst; }                                                                                                                         # peers change global test
function bbt { [[ $(grep $d0 $p12 2>$p03|wc -l) -gt 0 ]]; }                                                                                                   # exists cc log day test
function bct { local n=$((nn-5));[[ $nm -ge $n && $(era $p12 $chrs) -eq 1 ]] && ( btt || sot ); }                                                             # change configured peers test
function bdw { [[ -f $1 ]] || return;cp $1 $1.o;grep -v $2 $1.o > $1;grep $2 $1.o > $1.d; }                                                                   # work to delete cc log day
function bdl { local d=$(pt0 $1 sai);[[ $d = sai ]] && return;bdw $p12 $d;bdw $p13 $d; }                                                                      #         delete cc log day
function wst { echo $@|sed 's%[^: ]*: *%%g;s%inactive%off%;s%active%on%' 2>$p03; }                                                                            # get ufw info
function cpf { local f='';until [[ $# -lt 1 ]];do f="$f, $(basename $1)";shift;done;printf $f; }                                                              # get list basenames
function tmp {
  local d=$(fs5|grep throttled|head -n1|sed "$r27");local e=$(fs5|grep normal|tail -n1|sed "$r27");local l=$(pex "smartctl --json=c -x /dev/sda")
  local g=$(echo $(echo $l|jq -r "$r40" 2>$p03) $(echo $l|jq -r "$r41" 2>$p03));local l=$(sensors 2>$p03|sed -n "$r26")
  if [[ $cunm = $znm4 ]];then local g=$(echo $g $(pex "smartctl --json=c -x /dev/nvme0n1"|jq -r "$r40" 2>$p03));fi
  [[ $1$d$e || $(nu2 1 0 $l) -ge 40 || $(nu2 1 0 $g) -ge 40 ]] || return;[[ $d ]] && d="throttled: $d";[[ $e ]] && e="normal: $e"
  swn "TEMP $(printf '%5.1fC %10s %5s ssd: %.1fC %s %s' $(nu2 1 1 $l) $dt $(nu2 1 1 $g) $d $e 2>$p03)"                                                        # TEMP cpu/ssd info
}
function cpe {                                                                                                                                                # system status
  local e='NO';[[ $($s07|sed -n 's%.*synchronized: \([a-z]*\) *%\1%p') = yes ]] && e='OK';dts
  if [[ $(sst $s19 masked) ]];then e="CNTP $e";m=$(ss2 ntp);else e="CSYS $e";m=$(ss2 $s19);fi
  swn "$e $(nu0 $(fs0 clock|wc -l) %3i) $dt status: $m";[[ $1 = c ]] && return;tmp;[[ $1 = p ]] && return                                                     # clock & temperature info
  if [[ $(cat $p44 2>$p03) -eq 0 ]];then e=off;else e=on;fi;if [[ $(cat $p43 2>$p03) -eq 1 ]];then d=off;else d=on;fi                                         # usb/cpu current state
  m="INFO$(printf '%3i %3i %10s %5s' $(fs2|grep usb|grep -i error|wc -l) $(fs5|wc -l) $dt 2>$p03)"                                                            # usb/cpu erros count
  m="$m usb $e, turbo $d, ufw $(wst $(pex 'ufw status'|grep Status:))"                                                                                        # usb/cpu/ufw info
  m="$m, uptime:$(uptime|sed 's%[0-9]*:[0-9]*:[0-9]*%%;s%[0-9]* users*,%%;s% average\([^,]*\).*%\1%;s%  *% %g')";swn "$m"                                     # uptime/load info
  local l=$(fs2|fs6|wc -l);local n=$(fs1|fs7|wc -l)
  local e=$(fs2|fs6|tail -n1|sed 's%.*hrv-zotac[0-9] *\(.*\)%\1%;s%  *% %g'                         |cut -c1-70)
  local d=$(fs1|fs7|tail -n1|sed 's%.*[0-9]*:[0-9]*:[0-9]*\.[0-9][0-9][0-9]]* *\(.*\)%\1%;s%  *% %g'|cut -c1-70)
  m="ERRO$(printf '%3i %3i' $l $n 2>$p03) $dt";[[ $l -gt 0 ]] && m="$m system: $e";[[ $n -gt 0 ]] && m="$m ethrum: $d";(( l+n )) && swn "$m"                  # sys/eth errors info
  m='';srt && m="$m, reboot $(($(sra)/60/60)) hours ago";[[ $(ls $p39.* 2>$p03) ]] && m="$m$(cpf $(ls $p39.* 2>$p03))"                                        # reboot info
  [[ $(bsc) -gt 0 ]] && m="$m, committee on";[[ $m ]] && swn "INFO        $dt${m#*,}"                                                                         # committee info
  [[ $(swn $(/usr/lib/update-notifier/apt-check --human-readable)) -gt 0 ]] && { echo;apt list --upgradable; }
}
# Plex Media Server
function xop { pde 80 plex/nginx delete;pai 80 192.168.8.0/24 plex/nginx       ;ide 192.168.8.0/24 1900/udp plex/upnp       ; }
function xco { pde 80 plex/nginx       ;pai 80 192.168.8.0/24 plex/nginx delete;ide 192.168.8.0/24 1900/udp plex/upnp delete; }
function xe  { xop;sex 'ufw reload';cex "$s04 $s22";cex "$s04 $s21"; }                                                                                        # enable  plexmediaserver
function xa  { [[ $(sst $s22       ) ]] && cex "$s03 $s22";[[ $(sst $s21       ) ]] && cex "$s03 $s21"; }                                                     # start   plexmediaserver
function xp  { [[ $(sst $s22 loaded) ]] && cex "$s02 $s22";[[ $(sst $s21 loaded) ]] && cex "$s02 $s21"; }                                                     # stop    plexmediaserver
function xd  { cex "$s05 $s21";cex "$s05 $s22";xco;sex 'ufw reload'; }                                                                                        # disable plexmediaserver
# Transmission BitTorrent Daemon
function rop { pae 51413 torrent;pde 9091 torrent delete;pai 9091 192.168.8.0/24 torrent       ; }
function rco { pde 51413 torrent;pde 9091 torrent       ;pai 9091 192.168.8.0/24 torrent delete; }
function re  { rop;sex 'ufw reload';cex "$s04 $s15"; }                                                                                                        # enable  transmission-daemon
function ra  { [[ $(sst $s15       ) ]] && cex "$s03 $s15"; }                                                                                                 # start   transmission-daemon
function rp  { [[ $(sst $s15 loaded) ]] && cex "$s02 $s15"; }                                                                                                 # stop    transmission-daemon
function rd  { cex "$s05 $s15";rco;sex 'ufw reload'; }                                                                                                        # disable transmission-daemon
# Bind9
function sop { pai 53 192.168.8.0/24 dns       ; }
function sco { pai 53 192.168.8.0/24 dns delete; }
function se  { sop;sex 'ufw reload';cex "$s04 $s20"; }                                                                                                        # enable  named
function sa  { [[ $(sst $s20       ) ]] && cex "$s03 $s20"; }                                                                                                 # start   named
function sp  { [[ $(sst $s20 loaded) ]] && cex "$s02 $s20"; }                                                                                                 # stop    named
function sd  { cex "$s05 $s20";sco;sex 'ufw reload'; }                                                                                                        # disable named
# el/cc/vc
function efw { if [[ $cust = hrv ]];then pai $1 192.168.8.0/24 $2 $3;else pai $1 $vip1 $2 $3;pai $1 $vip3 $2 $3;fi; }
function eop { local e=30303;[[ $cunm = $znm1 ]] || e=30304;pae $e elp2p;pde 8545 elapi delete;pde 8551 eljwt delete;efw 8545 elapi       ;efw 8551 eljwt       ; }
function eco { local e=30303;[[ $cunm = $znm1 ]] || e=30304;pde $e elp2p;pde 8545 elapi       ;pde 8551 eljwt       ;efw 8545 elapi delete;efw 8551 eljwt delete; }
function bfw { if [[ $cust = hrv ]];then pai $1 192.168.8.0/24 $2 $3;else pai $1 $vip3 $2 $3;fi; }
function bop { local e=9000 ;[[ $cunm = $znm3 ]] || e=9004 ;pae $e clp2p;pde 5052 clapi delete;pde 8551 cljwt delete;bfw 5052 clapi       ;bfw 8551 cljwt       ; }
function bco { local e=9000 ;[[ $cunm = $znm3 ]] || e=9004 ;pde $e clp2p;pde 5052 clapi       ;pde 8551 cljwt       ;bfw 5052 clapi delete;bfw 8551 cljwt delete; }
function vfw { if [[ $cust = hrv ]];then pai $1 192.168.8.0/24 $2 $3;else pai $1 $vip1 $2 $3;fi; }
function vop { vfw 5064 vcapi       ;pde 5064 vcapi delete; }
function vco { vfw 5064 vcapi delete;pde 5064 vcapi       ; }
# enable/start eth-geth eth-beacon eth-validator prometheus prometheus-node-exporter grafana-server mev-boost
function ge  { eop;sex 'ufw reload';cex "$s04 $s10"; }                                                                                                        # enable eth-geth
function ue  { eop;sex 'ufw reload';cex "$s04 $s11"; }                                                                                                        # enable eth-besu
function be  { bop;sex 'ufw reload';cex "$s04 $s12"; }                                                                                                        # enable eth-beacon
function ve  { vop;sex 'ufw reload';cex "$s04 $s13"; }                                                                                                        # enable eth-validator
function pe  { pai 9090/tcp 192.168.8.0/24 $s16 ;sex 'ufw reload';cex "$s04 $s16"; }                                                                          # enable prometheus
function ne  { sex 'ufw reload';cex "$s04 $s17"; }                                                                                                            # enable prometheus-node-exporter
function fe  { pai 3000/tcp 192.168.8.0/24 grafana  ;sex 'ufw reload';cex "$s04 $s18"; }                                                                      # enable grafana-server
function me  { pai 18550    192.168.8.0/24 mev-boost;sex 'ufw reload';cex "$s04 $s14"; }                                                                      # enable mev-boost
function ga  { [[ $(sst $s10) ]] && cex "$s03 $s10"; }                                                                                                        # start eth-geth
function ua  { [[ $(sst $s11) ]] && cex "$s03 $s11"; }                                                                                                        # start eth-besu
function ba  { [[ $(sst $s12) ]] && cex "$s03 $s12"; }                                                                                                        # start eth-beacon
function va  {
  v2t && [[ -f $p05/vc_keys && $(sst $s13) ]] || return                                                                                                       # cannot start eth-validator
  if [[ -f $p05/vc_lock ]];then sis $p02/$(basename $p18);else cex "$s03 $s13";rm -f $p05/vc_slash;fi                                                         # start eth-validator
}
function pa  { [[ $(sst $s16) ]] && cex "$s03 $s16"; }                                                                                                        # start prometheus
function na  { [[ $(sst $s17) ]] && cex "$s03 $s17"; }                                                                                                        # start prometheus-node-exporter
function fa  { [[ $(sst $s18) ]] && cex "$s03 $s18"; }                                                                                                        # start grafana-server
function ma  { [[ $(sst $s14) ]] && cex "$s03 $s14"; }                                                                                                        # start mev-boost
function wa  { if [[ $(pex 'ufw status'|grep -i inactive) ]];then yex 'ufw enable';else swu 'FIREWALL ALREADY ACTIVE';fi; }                                   # enable ufw : Proceed with operation (y|n)?
# stop/disable eth-geth eth-beacon eth-validator prometheus prometheus-node-exporter grafana-server mev-boost
function gps { [[ $(sst $s10 loaded) ]] && sex "$s02 $s10"; }                                                                                                 # silent stop eth-geth
function ups { [[ $(sst $s11 loaded) ]] && sex "$s02 $s11"; }                                                                                                 # silent stop eth-besu
function bps { [[ $(sst $s12 loaded) ]] && sex "$s02 $s12"; }                                                                                                 # silent stop eth-beacon
function gp  { [[ $(sst $s10 loaded) ]] && cex "$s02 $s10"; }                                                                                                 # stop eth-geth
function up  { [[ $(sst $s11 loaded) ]] && cex "$s02 $s11"; }                                                                                                 # stop eth-besu
function bp  { [[ $(sst $s12 loaded) ]] && cex "$s02 $s12"; }                                                                                                 # stop eth-beacon
function vp  { [[ $(sst $s13 loaded) ]] && cex "$s02 $s13";touch $p05/vc_slash; }                                                                             # stop eth-validator
function pp  { [[ $(sst $s16 loaded) ]] && cex "$s02 $s16"; }                                                                                                 # stop prometheus
function np  { [[ $(sst $s17 loaded) ]] && cex "$s02 $s17"; }                                                                                                 # stop prometheus-node-exporter
function fp  { [[ $(sst $s18 loaded) ]] && cex "$s02 $s18"; }                                                                                                 # stop grafana-server
function mp  { [[ $(sst $s14 loaded) ]] && cex "$s02 $s14"; }                                                                                                 # stop mev-boost
function gd  { cex "$s05 $s10";eco;sex 'ufw reload'; }                                                                                                        # disable eth-geth
function ud  { cex "$s05 $s11";eco;sex 'ufw reload'; }                                                                                                        # disable eth-besu
function bd  { cex "$s05 $s12";bco;sex 'ufw reload'; }                                                                                                        # disable eth-beacon
function vd  { cex "$s05 $s13";vco;sex 'ufw reload';touch $p05/vc_lock; }                                                                                     # disable eth-validator
function pd  { [[ $(sst $s16 loaded) ]] || return;cex "$s05 $s16";pai 9090/tcp 192.168.8.0/24 $s16  delete;sex 'ufw reload'; }                                # disable prometheus
function nd  { [[ $(sst $s17 loaded) ]] || return;cex "$s05 $s17"; }                                                                                          # disable prometheus-node-exporter
function fd  { [[ $(sst $s18 loaded) ]] || return;cex "$s05 $s18";pai 3000/tcp 192.168.8.0/24 grafana   delete;sex 'ufw reload'; }                            # disable grafana-server
function md  { [[ $(sst $s14 loaded) ]] || return;cex "$s05 $s14";pai 18550    192.168.8.0/24 mev-boost delete;sex 'ufw reload'; }                            # disable mev-boost
function umt { [[ $(cat $p44 2>$p03) -eq 1 && $(fs2|grep usb|grep -i error|wc -l) -gt 10 ]]; }                                                                # usb messages test
function t0t { [[ $(cat $p43 2>$p03) -eq 0 && $(fs5                       |wc -l) -gt 20 ]]; }                                                                # cpu no turbo recomended test
function t1t { [[ $(cat $p43 2>$p03) -eq 1 && $(fs5                       |wc -l) -le 10 ]]; }                                                                # cpu    turbo recomended test
function t2t { [[ $(cat $p43 2>$p03) -eq 1 ]]; }                                                                                                              # cpu no turbo            test
function pas { umt && sex "$p02/eth2/t5 usbstop";t1t && sex "$p02/eth2/t5 cputurbo";t0t && sex "$p02/eth2/t5 cpunoturbo"; }                                   # set usb/cpu parameters
function paf { t2t && sex "$p02/eth2/t5 cputurbo"; }                                                                                                          # set turbo   parameter
function ghs { sso GETH $s10; }
function uhs { sso BESU $s11; }
function bhs { sso BEAC $s12;sso VALI $s13; }
function uhx { swn "\n\n$znm1";ssh ztc1 "export H=$H;~/eth2/t6 uhs"; }
function cpx { swn "\n\n$znm2";ssh ztc2 "export H=$H;~/eth2/t6 cpe"; }
function bhx { swn "\n\n$znm3";ssh ztc3 "export H=$H;~/eth2/t6 bhs"; }
function ehx { swn "\n\n$znm4";ssh ztc4 "export H=$H;~/eth2/t6 gbs"; }
function ah1 { swn "\n\n$znm1";uhs;cpe            ;cpx                ;bhx                ;ehx; }
function ah2 {                 uhx;swn "\n\n$znm2";cpe                ;bhx                ;ehx; }
function ah3 {                 uhx                ;cpx;swn "\n\n$znm3";bhs;cpe            ;ehx; }
function ah4 {                 uhx                ;cpx                ;bhx;swn "\n\n$znm4";ghs;bhs;cpe; }
function lhs {
  if v2t;then local e=$(nu0 $(ss1 $s13 nodes "[^$1 ]"|sed -n $r25));else local e=$(ssh $(snc $cuvc) "export H=$H;~/eth2/t6 cci $1");fi                        # get master/slave cc ip
  [[ $e -gt 0 ]] || return;local i=$(sci)
  if [[ $i -eq $e ]];then                                                                                                                                     # get connected ec ip
    local n=$(nu0 $(ss1 $s12 execution-endpoint '[^ ]'|sed -n $r25))
  else
    local n=$(ssh $(snc $(sni $e)) "export H=$H;~/eth2/t6 eci")
  fi;[[ $n -gt 0 ]] || return;    echo -e "\n$(sni $n)";if [[ $i -eq $n ]];then ghs;uhs;    else ssh $(snc $(sni $n)) "export H=$H;~/eth2/t6 ehs";fi          # ec historic report summary
  [[ $i -eq $e && $i -eq $n ]] || echo -e "\n$(sni $e)";if [[ $i -eq $e ]];then bhs    ;cpe;else ssh $(snc $(sni $e)) "export H=$H;~/eth2/t6 bhs";fi          # cc historic report summary
}
function nsh { $s08 list;$s08 status;$s09 status|sed -n 's%\(Current DNS\).*:%   \1:%ip'; }                                                                   # network/dns info
function wlp { local e="$1";shift;until [[ $# -lt 1 ]];do e="$e\|$1";shift;done;fs2|grep '\[UFW'|if [[ $e ]];then grep -v "$e";else cat;fi; }
function vft { [[ -f $p04/$s13.service ]]; }                                                                                                                  # vc service file test
function cft { [[ -f $p04/$s12.service ]]; }                                                                                                                  # cc service file test
function blt { [[ $(grep '\-all-' $p04/$s12.service 2>$p03) ]]; }                                                                                             # cc long-lived   test
function c0t { [[ $(sed -n 's%.*--execution-endpoint  *[^ ]*/\([0-9\.]*\):8551.*%\1%p' $p04/$s12.service 2>$p03) = $zip1 ]]; }                                # cc choose el server test
function c0c { local e="$r11";c0t && e="$r10";sed "$e" $s12.sav > $p04/$s12.service; }                                                                        # cc change el server
function ble { cft || return;cp $p04/$s12.service $p02/$s12.sav;sed "$1" $p02/$s12.sav > $p04/$s12.service;dmr; }                                             # cc service edit
function cce { cft || return;cp $p04/$s12.service $p02/$s12.sav;c0c;cmw $p04/$s12.service 644 eth; }                                                          # cc change el server (merge)
function vcc { vft || return;cp $p04/$s13.service $p02/$s13.sav;sed "$r19" $s13.sav > $p04/$s13.service;cmw $p04/$s13.service 644 eth; }                      # vc switch cc server order
function trs { if [[ $(sst $s19 masked) ]];then nex "$s06 ntp";else nex "$s06 $s19";fi; }                                                                     # systemd-timesyncd/ntp restart
function dpa { nex "$s02 $s20";nex "$s02 systemd-resolved";nex "$s03 $s20";nex "$s03 systemd-resolved"; }                                                     # DNS stop/start
function nrs { nex 'netplan apply';dpa; }                                                                                                                     # netplan/DNS restart
function lcp { local f=$1;shift;[[ -x $f ]] && until [[ $# -lt 1 ]];do if [[ $1 = $(snc $cunm) ]];then lci $f;else scp $f $1:$p02;fi;shift;done; }            # propagate lighthouse
function lci { [[ -x $1 && ! -d $1      ]] || return;sex "mv $p00/lighthouse $p00/lighthouse.sav";sex "cp $1 $p00"; }                                         # lighthouse binary install
function lmd { [[ -x $p00/lighthouse ]] || return;cmw $p00/lighthouse 755 eth;swb 'LIGHT INSTALADO'; }                                                        # lighthouse set permissions
function lpi { [[ $cunm = $znm2 ]] && lcp $1 ztc2 ztc3;[[ $cunm = $znm4 ]] && lcp $1 ztc4;[[ $cunm = $vnm1 ]] && lcp $1 vpsl;lci $p02/lighthouse;sex "rm $p02/lighthouse";lmd; }
function luc {                                                                                                                                                # lighthouse upgrade/compile
  if [[ -f $p06/lighthouse/README.md ]];then
    cd $p06/lighthouse;make clean;cargo clean                                                                                                                 # clean compile dirs
  else
    cd $p06;sex "rm -rf $p06/lighthouse";git clone https://github.com/sigp/lighthouse.git;cd $p06/lighthouse                                                  # get new git
  fi
  git fetch;if [[ $(echo $2|egrep 'v[0-9]+\.[0-9]+\.[0-9]+') ]];then m=$2;else m=$(git describe --tags $(git rev-list --tags --max-count=1));fi               # fetch (vX.X.X/last) version
  git checkout $m;swu 'VAI COMPILAR LIGHT';FEATURES=modern PROFILE=maxperf make;[[ $? -eq 0 && -x $1 ]] || swb 'ERRO COMPILAR ERRO'                           # checkout stable version & compile
}
function jw0 { [[ -f jwt ]] && return;openssl rand -hex 32|tr -d '\n'|tee jwt 1>$p03; }                                                                       # create jwt file
function ruv { if [[ $1 ]];then swn "RUST OVERRIDE SET $1";rustup override set $1;else swn 'RUST UPDATE';rustup update stable;fi; }                           # set/update rust version
function v0t { [[ $(sst $s13 running) ]]; }                                                                                                                   # vc running  test
function v1t { [[ $cunm = $nxvc ]]; }                                                                                                                         # vc next     test
function v2t { [[ $cunm = $cuvc ]]; }                                                                                                                         # vc current  test
function v3t { [[ $cuvc = $nxvc ]]; }                                                                                                                         # vc transfer test
function vps { local f=$p02/$(basename $p18);sex "cp $p18 $p02";cmw $f 666 eth;scp $f $(snc $nxvc):~;sex "rm $f"; }                                           # prep slash db
function tvc {
  v3t && return;swn "$s24";if v2t && v0t;then swn "TRANSFERIR VC -> $nxvc (SIM/nao)?";else return;fi;local rsp=nao;read rsp
  if [[ $rsp = SIM && ! -f $p05/vc_slash && ! -f $p05/vc_lock && -f $p05/vc_keys ]];then vp;vd;swu "COPY SLASH -> $nxvc";vps;fi                               # vc stop/disable & prep slash db
}
function svr { local t='';for t in $(printf '%s\n' $@|sort -u);do curl -sX GET "$s23$t"|sed -n "$r23";done; }                                                 # show mev validator registration
function mvr { local f=$p02/validator_keys/keystore;if [[ $(ls $f*.json 2>$p03) ]];then svr $(sed -n "$r28" $f*.json 2>$p03);else svr $s99;fi;  }             # choose validator keys

[[ $1 = mvr ]] && { mvr; }
[[ $1 = jwt ]] && { [[ $cunm = $znm1 || $cunm = $vnm1 ]] && jw0;if [[ -f jwt ]];then sjw eth1 $p08/geth;sjw eth1 $p09/data;sjw eth2 $p16;fi; }
[[ $1 = lpi ]] && { lpi $p02/.cargo/bin/lighthouse; }
[[ $1 = luc ]] && { luc $p02/.cargo/bin/lighthouse $2; }
[[ $1 = ruv ]] && { ruv $2; }
[[ $1 = clr ]] && { blt && ble "$r17"; }
[[ $1 = cla ]] && { blt || ble "$r18"; }
[[ $1 = vcc ]] && { vcc; }
[[ $1 = cce ]] && { cce; }
[[ $1 = chk ]] && { cex 'chkrootkit'; }
[[ $1 = eip ]] && { curl -s4 "https://${3:-meo.fruga.pt}:$2@dyn.dns.he.net/nic/update?hostname=${3:-meo.fruga.pt}" &>$p03; }
[[ $1 = dsh ]] && { $s09 query ${2:-smtp.gmail.com}; }
[[ $1 = drs ]] && { dpa; }
[[ $1 = nrs ]] && { nrs; }
[[ $1 = trs ]] && { trs; }
[[ $1 = dmr ]] && { dmr; }
[[ $1 = tsh ]] && { cex "$s07";cex "$s07 timesync-status";cex "$s07 show-timesync"; }
[[ $1 = nsh ]] && { nsh; }
[[ $1 = tvc ]] && { tvc; }
[[ $1 = tmp ]] && { dts;tmp s; }
[[ $1 = ul  ]] && { ul0;swn "$m"; }
[[ $1 = ulf ]] && { ul0;swn "$m" >> $p11;[[ $ok != OK ]] && urs 0;pas; }                                                                                      # el log/restart
[[ $1 = gl  ]] && { gl0;swn "$m"; }
[[ $1 = glf ]] && { gl0;swn "$m" >> $p10;[[ $ok != OK ]] && grs 0;pas; }                                                                                      # el log/restart
[[ $1 = bl  ]] && { bl0;swn "$m"; }
[[ $1 = bm  ]] && { bm0;bmo;swn "$m"; }
[[ $1 = bn  ]] && { bm0;bno;swn "$m"; }
[[ $1 = blf ]] && { bl0;swn "$m" >> $p12;stt && bo5 && bht && bst && bdl $d0;v2t && [[ $ok != OK ]] && brs 0;pas; }                                           # cl log/delete/restart & parameter set
[[ $1 = bmf ]] && { bm0;bms;bbt && swn "$m" >> $p13;bct && brs $b4 $(btr PE) 120; }
[[ $1 = bnf ]] && { bm0;bno;swn "$m" >> $p14; }
[[ $1 = gh  ]] && { eh0 $p10 $2;[[ $2 ]] || { gl0;swn "$m\n";ghs;cpe; } }
[[ $1 = uh  ]] && { eh0 $p11 $2;[[ $2 ]] || { ul0;swn "$m\n";uhs;cpe; } }
[[ $1 = bh  ]] && { bh0 $2; }
[[ $1 = bio ]] && { bio ${2:-2};swn "$m"; }
[[ $1 = ahs ]] && { [[ $cunm = $znm1 ]] && ah1;[[ $cunm = $znm2 ]] && ah2;[[ $cunm = $znm3 ]] && ah3;[[ $cunm = $znm4 ]] && ah4; }
[[ $1 = ghs ]] && { ghs    ;cpe; }                                                                                                                            #        ec/system       reports
[[ $1 = uhs ]] && { uhs    ;cpe; }                                                                                                                            #        ec/system       reports
[[ $1 = bhs ]] && { bhs    ;cpe; }                                                                                                                            #        cl/system       reports
[[ $1 = ehs ]] && { ghs;uhs;cpe; }                                                                                                                            #        el/system       reports
[[ $1 = gbs ]] && { ghs;bhs;cpe; }                                                                                                                            #        ec/cc/system    reports
[[ $1 = mhs ]] && { lhs ,; }                                                                                                                                  # master ec/cc/vc/system reports
[[ $1 = shs ]] && { lhs  ; }                                                                                                                                  # slave  ec/cc/vc/system reports
[[ $1 = cci ]] && { nu0 $(ss1 $s13 nodes            "[^$2 ]"|sed -n $r25); }                                                                                  # cc ip vc uses
[[ $1 = eci ]] && { nu0 $(ss1 $s12 execution-endpoint '[^ ]'|sed -n $r25); }                                                                                  # ec ip cc uses
[[ $1 = bo  ]] && { bo0 $2 $3 $4; }
[[ $1 = bon ]] && { bon $2; }
[[ $1 = boc && -f $p12 ]] && { unset v;read -a v <<< $(bff|tail -n1);l2=$(bff $(pt1 $2 ${v[4]}));boa; }
[[ $1 = bol && -f $p12 ]] && { l2=$(bff 23:58);boa; }
[[ $1 = bdl ]] && { bdl $2; }
[[ $1 = brl ]] && { brl; }
[[ $1 = brm ]] && { brm; }
[[ $1 = bsl ]] && { bsl; }
[[ $1 = cpe ]] && { cpe $2; }
[[ $1 = gpn ]] && { if [[ $(sst $s10 running) ]];then gp;cex "du -h $p08";sudo -u eth1 $p07/geth --datadir $p08 snapshot prune-state;cex "du -h $p08";dmr;ga;fi; }
[[ $1 = grs ]] && { grs ${2:-0}   ; }
[[ $1 = urs ]] && { urs ${2:-0}   ; }
[[ $1 = bsb ]] && { bsb ${2:-0} BN; }
[[ $1 = bsv ]] && { bsb ${2:-0} VC; }
[[ $1 = brs ]] && { brs ${2:-0} BN; }
[[ $1 = crs ]] && { brs ${2:-0} VC; }
[[ $1 = brb ]] && { brs ${2:-0} RB; }
[[ $1 = grb ]] && { grs ${2:-0} RB; }
[[ $1 = urb ]] && { urs ${2:-0} RB; }
[[ $1 = irb ]] && { irb ${2:-3};pas; }
[[ $1 = lp  ]] && { netstat -tulpn; }
# outros journal system/lighthouse
[[ $1 = el  ]] && { if [[ $(sst $s10 running) ]];then fs1 $r30;else fs1 $r31;fi|fs7 $2; }
[[ $1 = sl  ]] && { fs2      |fs6 $2; }
[[ $1 = cl  ]] && { fs1 $r32 |fs7 $2; }
[[ $1 = ml  ]] && { fs1 $r33 |fs7 $2; }
[[ $1 = ll  ]] && { rl3      |fs7 $2; }
[[ $1 = ci  ]] && { rl1      |fs7 $2; }
[[ $1 = vi  ]] && { rl2      |fs7 $2; }
[[ $1 = ws  ]] && { cex 'ufw status numbered'; }
[[ $1 = wa  ]] && { wa; }
[[ $1 = we  ]] && { yex 'ufw enable'; }
[[ $1 = wpr ]] && { cex 'ufw disable'; }
[[ $1 = wds ]] && { cex 'ufw disable'; }
[[ $1 = wl  ]] && { wlp ${@:2:$#}; }
# journal
[[ $1 = yj  ]] && { jsh; }
[[ $1 = ej  ]] && { jsh "-u $s10 -u $s12 -u $s13"; }
[[ $1 = gj  ]] && { jsh "-u $s10"; }
[[ $1 = uj  ]] && { jsh "-u $s11"; }
[[ $1 = bj  ]] && { jsh "-u $s12"; }
[[ $1 = vj  ]] && { jsh "-u $s13"; }
[[ $1 = sj  ]] && { jsh "-u $s20"; }
[[ $1 = mj  ]] && { jsh "-u $s14"; }
# arranca
[[ $1 = ga  ]] && { dmr;ga; }
[[ $1 = ua  ]] && { dmr;ua; }
[[ $1 = ba  ]] && { dmr;ba; }
[[ $1 = va  ]] && { dmr;va; }
[[ $1 = pa  ]] && { dmr;pa; }
[[ $1 = na  ]] && { dmr;na; }
[[ $1 = fa  ]] && { dmr;fa; }
[[ $1 = xa  ]] && { dmr;xa; }
[[ $1 = ra  ]] && { dmr;ra; }
[[ $1 = sa  ]] && { dmr;sa; }
[[ $1 = ma  ]] && { dmr;ma; }
# para & arranca & journal
[[ $1 = gaj ]] && { dmr;ga;jsh "-u $s10"; }
[[ $1 = uaj ]] && { dmr;ua;jsh "-u $s11"; }
[[ $1 = baj ]] && { dmr;ba;jsh "-u $s12"; }
[[ $1 = vaj ]] && { dmr;va;jsh "-u $s13"; }
[[ $1 = saj ]] && { dmr;sa;jsh "-u $s20"; }
[[ $1 = maj ]] && { dmr;ma;jsh "-u $s14"; }
[[ $1 = gpa ]] && { gp;dmr;ga;jsh "-u $s10"; }
[[ $1 = upa ]] && { up;dmr;ua;jsh "-u $s11"; }
[[ $1 = bpa ]] && { bp;dmr;ba;jsh "-u $s12"; }
[[ $1 = vpa ]] && { vp;dmr;va;jsh "-u $s13"; }
[[ $1 = spa ]] && { sp;sa; }
[[ $1 = mpa ]] && { mp;dmr;ma;jsh "-u $s14"; }
[[ $1 = gpd ]] && { gp;gd; }
[[ $1 = upd ]] && { up;ud; }
[[ $1 = bpd ]] && { bp;bd; }
[[ $1 = vpd ]] && { vp;vd; }
[[ $1 = xpd ]] && { xp;xd; }
[[ $1 = rpd ]] && { rp;rd; }
[[ $1 = spd ]] && { sp;sd; }
[[ $1 = mpd ]] && { mp;md; }
[[ $1 = gea ]] && { ge;dmr;ga;jsh "-u $s10"; }
[[ $1 = uea ]] && { ue;dmr;ua;jsh "-u $s11"; }
[[ $1 = bea ]] && { be;dmr;ba;jsh "-u $s12"; }
[[ $1 = vea ]] && { ve;dmr;va;jsh "-u $s13"; }
[[ $1 = rea ]] && { re;dmr;ra; }
[[ $1 = sea ]] && { se;dmr;sa; }
[[ $1 = xea ]] && { xe;dmr;xa; }
[[ $1 = mea ]] && { me;dmr;ma;jsh "-u $s14"; }
# enable
[[ $1 = ge  ]] && { ge; }
[[ $1 = ue  ]] && { ue; }
[[ $1 = be  ]] && { be; }
[[ $1 = ve  ]] && { ve; }
[[ $1 = pe  ]] && { pe; }
[[ $1 = ne  ]] && { ne; }
[[ $1 = fe  ]] && { fe; }
[[ $1 = xe  ]] && { xe; }
[[ $1 = re  ]] && { re; }
[[ $1 = se  ]] && { se; }
[[ $1 = me  ]] && { me; }
# para
[[ $1 = fpr ]] && { fp; }
[[ $1 = npr ]] && { np; }
[[ $1 = ppr ]] && { pp; }
[[ $1 = vpr ]] && { vp; }
[[ $1 = bpr ]] && { bp; }
[[ $1 = gpr ]] && { gp; }
[[ $1 = upr ]] && { up; }
[[ $1 = xpr ]] && { xp; }
[[ $1 = rpr ]] && { rp; }
[[ $1 = spr ]] && { sp; }
[[ $1 = mpr ]] && { mp; }
# disable
[[ $1 = fds ]] && { fd; }
[[ $1 = nds ]] && { nd; }
[[ $1 = pds ]] && { pd; }
[[ $1 = vds ]] && { vd; }
[[ $1 = bds ]] && { bd; }
[[ $1 = gds ]] && { gd; }
[[ $1 = uds ]] && { ud; }
[[ $1 = xds ]] && { xd; }
[[ $1 = rds ]] && { rd; }
[[ $1 = sds ]] && { sd; }
[[ $1 = mds ]] && { md; }
[[ $1 = lup ]] && { apt list --upgradable; }

if [[ ! $1 ]];then
  m="primeira letra"
  m="$m\ne\t\t$s10 $s12 $s13"
  m="$m\ng\t\t$s10"
  m="$m\nu\t\t$s11"
  m="$m\nb\t\t$s12"
  m="$m\nv\t\t$s13"
  m="$m\np\t\t$s16"
  m="$m\nn\t\t$s17"
  m="$m\nf\t\t$s18"
  m="$m\nx\t\t$s21"
  m="$m\nr\t\t$s15"
  m="$m\ns\t\t$s20"
  m="$m\nm\t\t$s14"
  m="$m\nsegunda letra"
  m="$m\na[j]\t\tarranca\t[& journal]"
  m="$m\ne\t\tenable"
  m="$m\nj\t\tjournal"
  m="$m\npr\t\tpara"
  m="$m\nds\t\tdisable"
  m="$m\npd\t\tpara\t& disable"
  m="$m\npa\t\tpara\t& arranca\t& journal"
  m="$m\nea\t\tenable\t& arranca\t& journal"
  m="$m\noutros"
  m="$m\ngl[f]\t\tec log report"
  m="$m\ngpn\t\t$s10 prune DB - TAKES HOURS"
  m="$m\nbsb [n]\t\t$s12\t\t\tstop\twith n peers"
  m="$m\nbsv [n]\t\t$s12/$s13\tstop\twith n peers"
  m="$m\ngrs [n]\t\t$s10\t\t\trestart\twith n peers"
  m="$m\nurs [n]\t\t$s11\t\t\trestart\twith n peers"
  m="$m\nbrs [n]\t\t$s12\t\t\trestart\twith n peers"
  m="$m\ncrs [n]\t\t$s12/$s13\trestart\twith n peers"
  m="$m\ngrb [n]\t\tsystem & geth\t\t\treboot\twith n peers"
  m="$m\nurb [n]\t\tsystem & besu\t\t\treboot\twith n peers"
  m="$m\nbrb [n]\t\tsystem & beacon\t\t\treboot\twith n peers"
  m="$m\nirb [h]\t\tsystem (if needed)\t\treboot\tafter h hours"
  m="$m\nyj\t\tsystem journal"
  m="$m\nsl\t[hh:mm]\tsystem journal\tlog lines"
  m="$m\nll\t[hh:mm]\tel/cl\t\tlog lines (last 7 days)"
  m="$m\n[ecm]l\t[hh:mm]\tec/cc/mev\tlog lines"
  m="$m\n[cv]i\t[hh:mm]\tcc/vc\tlog lines (internal)"
  m="$m\nbrl\t\trecalculate cc logs"
  m="$m\nbrm\t\trecalculate cc-daily logs"
  m="$m\nbsl\t\tshrink cc log using barqivo"
  m="$m\nbdl yyyy-mm-dd\tdelete cc log day"
  m="$m\nbio [lines]\timported/observed delays (using [lines] from intern log)"
  m="$m\nbo  [lines]\thomologous report [with max lines]"
  m="$m\nbon [nodes]\thomologous nodes report"
  m="$m\nbo[cl]\t\tall homologous nodes report at [current|last] time"
  m="$m\nbl[f]\t\tcc report [file add & delete log day]"
  m="$m\nbm[f]\t\tcc-daily report [file add & $s12 nodes change/restart]"
  m="$m\nbn[f]\t\tarqivo report [file add]"
  m="$m\n[gub]h[s]\tgeth|besu|beacon\thistoric report [summary]"
  m="$m\nehs\t\tgeth|besu\t\thistoric report summary"
  m="$m\ngbs\t\tgeth/beacon\t\thistoric report summary"
  m="$m\n[m|s]hs\t\t[master|slave] el/cl\thistoric report summary"
  m="$m\ncla\t\tcc add    long-lived parms"
  m="$m\nclr\t\tcc remove long-lived parms"
  m="$m\ncce\t\tcc change ec server ($znm1/$znm4)"
  m="$m\nvcc\t\tvc switch cc server order"
  m="$m\ntvc\t\tvc transfer ($cuvc -> $nxvc)"
  m="$m\nmvr\t\tvc mev validator registration"
  m="$m\nws\t\tfirewall status"
  m="$m\nwa\t\tfirewall arranca"
  m="$m\nwpr\t\tfirewall para"
  m="$m\ncpe [cp]\tclock & cpu & errors status"
  m="$m\nlp\t\tlista portas"
  m="$m\neip\t\tset dynamic DNS"
  m="$m\nnsh\t\tnetwork/route/DNS show "
  m="$m\ndsh [url]\tdns show"
  m="$m\nnrs\t\tdns/netplan reset"
  m="$m\ndrs\t\tdns reset"
  m="$m\ntrs\t\ttime sync restart"
  m="$m\ntsh\t\ttime sync show "
  m="$m\ntmp\t\ttemperature show"
  m="$m\nchk\t\tcheck server with chkrootkit"
  m="$m\nlup\t\tcheck apt list --upgradable"
  swn "\n$m\n"
fi

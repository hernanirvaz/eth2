#!/bin/bash

source /home/eth/eth2/t1

# get synced geth chaindata to an unsynced geth 400GB
# rsync -hrtpe 'ssh -p 2020' --compress-level=9 --progress --stats 207.180.214.8:/home/eth/eth2 ./teste

# open/close api/metrics ports com IPs
function gop { uu 'ufw allow 30303 comment eth1';uu 'ufw delete deny 8545';uu "ufw allow from $vpsm to any port 8545 comment geapi";uu "ufw allow from $vpsl to any port 8545 comment geapi"; }
function gcl { uu 'ufw deny  30303 comment eth1';uu 'ufw deny 8545 comment geapi';uu "ufw delete allow from $vpsm to any port 8545";uu "ufw delete allow from $vpsl to any port 8545"; }
function bop { uu 'ufw allow 9000 comment eth2' ;uu 'ufw delete deny 5052'                               ;uu "ufw allow from $vcip to any port 5052 comment bnapi"; }
function bcl { uu 'ufw deny  9000 comment eth2' ;uu 'ufw deny 5052 comment bnapi'                        ;uu "ufw delete allow from $vcip to any port 5052"; }
function vop { uu 'ufw delete deny 5064'        ;uu "ufw allow from $bnip to any port 5064 comment vcmet";uu "ufw allow from $zotc to any port 5064 comment vcmet"; }
function vcl { uu 'ufw deny 5064 comment vcmet' ;uu "ufw delete allow from $bnip to any port 5064"       ;uu "ufw delete allow from $zotc to any port 5064"; }
function fop { uu 'ufw allow 3000/tcp comment grafana'; }
function fcl { uu 'ufw deny  3000/tcp comment grafana'; }

function uu { echo -e "${i}$1${f}";echo $H|sudo -S $1 2>/dev/null; }
function ut { echo -e "${i}$1${f}";echo $H|sudo -S $1 2>/dev/null|tail; }
function un { echo $H|sudo -S $1 1>/dev/null 2>&1; }
function up { echo $H|sudo -S $1 2>/dev/null; }
function jb { uu "journalctl --no-hostname --no-full -f $1"; }
function dr { uu "systemctl daemon-reload"; }

function ge { gop;uu 'ufw reload';uu "systemctl enable $ethg"; }
function be { bop;uu 'ufw reload';uu "systemctl enable $ethb"; }
function ve { vop;uu 'ufw reload';uu "systemctl enable $ethv"; }
function pe { uu "systemctl enable $ethp"; }
function ne { uu "systemctl enable $ethn"; }
function fe { fop;uu 'ufw reload';uu "systemctl enable $ethf"; }

function ga { [ "$(systemctl status $ethg 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethg"; } }
function ba { [ "$(systemctl status $ethb 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethb"; } }
function va { [ "$(systemctl status $ethv 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethv"; } }
function pa { [ "$(systemctl status $ethp 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethp"; } }
function na { [ "$(systemctl status $ethn 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethn"; } }
function fa { [ "$(systemctl status $ethf 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethf"; } }

function gp { [ "$(systemctl status $ethg 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethg"; } }
function bp { [ "$(systemctl status $ethb 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethb"; } }
function vp { [ "$(systemctl status $ethv 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethv"; } }
function pp { [ "$(systemctl status $ethp 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethp"; } }
function np { [ "$(systemctl status $ethn 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethn"; } }
function fp { [ "$(systemctl status $ethf 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethf"; } }

function gd { [ "$(systemctl status $ethg 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethg";gcl;uu 'ufw reload'; } }
function bd { [ "$(systemctl status $ethb 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethb";bcl;uu 'ufw reload'; } }
function vd { [ "$(systemctl status $ethv 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethv";vcl;uu 'ufw reload'; } }
function pd { [ "$(systemctl status $ethp 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethp"; } }
function nd { [ "$(systemctl status $ethn 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethn"; } }
function fd { [ "$(systemctl status $ethf 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethf";fcl;uu 'ufw reload'; } }
function gs {
  if [ -d /var/lib/goethereum ]; then
    g0
    g1
    g2
    if [ "$(echo $g1|grep -i false)" ]; then
      m="GETH SYNCING DONE - PEERCOUNT $g2"
    else
      if [ "$cuip" = "$zotc" ]; then
        r0=$(ssh -p 2020 $bnip "export H=$H;$p0/t6 g0")
      else
        r0=$g0
      fi
      h=$(echo $g1|sed -Ee 's%.*highestBlock: *([0-9]+).*%\1%i')
      c=$(echo $g1|sed -Ee 's%.*currentBlock: *([0-9]+).*%\1%i')
      k=$(echo $g1|sed -Ee 's%.*knownStates: *([0-9]+).*%\1%i')
      p=$(echo $g1|sed -Ee 's%.*pulledStates: *([0-9]+).*%\1%i')
      b=$(echo $H|sudo -S grep -i 'Imported new block headers' /var/log/syslog 2>/dev/null|head -1|cut -d= -f4|cut -d' ' -f1)
      d=$(echo $H|sudo -S grep -i 'Imported new block headers' /var/log/syslog 2>/dev/null|tail -1|cut -d= -f4|cut -d' ' -f1)
      i=$(echo $H|sudo -S grep -i 'Imported new state entries' /var/log/syslog 2>/dev/null|head -1|cut -d= -f4|cut -d' ' -f1)
      t=$(echo $H|sudo -S grep -i 'Imported new state entries' /var/log/syslog 2>/dev/null|tail -1|cut -d= -f4|cut -d' ' -f1)
      m="GETH SYNCING - PEERCOUNT: $g2\nBlocks api: $h ($((h-c)))\tStates api: $k ($((k-p)))\nBlocks log: $d ($((d-b)))\tStates log: $t ($((t-i)))\nFiles size: $(($r0/1000))M ($(((r0-g0)/1000))M)"
    fi
  else
    m="NO GETH HERE ($cuip)"
  fi
}
function g0 { g0=0;[ -d /var/lib/goethereum ] && g0=$(echo $H|sudo -S du -s /var/lib/goethereum 2>/dev/null|cut -f1); }
function g1 { g1=0;[ -d /var/lib/goethereum ] && g1=$(geth attach http://207.180.214.8:8545 --exec eth.syncing); }
function g2 { g2=0;[ -d /var/lib/goethereum ] && g2=$(geth attach http://207.180.214.8:8545 --exec net.peerCount); }

# para tratar home ip change
if [ "$1" = "wv" ] && [ "$cuip" = "$vcip" ]; then
  bnhr=$(up 'ufw show listening'|grep vcmet|grep -v $bnip|sed -e 's%.*\(allow.*\)comment.*%\1%')
  bnhc=$(echo $bnhr|cut -d' ' -f3)
  if [ "$bnhc" != "$zotc" ];then
    un "ufw delete $bnhr"
    un "ufw allow from $zotc to any port 5064 comment vcmet"
    un 'ufw reload'
    up 'ufw status numbered'
  fi
fi
if [ "$1" = "hs" ] && [ "$(grep 'cuip *= *"\$' $p0/t1)" ]; then
  cp $p0/t1 $p0/t1.save
  if [ "$cuip" != "$vpsl" ] && [ "$cuip" != "$vpsm" ] && [ "$cuip" != "$vpss" ] && [ "$cuip" != "$zotc" ]; then
    sed -e "s%cuip=.*%cuip='$vcip'%;s%zotc=.*%zotc='$cuip'%" $p0/t1.save>$p0/t1
    scp -P 2020 $p0/t1 $vcip:$p0
    sed -e "s%cuip=.*%cuip='$cuip'%;s%zotc=.*%zotc='$cuip'%" $p0/t1.save>$p0/t1
    ssh -p 2020 $vcip "export H=$H;$p0/t6 wv"
  else
    sed -e "s%cuip=.*%cuip='$cuip'%" $p0/t1.save>$p0/t1
  fi
fi

# lista servicos
[ "$1" = "ll" ] && { uu "systemctl list-units $pate $patp $patf"; }
# lista portas
[ "$1" = "lp" ] && { netstat -tulpn; }
# peers/records
[ "$1" = "np" ] && { ut "grep -i peercount /var/log/syslog";ut "grep -i peers: /var/log/syslog"; }
[ "$1" = "nr" ] && { ut "grep -i record /var/log/syslog"; }
# outros journal system/lighthouse
[ "$1" = "jj" ] && { jb; }
[ "$1" = "lj" ] && { echo $H|sudo -S grep 'ERROR\|WARN' /var/log/syslog 2>/dev/null; }
[ "$1" = "gs" ] && { gs;echo -e $m; }
[ "$1" = "g0" ] && { g0;echo -e $g0; }
[ "$1" = "ws" ] && { uu "ufw status numbered"; }
[ "$1" = "wa" ] && if [ "$(echo $H|sudo -S ufw status 2>/dev/null|grep -i inactive)" ];then echo -e "${i}ARRANCA FIREWALL${f}";sudo ufw enable; else echo -e "${i}FIREWALL JA ACTIVE${f}";fi
[ "$1" = "wpr" ] && { uu "ufw disable"; }

# journal
[ "$1" = "tj" ] && { jb "-u $pate -u $patp -u $patf"; }
[ "$1" = "ej" ] && { jb "-u $pate"; }
[ "$1" = "mj" ] && { jb "-u $patp -u $patf"; }
[ "$1" = "gj" ] && { jb "-u $ethg"; }
[ "$1" = "bj" ] && { jb "-u $ethb"; }
[ "$1" = "vj" ] && { jb "-u $ethv"; }
[ "$1" = "pj" ] && { jb "-u $ethp"; }
[ "$1" = "nj" ] && { jb "-u $ethn"; }
[ "$1" = "fj" ] && { jb "-u $ethf"; }
# arranca
[ "$1" = "ta" ] && { dr;ga;ba;va;pa;na;fa; }
[ "$1" = "ea" ] && { dr;ga;ba;va; }
[ "$1" = "ma" ] && { dr;pa;na;fa; }
[ "$1" = "ga" ] && { dr;ga; }
[ "$1" = "ba" ] && { dr;ba; }
[ "$1" = "va" ] && { dr;va; }
[ "$1" = "pa" ] && { dr;pa; }
[ "$1" = "na" ] && { dr;na; }
[ "$1" = "fa" ] && { dr;fa; }
# enable
[ "$1" = "te" ] && { dr;ge;be;ve;pe;ne;fe; }
[ "$1" = "ee" ] && { dr;ge;be;ve; }
[ "$1" = "me" ] && { dr;pe;ne;fe; }
[ "$1" = "ge" ] && { dr;ge; }
[ "$1" = "be" ] && { dr;be; }
[ "$1" = "ve" ] && { dr;ve; }
[ "$1" = "pe" ] && { dr;pe; }
[ "$1" = "ne" ] && { dr;ne; }
[ "$1" = "fe" ] && { dr;fe; }
# para
[ "$1" = "tpr" ] && { fp;np;pp;vp;bp;gp; }
[ "$1" = "epr" ] && { vp;bp;gp; }
[ "$1" = "mpr" ] && { fp;np;pp; }
[ "$1" = "fpr" ] && { fp; }
[ "$1" = "npr" ] && { np; }
[ "$1" = "ppr" ] && { pp; }
[ "$1" = "vpr" ] && { vp; }
[ "$1" = "bpr" ] && { bp; }
[ "$1" = "gpr" ] && { gp; }
# disable
[ "$1" = "tds" ] && { fd;nd;pd;vd;bd;gd; }
[ "$1" = "eds" ] && { vd;bd;gd; }
[ "$1" = "mds" ] && { fd;nd;pd; }
[ "$1" = "fds" ] && { fd; }
[ "$1" = "nds" ] && { nd; }
[ "$1" = "pds" ] && { pd; }
[ "$1" = "vds" ] && { vd; }
[ "$1" = "bds" ] && { bd; }
[ "$1" = "gds" ] && { gd; }

if [ -z "$1" ]; then
  c1="\nprimeira letra"
  c1="$c1\nt\t$ethg $ethb $ethv $ethp $ethn $ethf"
  c1="$c1\ne\t$ethg $ethb $ethv"
  c1="$c1\nm\t$ethp $ethn $ethf"
  c1="$c1\ng\t$ethg"
  c1="$c1\nb\t$ethb"
  c1="$c1\nv\t$ethv"
  c1="$c1\np\t$ethp"
  c1="$c1\nn\t$ethn"
  c1="$c1\nf\t$ethf"
  c1="$c1\n"
  c1="$c1\nsegunda letra"
  c1="$c1\na\tarranca"
  c1="$c1\ne\tenable"
  c1="$c1\nj\tjournal"
  c1="$c1\npr\tpara"
  c1="$c1\nds\tdisable"
  c1="$c1\n"
  c1="$c1\noutros"
  c1="$c1\njj\tjournal system"
  c1="$c1\nll\tlista servicos"
  c1="$c1\nlp\tlista portas"
  c1="$c1\nlj\tlista journal ERROR|WARN"
  c1="$c1\nnp\tnode peers"
  c1="$c1\nnr\tnode record"
  c1="$c1\ngs\tgeth syncing"
  c1="$c1\nhs\thome ip set"
  c1="$c1\nwv\tfirewall validator"
  c1="$c1\nws\tfirewall status"
  c1="$c1\nwa\tfirewall arranca"
  c1="$c1\nwpr\tfirewall para"
  echo -e "\n$c1\n"
fi

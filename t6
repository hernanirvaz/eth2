#!/bin/bash

i="\n\e[5m"
f="\e[25m\n"

ethg="eth-geth"
ethb="eth-beacon"
ethv="eth-validator"
ethp="prometheus"
ethn="prometheus-node-exporter"
ethf="grafana-server"
pate='eth-*'
patp='prometheus*'
patf='grafana*'

dtdi="/var/lib/lighthouse"
becn="$dtdi/beacon"
vldt="$dtdi/validators"

# home-old 87.196.199.110
# home-new 89.181.65.217
bnip="207.180.214.8"
bnip="89.181.65.217"
vcip="164.68.107.45"

# open/close api/metrics ports com IPs
function bo { uu "ufw allow 9000 comment eth2";uu "ufw delete deny 5052       ";uu "ufw allow from $vcip to any port 5052 comment bnapi"; }
function bc { uu "ufw deny  9000 comment eth2";uu "ufw deny 5052 comment bnapi";uu "ufw delete allow from $vcip to any port 5052"; }
function vo { uu "ufw delete deny 5064           ";uu "ufw allow from 207.180.214.8 to any port 5064 comment vcmetrics";uu "ufw allow from 89.181.65.217 to any port 5064 comment vcmetrics"; }
function vc { uu "ufw deny 5064 comment vcmetrics";uu "ufw delete allow from 207.180.214.8 to any port 5064";uu "ufw delete allow from 89.181.65.217 to any port 5064"; }
# open/close api/metrics ports sem IPs
# function bo { uu "ufw allow 9000 comment eth2";uu "ufw allow 5052 comment bnapi"; }
# function bc { uu "ufw deny  9000 comment eth2";uu "ufw deny 5052 comment bnapi"; }
# function vo { uu "ufw allow 5064 comment vcmetrics"; }
# function vc { uu "ufw deny 5064 comment vcmetrics"; }
function uu { echo -e "${i}$1${f}";echo $H|sudo -S $1 2>/dev/null; }
function ut { echo -e "${i}$1${f}";echo $H|sudo -S $1|tail 2>/dev/null; }
function jb { uu "journalctl --no-hostname --no-full -f $1"; }
function dr { uu "systemctl daemon-reload"; }

function ge { uu "ufw allow 30303 comment eth1";uu "ufw reload";uu "systemctl enable $ethg"; }
function be { bo;uu "ufw reload";uu "systemctl enable $ethb"; }
function ve { [ -f $vldt/validator_definitions.yml ] && { vo;uu "ufw reload";uu "systemctl enable $ethv"; } }
function pe { uu "systemctl enable $ethp"; }
function ne { uu "systemctl enable $ethn"; }
function fe { uu "ufw allow 3000/tcp comment grafana";uu "ufw reload";uu "systemctl enable $ethf"; }

function ga { [ "$(systemctl status $ethg 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethg"; } }
function ba { [ "$(systemctl status $ethb 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethb"; } }
function va { [ "$(systemctl status $ethv 2>/dev/null|grep -i 'inactive\|failed')" ] && [ -f $vldt/validator_definitions.yml ] && { uu "systemctl start $ethv"; } }
function pa { [ "$(systemctl status $ethp 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethp"; } }
function na { [ "$(systemctl status $ethn 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethn"; } }
function fa { [ "$(systemctl status $ethf 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethf"; } }

function gp { [ "$(systemctl status $ethg 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethg"; } }
function bp { [ "$(systemctl status $ethb 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethb"; } }
function vp { [ "$(systemctl status $ethv 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethv"; } }
function pp { [ "$(systemctl status $ethp 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethp"; } }
function np { [ "$(systemctl status $ethn 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethn"; } }
function fp { [ "$(systemctl status $ethf 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethf"; } }

function gd { [ "$(systemctl status $ethg 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethg";uu "ufw deny 30303 comment eth1";uu "ufw reload"; } }
function bd { [ "$(systemctl status $ethb 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethb";bc;uu "ufw reload"; } }
function vd { [ "$(systemctl status $ethv 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethv";vc;uu "ufw reload"; } }
function pd { [ "$(systemctl status $ethp 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethp"; } }
function nd { [ "$(systemctl status $ethn 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethn"; } }
function fd { [ "$(systemctl status $ethf 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethf";uu "ufw deny 3000/tcp comment grafana";uu "ufw reload"; } }

# beacon geth external/internal eth1
if [ "$1" = "bx" ] && [ -f /etc/systemd/system/$ethg.service ] && [ -f /etc/systemd/system/$ethb.service ]; then
  echo -e "${i}TROCA BEACON EXTERNAL/INTERNAL ETH1${f}"
  [ "$(systemctl status $ethv 2>/dev/null|grep -i loaded)" ] && uu "systemctl stop $ethv"
  [ "$(systemctl status $ethb 2>/dev/null|grep -i loaded)" ] && uu "systemctl stop $ethb"
  cp /etc/systemd/system/$ethb.service $ethb.save
  if grep -q "https:\S* " $ethb.save; then
    sed -e "s%https:\S* %http://127.0.0.1:8545 %" $ethb.save > /etc/systemd/system/$ethb.service
  else
    sed -e "s%http:\S*8545 %$E %" $ethb.save > /etc/systemd/system/$ethb.service
  fi
  dr
  [ "$(systemctl status $ethb 2>/dev/null|grep -i inactive)" ] && uu "systemctl start $ethb"
  [ "$(systemctl status $ethv 2>/dev/null|grep -i inactive)" ] && uu "systemctl start $ethv"
  rm $ethb.save
fi
# lista servicos
[ "$1" = "ll" ] && { uu "systemctl list-units $pate $patp $patf"; }
# lista portas
[ "$1" = "lp" ] && { netstat -tulpn; }
# peers/records
[ "$1" = "np" ] && { ut "grep -i peercount /var/log/syslog";ut "grep -i peers: /var/log/syslog"; }
[ "$1" = "nr" ] && { ut "grep -i record /var/log/syslog"; }
# outros journal system/lighthouse
[ "$1" = "jj" ] && { jb; }
[ "$1" = "lj" ] && { echo $H|sudo -S grep 'ERROR\|WARN' /var/log/syslog 2>/dev/null; }
[ "$1" = "ws" ] && { uu "ufw status numbered"; }
[ "$1" = "wa" ] && if [ "$(echo $H|sudo -S ufw status 2>/dev/null|grep -i inactive)" ];then echo -e "${i}ARRANCA FIREWALL${f}";sudo ufw enable; else echo -e "${i}FIREWALL JA ACTIVE${f}";fi
[ "$1" = "wpr" ] && { uu "ufw disable"; }

# journal
[ "$1" = "tj" ] && { jb "-u $pate -u $patp -u $patf"; }
[ "$1" = "ej" ] && { jb "-u $pate"; }
[ "$1" = "mj" ] && { jb "-u $patp -u $patf"; }
[ "$1" = "gj" ] && { jb "-u $ethg"; }
[ "$1" = "bj" ] && { jb "-u $ethb"; }
[ "$1" = "vj" ] && { jb "-u $ethv"; }
[ "$1" = "pj" ] && { jb "-u $ethp"; }
[ "$1" = "nj" ] && { jb "-u $ethn"; }
[ "$1" = "fj" ] && { jb "-u $ethf"; }
# arranca
[ "$1" = "ta" ] && { dr;ga;ba;va;pa;na;fa; }
[ "$1" = "ea" ] && { dr;ga;ba;va; }
[ "$1" = "ma" ] && { dr;pa;na;fa; }
[ "$1" = "ga" ] && { dr;ga; }
[ "$1" = "ba" ] && { dr;ba; }
[ "$1" = "va" ] && { dr;va; }
[ "$1" = "pa" ] && { dr;pa; }
[ "$1" = "na" ] && { dr;na; }
[ "$1" = "fa" ] && { dr;fa; }
# enable
[ "$1" = "te" ] && { dr;ge;be;ve;pe;ne;fe; }
[ "$1" = "ee" ] && { dr;ge;be;ve; }
[ "$1" = "me" ] && { dr;pe;ne;fe; }
[ "$1" = "ge" ] && { dr;ge; }
[ "$1" = "be" ] && { dr;be; }
[ "$1" = "ve" ] && { dr;ve; }
[ "$1" = "pe" ] && { dr;pe; }
[ "$1" = "ne" ] && { dr;ne; }
[ "$1" = "fe" ] && { dr;fe; }
# para
[ "$1" = "tpr" ] && { fp;np;pp;vp;bp;gp; }
[ "$1" = "epr" ] && { vp;bp;gp; }
[ "$1" = "mpr" ] && { fp;np;pp; }
[ "$1" = "fpr" ] && { fp; }
[ "$1" = "npr" ] && { np; }
[ "$1" = "ppr" ] && { pp; }
[ "$1" = "vpr" ] && { vp; }
[ "$1" = "bpr" ] && { bp; }
[ "$1" = "gpr" ] && { gp; }
# disable
[ "$1" = "tds" ] && { fd;nd;pd;vd;bd;gd; }
[ "$1" = "eds" ] && { vd;bd;gd; }
[ "$1" = "mds" ] && { fd;nd;pd; }
[ "$1" = "fds" ] && { fd; }
[ "$1" = "nds" ] && { nd; }
[ "$1" = "pds" ] && { pd; }
[ "$1" = "vds" ] && { vd; }
[ "$1" = "bds" ] && { bd; }
[ "$1" = "gds" ] && { gd; }

if [ -z "$1" ]; then
  c1="\nprimeira letra"
  c1="$c1\nt\t$ethg $ethb $ethv $ethp $ethn $ethf"
  c1="$c1\ne\t$ethg $ethb $ethv"
  c1="$c1\nm\t$ethp $ethn $ethf"
  c1="$c1\ng\t$ethg"
  c1="$c1\nb\t$ethb"
  c1="$c1\nv\t$ethv"
  c1="$c1\np\t$ethp"
  c1="$c1\nn\t$ethn"
  c1="$c1\nf\t$ethf"
  c1="$c1\n"
  c1="$c1\nsegunda letra"
  c1="$c1\na\tarranca"
  c1="$c1\ne\tenable"
  c1="$c1\nj\tjournal"
  c1="$c1\npr\tpara"
  c1="$c1\nds\tdisable"
  c1="$c1\n"
  c1="$c1\noutros"
  c1="$c1\njj\tjournal system"
  c1="$c1\nll\tlista servicos"
  c1="$c1\nlp\tlista portas"
  c1="$c1\nlj\tlista journal ERROR|WARN"
  c1="$c1\nnp\tnode peers"
  c1="$c1\nnr\tnode record"
  c1="$c1\nbx\tbeacon external/internal eth1"
  c1="$c1\nws\tfirewall status"
  c1="$c1\nwa\tfirewall arranca"
  c1="$c1\nwpr\tfirewall para"
  echo -e "\n$c1\n"
fi

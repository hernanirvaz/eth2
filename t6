#!/bin/bash

source /home/eth/eth2/t1

# Plex Media Server
function rxw { uu "ufw$2 allow from 192.168.8.0/24 $1"; }
function xop { uu 'ufw delete deny 32400             ';rxw 'to any port 32400 comment plex'; }
function xcl { uu 'ufw        deny 32400 comment plex';rxw 'to any port 32400 '   ' delete'; }
function xe { xop;uu 'ufw reload';uu "systemctl enable $plex"; }
function xa { [ "$(systemctl status $plex 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $plex"; } }
function xp { [ "$(systemctl status $plex 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $plex"; } }
function xd { uu "systemctl disable $plex";xcl;uu 'ufw reload'; }
# Transmission BitTorrent Daemon
function rop { uu 'ufw allow 51413 comment torrent';rxw 'to any port 9091 comment torrent'; }
function rcl { uu 'ufw deny  51413 comment torrent';rxw 'to any port 9091'       ' delete'; }
function re { rop;uu 'ufw reload';uu "systemctl enable $trrt"; }
function ra { [ "$(systemctl status $trrt 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $trrt"; } }
function rp { [ "$(systemctl status $trrt 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $trrt"; } }
function rd { uu "systemctl disable $trrt";rcl;uu 'ufw reload'; }
# Bind9
function sop { uu 'ufw delete deny 53            ';rxw 'to any port 53 comment dns'; }
function scl { uu 'ufw        deny 53 comment dns';rxw 'to any port 53 '  ' delete'; }
function se { sop;uu 'ufw reload';uu "systemctl enable $dnsd"; }
function sa { [ "$(systemctl status $dnsd 2>/dev/null|grep -i disabled)" ] || { [ "$(systemctl status $dnsd 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $dnsd"; } } }
function sp { [ "$(systemctl status $dnsd 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $dnsd"; } }
function sd { uu "systemctl disable $dnsd";scl;uu 'ufw reload'; }

function gfw { if [ "$cust" = "hrv" ];then uu "ufw$2 allow from $zip2 $1";uu "ufw$2 allow from $zip3 $1";else uu "ufw$2 allow from $vip1 $1";uu "ufw$2 allow from $vip3 $1";fi; }
function gop { uu 'ufw allow 30303 comment eth1';uu 'ufw delete deny 8545              ';gfw 'to any port 8545 comment geapi'; }
function gcl { uu 'ufw deny  30303 comment eth1';uu 'ufw        deny 8545 comment geapi';gfw 'to any port 8545'     ' delete'; }
function ofw { if [ "$cust" = "hrv" ];then uu "ufw$2 allow from $zip2 $1";uu "ufw$2 allow from $zip3 $1";else uu "ufw$2 allow from $vip1 $1";uu "ufw$2 allow from $vip3 $1";fi; }
function oop { uu 'ufw allow 30303 comment eth1';uu 'ufw delete deny 8545              ';gfw 'to any port 8545 comment oeapi'; }
function ocl { uu 'ufw deny  30303 comment eth1';uu 'ufw        deny 8545 comment oeapi';gfw 'to any port 8545'     ' delete'; }
function bfw { if [ "$cust" = "hrv" ];then uu "ufw$2 allow from $zip3 $1";else uu "ufw$2 allow from $vip3 $1";fi; }
function bop { uu 'ufw allow 9000 comment eth2';uu 'ufw delete deny 5052              ';`# bfw 'to any port 5052 comment bnapi'` ; }
function bcl { uu 'ufw deny  9000 comment eth2';uu 'ufw        deny 5052 comment bnapi';`# bfw 'to any port 5052'     ' delete'` ; }
function vfw { if [ "$cust" = "hrv" ];then uu "ufw$2 allow from $zip1 $1";else uu "ufw$2 allow from $vip1 $1";fi; }
function vop { uu 'ufw delete deny 5064              ';vfw 'to any port 5064 comment vcmet'; }
function vcl { uu 'ufw        deny 5064 comment vcmet';vfw 'to any port 5064'     ' delete'; }
function fop { uu 'ufw allow 3000/tcp comment grafana'; }
function fcl { uu 'ufw deny  3000/tcp                '; }

function uu { echo -e "${i}$1${f}";echo $H|sudo -S $1 2>/dev/null; }
function us { echo $H|sudo -S $1 2>/dev/null; }
function ut { echo -e "${i}$1${f}";echo $H|sudo -S $1 2>/dev/null|tail -n $2; }
function jb { uu "journalctl --no-hostname --no-full -f $1"; }
function dr { echo $H|sudo -S systemctl daemon-reload 2>/dev/null; }

function ge { gop;uu 'ufw reload';uu "systemctl enable $ethg"; }
function oe { oop;uu 'ufw reload';uu "systemctl enable $etho"; }
function be { bop;uu 'ufw reload';uu "systemctl enable $ethb"; }
function ve { [ ! -f $dtdi/vc_lock ] && { vop;uu 'ufw reload';uu "systemctl enable $ethv"; } }
function pe { uu 'ufw reload';uu "systemctl enable $ethp"; }
function ne { uu 'ufw reload';uu "systemctl enable $ethn"; }
function fe { fop;uu 'ufw reload';uu "systemctl enable $ethf"; }
function ga { [ "$(systemctl status $ethg 2>/dev/null|grep -i 'inactive\|failed')" ] && [ -d /var/lib/goethereum   ] && { uu "systemctl start $ethg"; } }
function oa { [ "$(systemctl status $etho 2>/dev/null|grep -i 'inactive\|failed')" ] && [ -d /var/lib/openethereum ] && { uu "systemctl start $etho"; } }
function ba { [ "$(systemctl status $ethb 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethb"; } }
function va {
  if [ "$(systemctl status $ethv 2>/dev/null|grep -i 'inactive\|failed')" ]; then
    if [ -f $dtdi/vc_lock ]; then
      if [ -f /home/eth/slashing_protection.sqlite ]; then
        echo $H|sudo -S cp /home/eth/slashing_protection.sqlite $vldt 2>/dev/null
        sudo chown eth3:eth3 $vldt/slashing_protection.sqlite
        sudo chmod 600 $vldt/slashing_protection.sqlite
      fi
    else
      uu "systemctl start $ethv"
      rm $dtdi/vc_slash
    fi
  fi
}
function pa { [ "$(systemctl status $ethp 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethp"; } }
function na { [ "$(systemctl status $ethn 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethn"; } }
function fa { [ "$(systemctl status $ethf 2>/dev/null|grep -i 'inactive\|failed')" ] && { uu "systemctl start $ethf"; } }
function gp { [ "$(systemctl status $ethg 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethg"; } }
function op { [ "$(systemctl status $etho 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $etho"; } }
function bp { [ "$(systemctl status $ethb 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethb"; } }
function vp { [ "$(systemctl status $ethv 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethv";touch $dtdi/vc_slash; } }
function pp { [ "$(systemctl status $ethp 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethp"; } }
function np { [ "$(systemctl status $ethn 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethn"; } }
function fp { [ "$(systemctl status $ethf 2>/dev/null|grep -i loaded)" ] && { uu "systemctl stop $ethf"; } }
function gd { uu "systemctl disable $ethg";gcl;uu 'ufw reload'; }
function od { uu "systemctl disable $etho";ocl;uu 'ufw reload'; }
function bd { uu "systemctl disable $ethb";bcl;uu 'ufw reload'; }
function vd { uu "systemctl disable $ethv";vcl;uu 'ufw reload';touch $dtdi/vc_lock; }
function pd { [ "$(systemctl status $ethp 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethp"; } }
function nd { [ "$(systemctl status $ethn 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethn"; } }
function fd { [ "$(systemctl status $ethf 2>/dev/null|grep -i loaded)" ] && { uu "systemctl disable $ethf";fcl;uu 'ufw reload'; } }
function g0 { g0=0;[ -d /var/lib/goethereum ] && g0=$(echo $H|sudo -S du -s /var/lib/goethereum 2>/dev/null|cut -f1); }
function g1 { g1=0;[ "$(systemctl status $ethg 2>/dev/null|grep -i running)" ] && { if [ "$cunm" = "$znm1" ];then g="http://$zip1:8545";else g="http://$vip1:8545";fi;g1=$(geth attach $g --exec eth.syncing); }; }
function g2 { g2=0;[ "$(systemctl status $ethg 2>/dev/null|grep -i running)" ] && { if [ "$cunm" = "$znm1" ];then g="http://$zip1:8545";else g="http://$vip1:8545";fi;g2=$(geth attach $g --exec net.peerCount); }; }
function g7 {
  t=-1;n=0;g7='OK'
  if [ "$(systemctl status $ethg 2>/dev/null|grep -i running)" ] && [ -f $p5 ]; then
    n=$(echo $H|sudo -S grep -i 'imported new' $p4 2>/dev/null|wc -l)
    t=$(grep -i blocks: $p5|tail -n1|sed 's%.*blocks: *\([0-9]*\).*%\1%')
  fi
  [ "$n" -eq "$t" ] && g7='BK'
}
function o1 {
  o1='{"currentBlock":"0xbe7edd","highestBlock":"0xbe82b9","startingBlock":"0xbe7c7a","warpChunksAmount":null,"warpChunksProcessed":null}'
  if [ -d /var/lib/openethereum ]; then
    if [ "$cunm" = "$znm1" ];then o5="POST $zip1:8545";else o5="POST $vip1:8545";fi
    o1=$(curl --data '{"method":"eth_syncing","params":[],"id":1,"jsonrpc":"2.0"}' -H 'Content-Type: application/json' -sX $o5|sed 's%.*result":\(.*\),.*%\1%')
  fi
}
function o2 {
  o2=0
  if [ -d /var/lib/openethereum ]; then
    if [ "$cunm" = "$znm1" ];then o5="POST $zip1:8545";else o5="POST $vip1:8545";fi
    o6=$(curl --data '{"method":"net_peerCount","params":[],"id":1,"jsonrpc":"2.0"}' -H 'Content-Type: application/json' -sX $o5|sed 's%.*result":"0x\([a-z0-9]*\)".*%\1%')
    o2=$(echo "obase=10; ibase=16; ${o6^^}"|bc)
  fi
}
function o7 {
  t=-1;n=0;o7='OK'
  if [ "$(systemctl status $etho 2>/dev/null|grep -i running)" ] && [ -f $p6 ]; then
    n=$(echo $H|sudo -S grep -i 'Imported  *#' $p4 2>/dev/null|wc -l)
    t=$(grep -i blocks: $p6|tail -n1|sed 's%.*blocks: *\([0-9]*\).*%\1%')
  fi
  [ "$n" -eq "$t" ] && o7='BK'
}
function b2 { b2=0;[ -d /var/lib/lighthouse ] && b2=$(echo $H|sudo -S grep -i 'lighthouse.*peers:' $p4 2>/dev/null|tail -n1|sed 's%.*peers: *\([0-9]*\).*%\1%'); }
function b7 {
  n=$(echo "$H"|sudo -S grep "lighthouse.$bpid" $p4 2>/dev/null|tail -n $(($hors*200)))
  w=$(echo "$n"|grep -i 'processed block'|wc -l)
  q=$(echo "$n"|grep -i 'block received' |wc -l)
  r=$(echo "$n"|grep -v ' INFO '|wc -l)
  t=$(echo "$n"|grep    ' INFO '|wc -l)
  p=$(echo "$H"|sudo -S grep -i 'published block' $p4 2>/dev/null|wc -l)
  z=0;for v in $(echo $H|sudo -S grep -i 'attestation(s) missing' $p4 2>/dev/null|sed 's%.*validators: *\[\(.*\)\].*%\1%;s%,%%g');do y=($v);z=$((z+${#y[@]}));done
  h=0;for v in $(echo $H|sudo -S grep -i 'attestation(s) failed'  $p4 2>/dev/null|sed 's%.*validators: *\[\(.*\)\].*%\1%;s%,%%g');do y=($v);h=$((h+${#y[@]}));done
  k=0;for v in $(echo $H|sudo -S grep -i 'attestation(s) had'     $p4 2>/dev/null|sed 's%.*validators: *\[\(.*\)\].*%\1%;s%,%%g');do y=($v);k=$((k+${#y[@]}));done
  a=0;for v in $(echo $H|sudo -S grep -i 'attestation(s) success' $p4 2>/dev/null|sed 's%.*validators: *\[\(.*\)\].*%\1%;s%,%%g');do y=($v);a=$((a+${#y[@]}));done
  n=0;b7='OK'
  [ "$q"  -gt '100' ] && n=$(($n+10*$w/$q))
  [ "$a"  -gt '100' ] && n=$(($n+15*(10*$z+$h+$k)/$a))
  [ "$t"  -gt '100' ] && n=$(($n+30*$r/$t))
  if [ "$n" -ge $l1rs ]; then
    if [ "$n" -ge $l2rs ]; then
      [ -f $p2 ] && [ "$(tail -n $l2rs $p2|cut -d' ' -f1|sort -u)" = "BEAC" ] && b7='BK'
    else
      [ -f $p2 ] && [ "$(tail -n $hors $p2|cut -d' ' -f1|sort -u)" = "BEAC" ] && b7='BK'
    fi
  fi
}
function gs {
  if [ -d /var/lib/goethereum ] && ([ "$cunm" = "$vnm1" ] || [ "$cunm" = "$znm1" ]); then
    g0;g1;g2
    if [ "$(echo $g1|grep -i false)" ]; then
      m="SYNCED - PEERCOUNT $g2"
    else
      g5=$(echo $H|sudo -S grep -i 'new block headers' $p4 2>/dev/null)
      g6=$(echo $H|sudo -S grep -i 'new state entries' $p4 2>/dev/null)
      h=$(echo  $g1 |sed -Ee 's%.*highestBlock: *([0-9]+).*%\1%i')
      c=$(echo  $g1 |sed -Ee 's%.*currentBlock: *([0-9]+).*%\1%i')
      k=$(echo  $g1 |sed -Ee 's%.*knownStates: *([0-9]+).*%\1%i')
      p=$(echo  $g1 |sed -Ee 's%.*pulledStates: *([0-9]+).*%\1%i')
      b=$(echo "$g5"|head -1|cut -d= -f4|cut -d' ' -f1)
      d=$(echo "$g5"|tail -1|cut -d= -f4|cut -d' ' -f1)
      y=$(echo "$g6"|head -1|cut -d= -f4|cut -d' ' -f1)
      t=$(echo "$g6"|tail -1|cut -d= -f4|cut -d' ' -f1)
      m="SYNCING - PEERCOUNT: $g2\nBlocks api: $h ($((h-c)))\tStates api: $k ($((k-p)))\nBlocks log: $d ($((d-b)))\tStates log: $t ($((t-y))))"
    fi
  else
    m="NOT HERE ($cunm)"
  fi
}
function rq { echo -e "\nresolvectl query ${1:-pt.archive.ubuntu.com}";resolvectl query "${1:-pt.archive.ubuntu.com}"; }
function rs { echo -e "${i}RESET NETPLAN & SYSTEMD-RESOLVED${f}";echo $H|sudo -S netplan apply 2>/dev/null;sp;sudo systemctl stop systemd-resolved;sa;sudo systemctl start systemd-resolved; }
function cr {
  if [ "$cunm" = "$znm1" ] || [ "$cunm" = "$znm2" ] || [ "$cunm" = "$znm3" ]; then
    if [ "$(ip route show|grep 'default via'|cut -d' ' -f3)" = "192.168.8.1" ];then m=3; else m=1;fi
    echo -e "${i}CHANGE ROUTE 192.168.8.${m}"
    sed -e "s%via:.*%via: 192.168.8.$m%" /etc/netplan/00-installer-config.yaml > ~/00-installer-config.save
    echo $H|sudo -S mv ~/00-installer-config.save /etc/netplan/00-installer-config.yaml 2>/dev/null
    sudo chown root:root /etc/netplan/00-installer-config.yaml 
    sudo chmod 644 /etc/netplan/00-installer-config.yaml 
    echo $H|sudo -S netplan apply 2>/dev/null
    sp
    sudo systemctl stop systemd-resolved
    sa
    sudo systemctl start systemd-resolved
  fi
}
function ds { echo -e "${i}RESET DNS & SYSTEMD-RESOLVED${f}";sp;sudo systemctl stop systemd-resolved;sa;sudo systemctl start systemd-resolved; }
function sr { echo -e "ROUTES\t\t" $(ip route show|grep 'default via'|grep -v 'linkdown'|cut -d' ' -f3); }
function sf {
  m=$(ip a|grep 'state UP'|cut -d: -f2)
  echo -e "DNS\t\t" $(resolvectl|grep 'Current DNS'|cut -d' ' -f6)
  for n in $m;do echo -e "$n\t\t" $(resolvectl dns|grep $n|cut -d' ' -f4-6);done
}
function gk {
  g1;g2;g7
  if [ "$(echo $g1|grep -i false)" ];then m='SYC';else m='NSY';fi
  m="$g7 $m $(date --rfc-3339=seconds)"
  m="$m nodes: $(printf '%2i' ${g2:-0}) blocks: $(printf '%4i' $n)"
}
function ok {
  o1;o2;o7
  if [ "$(echo $o1|grep -i false)" ];then m='SYC';else m='NSY';fi
  m="$o7 $m $(date --rfc-3339=seconds)"
  m="$m nodes: $(printf '%2i' ${o2:-0}) blocks: $(printf '%4i' $n)"
}
function grs {
  if [ $1 -ne 0 ]; then
    cp /etc/systemd/system/$ethg.service ~/$ethg.save
    g4=$(grep maxpeers ~/$ethg.save|sed 's%.*maxpeers \([0-9]*\).*%\1%')
    g4=$(($g4+$1))
    [ $g4 -ge 5 ] && [ $g4 -le 15 ] && sed "s%--maxpeers [0-9]*%--maxpeers $g4%" ~/$ethg.save > /etc/systemd/system/$ethg.service
  fi
  resolvectl query smtp.gmail.com 2>/dev/null 1>&2
  echo $H|sudo -S systemctl stop  $ethg   2>/dev/null
  echo $H|sudo -S systemctl daemon-reload 2>/dev/null;sleep 30s
  echo $H|sudo -S systemctl start $ethg   2>/dev/null
  echo -e "GETH RESTAR $(date --rfc-3339=seconds)" >> $p5
}
function ors {
  if [ $1 -ne 0 ]; then
    cp /etc/systemd/system/$etho.service ~/$etho.save
    o4=$(grep max-peers ~/$etho.save|sed 's%.*max-peers=\([0-9]*\).*%\1%')
    o4=$(($o4+$1))
    [ $o4 -ge 10 ] && [ $o4 -le 15 ] && sed "s%--max-peers=[0-9]*%--max-peers=$o4%" ~/$etho.save > /etc/systemd/system/$etho.service
  fi
  resolvectl query smtp.gmail.com 2>/dev/null 1>&2
  echo $H|sudo -S systemctl stop  $etho   2>/dev/null
  echo $H|sudo -S systemctl daemon-reload 2>/dev/null;sleep 30s
  echo $H|sudo -S systemctl start $etho   2>/dev/null
  echo -e "OETH RESTAR $(date --rfc-3339=seconds)" >> $p6
}
function bk {
  t=0;y=0
  for v in $(echo $H|sudo -S grep -i 'inclusion_lag: [1-9][0-9]*' $p4 2>/dev/null|sed 's%.*inclusion_lag: *\([0-9]*\).*%\1%')
  do y=$(($y+1));t=$(($t+$v))
  done
  x=0
  [ "$y" -gt 0 ] && x=$(($t/$y))
  t=0;y=0
  for v in $(echo $H|sudo -S grep -i 'src: gossip' $p4 2>/dev/null|sed 's%.*delay_ms: *\([0-9]*\).*%\1%')
  do y=$(($y+1));t=$(($t+$v))
  done
  j=0
  [ "$y" -gt 0 ] && j=$(($t/$y))
  b2;b7
  dt=$(date --rfc-3339=seconds)
  bho
}
function bho {
  b=$(echo "scale=0;($p*$rblk+$a*$ratt)*$rate/1000000000"|bc)
  d=$(echo "scale=2;($z*$pmis+$h*$pmat+$k*$pdly)*$rate/1000000000"|bc)
  m="$b7 $(printf '%3i' $n) $dt"
  m="$m reward_penalty: $(printf '%3i' $b) $(printf '%3.2f' $d)"
  m="$m attestations_blocks: $(printf '%4i' $a) $(printf '%1i' $p)"
  m="$m erros: $(printf '%3i' $z) $(printf '%3i' $h) $(printf '%3i' $k) $(printf '%3i' $w) $(printf '%3i' $q) $(printf '%3i' $r) $(printf '%4i' $t)"
  m="$m nodes: $(printf '%2i' ${b2:-0})"
  m="$m avg_delays: $(printf '%2i' $x) $(printf '%4i' $j)"
}
function bhr {
  [ -f ${p2}new ] && rm ${p2}new 
  [ -f ${p3}new ] && rm ${p3}new 

  while read -a v;do
    # BEAC OK 0 2021-09-27 23:58:02+01:00 reward_penalty: 287 4.46 attestations_blocks: 4212 0 erros: 0 100 115 0 556 16 3584 nodes: 54 avg_delays: 6 782
    dt="${v[3]} ${v[4]}"
    b7=${v[1]}
    b2=${v[20]} # nodes
    n=${v[2]}
    a=${v[9]}   # attestations
    p=${v[10]}  # blocks
    z=${v[12]}  # erros missing
    h=${v[13]}  # erros failed
    k=${v[14]}  # erros had
    w=${v[15]}  # processed block
    q=${v[16]}  # block received
    r=${v[17]}  # not INFO
    t=${v[18]}  #     INFO
    x=${v[22]}  # avg_delays
    j=${v[23]}
    bho
    echo -e "${v[0]} $m" >> ${p2}new
  done <<< $(cat $p2)

  v1=0;v2=0
  while read -a o;do
    # BEAC 12 16 2021-10-31 19:41:54+00:00 ldp: 3063 42 30 cnt: 1008 0 1008 0 995 0 0 avg: 1.91 0.00 2.09 0.00 1.65 0.00 0.00 1.89
    h1="${o[3]}"
    h2="23:58"
    h9=$(grep -n "$h1 $h2" ${p2}new|cut -d: -f1)
    h3=$(head -n  $h9      ${p2}new|grep "BEAC.*$h2"|sort -k8.1n|grep -n $h1|cut -d: -f1)
    h4=${o[7]}
    v1=$((h3+v1))
    v2=$((1+v2))
    v3=$(printf '%.0f' $(echo "scale=5;$v1/$v2"|bc))
    v4=${o[8]}
    dt="${o[3]} ${o[4]}"
    bm0
    while read -a v;do bm1;done <<< $(head -n$h9 ${p2}new|grep 'BEAC')
    bm2
    bm3 $h9
    echo -e "${o[0]} $m" >> ${p3}new
  done <<< $(cat $p3)
}
function bm0 {
  n00=0;n50=0;n45=0;n40=0;n35=0;n30=0;n25=0;n20=0
  c00=0;c50=0;c45=0;c40=0;c35=0;c30=0;c25=0;c20=0
  a00=0;a50=0;a45=0;a40=0;a35=0;a30=0;a25=0;a20=0
  z00=0;z50=0;z45=0;z40=0;z35=0;z30=0;z25=0;z20=0
  k00=0;k50=0;k45=0;k40=0;k35=0;k30=0;k25=0;k20=0
}
function bm1 {
  v13=$((10#${v[13]}));v14=$((10#${v[14]}));v12=$((10#${v[12]}));v20=$((10#${v[20]}))
  if [ $v20 -ge 25 ];then
    if [ $v20 -ge 30 ];then
      if [ $v20 -ge 35 ];then
        if [ $v20 -ge 40 ];then
          if [ $v20 -ge 45 ];then
            if [ $v20 -ge 50 ]
            then z50=$((z50+v13));n50=$((n50+v14));k50=$((k50+v12));c50=$((c50+1))
            else z45=$((z45+v13));n45=$((n45+v14));k45=$((k45+v12));c45=$((c45+1))
            fi
          else z40=$((z40+v13));n40=$((n40+v14));k40=$((k40+v12));c40=$((c40+1))
          fi
        else z35=$((z35+v13));n35=$((n35+v14));k35=$((k35+v12));c35=$((c35+1))
        fi
      else z30=$((z30+v13));n30=$((n30+v14));k30=$((k30+v12));c30=$((c30+1))
      fi
    else z25=$((z25+v13));n25=$((n25+v14));k25=$((k25+v12));c25=$((c25+1))
    fi
  else z20=$((z20+v13));n20=$((n20+v14));k20=$((k20+v12));c20=$((c20+1))
  fi
}
function bm2 {
  c00=$((c20+c25+c30+c35+c40+c45+c50))
  z00=$((z20+z25+z30+z35+z40+z45+z50))
  n00=$((n20+n25+n30+n35+n40+n45+n50))
  k00=$((k20+k25+k30+k35+k40+k45+k50))
  [ $c50 -gt 0 ] && a50=$(echo "scale=2;($k50*$pmis+$z50*$pmat+$n50*$pdly)/$c50*$rate/1000000000"|bc)
  [ $c45 -gt 0 ] && a45=$(echo "scale=2;($k45*$pmis+$z45*$pmat+$n45*$pdly)/$c45*$rate/1000000000"|bc)
  [ $c40 -gt 0 ] && a40=$(echo "scale=2;($k40*$pmis+$z40*$pmat+$n40*$pdly)/$c40*$rate/1000000000"|bc)
  [ $c35 -gt 0 ] && a35=$(echo "scale=2;($k35*$pmis+$z35*$pmat+$n35*$pdly)/$c35*$rate/1000000000"|bc)
  [ $c30 -gt 0 ] && a30=$(echo "scale=2;($k30*$pmis+$z30*$pmat+$n30*$pdly)/$c30*$rate/1000000000"|bc)
  [ $c25 -gt 0 ] && a25=$(echo "scale=2;($k25*$pmis+$z25*$pmat+$n25*$pdly)/$c25*$rate/1000000000"|bc)
  [ $c20 -gt 0 ] && a20=$(echo "scale=2;($k20*$pmis+$z20*$pmat+$n20*$pdly)/$c20*$rate/1000000000"|bc)
  [ $c00 -gt 0 ] && a00=$(echo "scale=2;($k00*$pmis+$z00*$pmat+$n00*$pdly)/$c00*$rate/1000000000"|bc)
}
function bm3 {
  m="$(printf '%2i' $v3) $(printf '%3i' $h3) $dt"
  m="$m ldp: $(printf '%10i' ${1:-$rplg}) $(printf '%5i' $h4) $(printf '%2i' $v4)"
  m="$m cnt: $(printf '%5i'   $c50) $(printf '%5i'   $c45) $(printf '%5i'   $c40) $(printf '%5i'   $c35) $(printf '%5i'   $c30) $(printf '%5i'   $c25) $(printf '%5i'   $c20)"
  m="$m avg: $(printf '%3.2f' $a50) $(printf '%3.2f' $a45) $(printf '%3.2f' $a40) $(printf '%3.2f' $a35) $(printf '%3.2f' $a30) $(printf '%3.2f' $a25) $(printf '%3.2f' $a20) $(printf '%6.2f' $a00)"
}
function bm {
  bm0
  [ -f $p2 ] && while read -a v;do bm1;done <<< $(grep BEAC $p2)
  bm2
  bo
  v1=0;v2=0
  [ -f $p3 ] && while read -a v;do v1=$((${v[2]}+v1));v2=$((1+v2));done <<< $(cat $p3)
  v3=$(printf '%.0f' $(echo "scale=5;($v1+$h3)/(1+$v2)"|bc))
  v4=$(systemctl status eth-beacon|grep target-peers|sed 's%.*target-peers \([0-9]*\).*%\1%')
  dt=$(date --rfc-3339=seconds)
  bm3
}
function cpu {
  h5=$(echo $H|sudo -S grep 'e above threshold' $p4 2>/dev/null|head -n1|sed 's%.* \([0-9]*:[0-9]*:[0-9]*\).*%\1%');if [ "$h5" ];then h5="throttled: $h5";else h5='';fi
  h6=$(echo $H|sudo -S grep 'ture/speed normal' $p4 2>/dev/null|tail -n1|sed 's%.* \([0-9]*:[0-9]*:[0-9]*\).*%\1%');if [ "$h6" ];then h6="ok: $h6"       ;else h6='';fi
  h7=0
  h8=0
  if [ "$(which sensors)" ]; then
    for v in $(sensors|grep 'Package\|Core'|sed 's%.*: *\([-+][0-9][0-9]*\.[0-9]*\).*%\1%')
    do h7=$((h7+1));h8=$(echo "scale=1;$h8$v"|bc)
    done
  else
    h7=1
  fi
}
function cpd {
  echo -e "TEMP $(printf '%5.1f' $(echo "scale=1;$h8/$h7"|bc))C $(date --rfc-3339=seconds) $h5 $h6"
}
function gst {
  echo "GETH $(printf '%6s' $(systemctl status $ethg|grep Memory:|sed 's%.*Memory: \(.*\)%\1%')) $(date --rfc-3339=seconds) status: $(systemctl status $ethg|grep Active:|sed 's%.*Active: \(.*\)%\1%')"
}
function ost {
  echo "OETH $(printf '%6s' $(systemctl status $etho|grep Memory:|sed 's%.*Memory: \(.*\)%\1%')) $(date --rfc-3339=seconds) status: $(systemctl status $etho|grep Active:|sed 's%.*Active: \(.*\)%\1%')"
}
function bst {
  echo "BEAC $(printf '%6s' $(systemctl status $ethb|grep Memory:|sed 's%.*Memory: \(.*\)%\1%')) $(date --rfc-3339=seconds) status: $(systemctl status $ethb|grep Active:|sed 's%.*Active: \(.*\)%\1%')"
}
function vst {
  echo "VALI $(printf '%6s' $(systemctl status $ethv|grep Memory:|sed 's%.*Memory: \(.*\)%\1%')) $(date --rfc-3339=seconds) status: $(systemctl status $ethv|grep Active:|sed 's%.*Active: \(.*\)%\1%')"
}
function boo {
  if [ -f $p2 ]; then
    if [ "$1"          ];then h9=$1   ;else h9=$h3;fi;if [ $h9 -lt $l2rs ];then h9=$l2rs;fi
    if [ $h9 -gt $hors ];then h0=$hors;else h0=$h9;fi
    grep "BEAC.*$h2" $p2|sort -k8.1n|head -n$h9|tail -n$h0
  fi
}
function bo {
  h2='00:00';h3=0;h4=0
  if [ -f $p2 ]; then
    b8=$(grep BEAC $p2|tail -n1|sed 's%.* \([0-9]*-[0-9]*-[0-9]*\) \([0-9]*:[0-9]*\):.*%\1 \2%')
    h1=$(echo $b8|cut -d' ' -f1)
    if [ "$(echo $1|egrep '^[0-9]+:[0-9]+$')" ];then h2=$1;else if [ "$(echo $2|egrep '^[0-9]+:[0-9]+$')" ];then h2=$2;else h2=$(echo $b8|cut -d' ' -f2)                                  ;fi;fi
    if [ "$(echo $1|egrep '^[0-9]+$')"        ];then h3=$1;else if [ "$(echo $2|egrep '^[0-9]+$')"        ];then h3=$2;else h3=$(grep "BEAC.*$h2" $p2|sort -k8.1n|grep -n $h1|cut -d: -f1);fi;fi
    if [ ! "$h3" ];then
      h1=$(date -d "yesterday $h2" '+%Y-%m-%d')
      h3=$(grep "BEAC.*$h2" $p2|sort -k8.1n|grep -n $h1|cut -d: -f1)
    fi
    h4=$(grep "BEAC.*$h2" $p2|wc -l)
  fi 
}
function bh {
  [ "$1" ] || echo -e "BEAC BH $(printf '%3i' $((${1:-$hors}-$l2rs)))"
  tail -n$((${1:-$hors}+1)) $p2|head -n$((${1:-$hors}-$l2rs))
  [ "$1" ] || echo -e "BEAC BH $(printf '%3i' $l2rs)"
  tail -n$(($l2rs+1))       $p2|head -n$l2rs
  [ "$1" ] || { bo;echo -e "BEAC BO $(printf '%3i' $h3)";boo; }
  echo -e "BEAC BL";bk;echo -e "BEAC $m"
  [ "$1" ] || { echo -e "BEAC BM";bm;echo -e "BEAC $m"; }
  [ "$1" ] || { echo; }
  [ "$1" ] || { bst;vst; }
  [ "$1" ] || { ts; }
  [ "$1" ] || { cpu;cpd; }
  [ "$1" ] || { errors; }
}
function brs {
  if [ ! -f /home/eth/beacon.restart.inicio ]; then
    touch /home/eth/beacon.restart.inicio
    while [ -f /home/eth/beacon.restart.inicio ]; do
      b6=$(echo $H|sudo -S grep "lighthouse.$bpid.* INFO Synced " $p4 2>/dev/null|tail -n32|sed 's%.* epoch: \([0-9]*\).*%\1%'|sort -u)
      if [ "$(echo "$b6"|wc -l)" -eq 1 ]; then
        touch /home/eth/beacon.restart.interval
        b1=0
        while [ $b1 -lt 400 ] && [ -f /home/eth/beacon.restart.interval ]; do
          b4=$(echo $H|sudo -S grep "lighthouse.$bpid.* INFO " $p4 2>/dev/null|tail -n $pors|sed 's%.* INFO \([^ ]*\) .*%\1%'|sort -u)
          b5=$(echo "$b4"|head -n1)
          if [ "$(echo "$b4"|wc -l)" -eq 2 ] && [ "$(echo "$b4"|tail -n1)" = "Synced" ] && ([ "$b5" = "New" ] || [ "$b5" = "Processed" ]); then
            if [ $1 -ne 0 ]; then
              cp /etc/systemd/system/$ethb.service ~/$ethb.save
              b3=$(grep target-peers ~/$ethb.save|sed 's%.*target-peers \([0-9]*\).*%\1%')
              b3=$(($b3+$1))
              [ $b3 -ge 20 ] && [ $b3 -le 50 ] && sed "s%--target-peers [0-9]*%--target-peers $b3%" ~/$ethb.save > /etc/systemd/system/$ethb.service
            fi
            bk
            if [ "$2" ] || [ "$b7" != "OK" ]; then
              echo -e "RSTI $m" >> $p2
              resolvectl query smtp.gmail.com 2>/dev/null 1>&2
              [ "$2" = "vcreset" ] && { echo $H|sudo -S systemctl stop $ethv 2>/dev/null; }
              echo $H|sudo -S systemctl stop $ethb    2>/dev/null
              echo $H|sudo -S systemctl daemon-reload 2>/dev/null
              b1=400
              rm -f /home/eth/beacon.restart.interval
              if [ "$2" = "reboot" ]; then
                rm -f /home/eth/beacon.restart.inicio
                echo $H|sudo -S reboot 2>/dev/null
              else
                echo $H|sudo -S systemctl start $ethb 2>/dev/null
                [ "$2" = "vcreset" ] && { echo $H|sudo -S systemctl start $ethv 2>/dev/null; }
              fi
            fi
          fi
          sleep 3s
          b1=$(($b1+1))
        done
        rm -f /home/eth/beacon.restart.inicio
      fi 
      sleep 1s
    done
  fi
}
function bs {
  for l in $(echo $H|sudo -S grep -i 'lighthouse.*failed to' $p4 2>/dev/null|sed 's%.* \([0-9]*:[0-9]*:[0-9]*\) .*validator: \([0-9]*\).*epoch: \([0-9]*\).*%\1:\2:\3%'|sort -u|tail -n $1);do
    v=$(echo $l|cut -d: -f4)
    e=$(echo $l|cut -d: -f5)
    s=$(sudo grep -i "lighthouse.*attestation.*$v.*slot.*$e" $p4|sed 's%.*slot: \([0-9]*\).*%\1%'|sort -u)
    echo -e "${i}VALIDATOR $v, EPOCH $e, SLOT $s${f}"
    sudo grep "$v.*$e\|$s" $p4
  done
}
function ssp {
  echo -e "${i}QUER MESMO TRANSFERIR VALIDATORS?${f}"
  read rsp
  if [ "$rsp" = 'sim' ] && [ ! -f $dtdi/vc_slash ] && [ ! -f $dtdi/vc_lock ] && [ -f $dtdi/vc_keys ]; then
    vp;vd
    echo -e "${i}SAVE SLASHING PROTECTION DB${f}"
    echo $H|sudo -S cp $vldt/slashing_protection.sqlite /home/eth 2>/dev/null
    sudo chown eth:eth /home/eth/slashing_protection.sqlite
    if [ "$cunm" = "$znm3" ]; then
      scp /home/eth/slashing_protection.sqlite vpss:~
      echo -e "${i}SAVED SLASHING PROTECTION DB IN vpss${f}"
    else
      scp /home/eth/slashing_protection.sqlite ztc3.fruga.pt:~
      echo -e "${i}SAVED SLASHING PROTECTION DB IN ztc3${f}"
    fi
  fi
}
function ts {
  if [ $(timedatectl|grep synchronized:|sed 's%.*synchronized: \([a-z]*\)%\1%') = yes ];then c1=OK;else c1=NO;fi
  m='CLCK'
  m="$m $c1 $(printf '%3i' $(echo $H|sudo -S grep -i 'check system clock' $p4 2>/dev/null|wc -l))"
  m="$m $(date --rfc-3339=seconds)"
  m="$m status: $(systemctl status systemd-timesyncd|grep Active:|sed 's%.*Active: \(.*\)%\1%')"
  echo -e "$m"
}
function errors {
  e1=$(echo $H|sudo -S grep -v 'openethereum\|geth\[\|lighthouse' $p4 2>/dev/null|grep -i 'error' |wc -l)
  e2=$(echo $H|sudo -S grep -v 'openethereum\|geth\[\|lighthouse' $p4 2>/dev/null|grep -i 'error' |tail -n1|sed 's%.*hrv-zotac[0-9] *\(.*\)%\1%;s%:%%g;s%  *% %g'|cut -c1-53)
  e3=$(echo $H|sudo -S grep -i 'openethereum\|geth\[\|lighthouse' $p4 2>/dev/null|grep -v ' INFO '|wc -l)
  e4=$(echo $H|sudo -S grep -i 'openethereum\|geth\[\|lighthouse' $p4 2>/dev/null|grep -v ' INFO '|tail -n1|sed 's%.*[0-9]*:[0-9]*:[0-9]*\.[0-9][0-9][0-9]]* *\(.*\)%\1%;s%:%%g;s%:%%g;s%  *% %g'|cut -c1-53)
  m="ERRO"
  m="$m $(printf '%2i' $e1)"
  m="$m $(printf '%3i' $e3)"
  m="$m $(date --rfc-3339=seconds)"
  [ $e1 -gt 0 ] && m="$m sys: $e2"
  [ $e3 -gt 0 ] && m="$m eth2: $e4"
  echo -e "$m"
}

[ "$1" = "ts"  ] && { ts; }
[ "$1" = "es"  ] && { errors; }
[ "$1" = "cpu" ] && { cpu;cpd; }
[ "$1" = "trs" ] && { [ "$(systemctl status systemd-timesyncd 2>/dev/null|grep -i masked)" ] || { uu "systemctl restart systemd-timesyncd"; };ts; }
[ "$1" = "vcp" ] && { ssp; }
[ "$1" = "rs"  ] && { rs; }
[ "$1" = "ds"  ] && { ds; }
[ "$1" = "rq"  ] && { rq $2; }
[ "$1" = "cr"  ] && { cr; }
[ "$1" = "sr"  ] && { sr;sf; }
[ "$1" = "gs"  ] && { gs;echo -e "GETH $m"; }
[ "$1" = "gl"  ] && { gk;echo -e "GETH $m"; }
[ "$1" = "ol"  ] && { ok;echo -e "OETH $m"; }
[ "$1" = "glf" ] && { gk;echo -e "GETH $m" >> $p5; }
[ "$1" = "olf" ] && { ok;echo -e "OETH $m" >> $p6; }
[ "$1" = "bl"  ] && { bk;echo -e "BEAC $m"; }
[ "$1" = "bm"  ] && { bm;echo -e "BEAC $m"; }
[ "$1" = "blf" ] && { bk;echo -e "BEAC $m" >> $p2; }
[ "$1" = "bmf" ] && { bm;echo -e "BEAC $m" >> $p3; }
[ "$1" = "gh"  ] && { tail -n ${2:-$hors} $p5;gk;echo -e "GETH $m\n";gst;ts;cpu;cpd;errors; }
[ "$1" = "oh"  ] && { tail -n ${2:-$hors} $p6;ok;echo -e "OETH $m\n";ost;ts;cpu;cpd;errors; }
[ "$1" = "bh"  ] && { [ -f $p2 ] && { bh $2; } }
[ "$1" = "bhr" ] && { [ -f $p2 ] && { bhr; } }
[ "$1" = "bo"  ] && { bo $2 $3;boo; }
[ "$1" = "gkr" ] && { g7;[ "$g7" != "OK" ] && grs ${2:-0}; }
[ "$1" = "okr" ] && { o7;[ "$o7" != "OK" ] && ors ${2:-0}; }
[ "$1" = "bkr" ] && { b7;[ "$b7" != "OK" ] && brs ${2:-0}; }
[ "$1" = "grs" ] && { grs ${2:-0}; }
[ "$1" = "ors" ] && { ors ${2:-0}; }
[ "$1" = "srs" ] && { brs ${2:-0} reboot; }
[ "$1" = "brs" ] && { brs ${2:-0} bnreset; }
[ "$1" = "lrs" ] && { brs ${2:-0} vcreset; }
[ "$1" = "bs"  ] && { bs  ${2:-1}; }

# lista servicos & portas
[ "$1" = "ll" ] && { uu "systemctl list-units $pate $patp $patf"; }
[ "$1" = "lp" ] && { netstat -tulpn; }
# outros journal system/lighthouse
[ "$1" = "el" ] && { echo $H|sudo -S grep -i 'openethereum\|geth\[\|lighthouse' $p4 2>/dev/null|if [ "$2" ];then grep -i "[a-z]* [0-9]* $2";else grep -v ' INFO ';fi; }
[ "$1" = "sl" ] && { echo $H|sudo -S grep -v 'openethereum\|geth\[\|lighthouse' $p4 2>/dev/null|if [ "$2" ];then grep -i "[a-z]* [0-9]* $2";else grep -i 'error' ;fi; }
[ "$1" = "np" ] && { g2;b2;echo -e "PEERS: GETH ${g2:-0}, BEACON ${b2:-0}"; }
[ "$1" = "ws" ] && { uu "ufw status numbered"; }
[ "$1" = "wa" ] && if [ "$(echo $H|sudo -S ufw status 2>/dev/null|grep -i inactive)" ];then echo -e "${i}ARRANCA FIREWALL${f}";sudo ufw enable; else echo -e "${i}FIREWALL JA ACTIVE${f}";fi
[ "$1" = "wpr" ] && { uu "ufw disable"; }

# journal
[ "$1" = "yj" ] && { jb; }
[ "$1" = "ej" ] && { jb "-u $pate"; }
[ "$1" = "gj" ] && { jb "-u $ethg"; }
[ "$1" = "oj" ] && { jb "-u $etho"; }
[ "$1" = "bj" ] && { jb "-u $ethb"; }
[ "$1" = "vj" ] && { jb "-u $ethv"; }
[ "$1" = "pj" ] && { jb "-u $ethp"; }
[ "$1" = "nj" ] && { jb "-u $ethn"; }
[ "$1" = "fj" ] && { jb "-u $ethf"; }
[ "$1" = "xj" ] && { jb "-u $plex"; }
[ "$1" = "rj" ] && { jb "-u $trrt"; }
[ "$1" = "sj" ] && { jb "-u $dnsd"; }
# arranca
[ "$1" = "ga" ] && { dr;ga; }
[ "$1" = "oa" ] && { dr;oa; }
[ "$1" = "ba" ] && { dr;ba; }
[ "$1" = "va" ] && { dr;va; }
[ "$1" = "pa" ] && { dr;pa; }
[ "$1" = "na" ] && { dr;na; }
[ "$1" = "fa" ] && { dr;fa; }
[ "$1" = "xa" ] && { dr;xa; }
[ "$1" = "ra" ] && { dr;ra; }
[ "$1" = "sa" ] && { dr;sa; }
# para & arranca & journal
[ "$1" = "gaj" ] && { dr;ga;jb "-u $ethg"; }
[ "$1" = "oaj" ] && { dr;oa;jb "-u $etho"; }
[ "$1" = "baj" ] && { dr;ba;jb "-u $ethb"; }
[ "$1" = "vaj" ] && { dr;va;jb "-u $ethv"; }
[ "$1" = "saj" ] && { dr;sa;jb "-u $dnsd"; }
[ "$1" = "gpa" ] && { gp;dr;ga;jb "-u $ethg"; }
[ "$1" = "opa" ] && { op;dr;oa;jb "-u $etho"; }
[ "$1" = "bpa" ] && { bp;dr;ba;jb "-u $ethb"; }
[ "$1" = "vpa" ] && { vp;dr;va;jb "-u $ethv"; }
[ "$1" = "xpa" ] && { xp;xa; }
[ "$1" = "rpa" ] && { rp;ra; }
[ "$1" = "spa" ] && { sp;sa;jb "-u $dnsd"; }
[ "$1" = "gpd" ] && { gp;gd; }
[ "$1" = "opd" ] && { op;od; }
[ "$1" = "bpd" ] && { bp;bd; }
[ "$1" = "vpd" ] && { vp;vd; }
[ "$1" = "xpd" ] && { xp;xd; }
[ "$1" = "rpd" ] && { rp;rd; }
[ "$1" = "spd" ] && { sp;sd; }
[ "$1" = "gea" ] && { ge;dr;ga;jb "-u $ethg"; }
[ "$1" = "oea" ] && { oe;dr;oa;jb "-u $etho"; }
[ "$1" = "bea" ] && { be;dr;ba;jb "-u $ethb"; }
[ "$1" = "vea" ] && { ve;dr;va;jb "-u $ethv"; }
[ "$1" = "xea" ] && { xe;xa; }
[ "$1" = "rea" ] && { re;ra; }
[ "$1" = "sea" ] && { se;sa;jb "-u $dnsd"; }
# enable
[ "$1" = "ge" ] && { ge; }
[ "$1" = "oe" ] && { oe; }
[ "$1" = "be" ] && { be; }
[ "$1" = "ve" ] && { ve; }
[ "$1" = "pe" ] && { pe; }
[ "$1" = "ne" ] && { ne; }
[ "$1" = "fe" ] && { fe; }
[ "$1" = "xe" ] && { xe; }
[ "$1" = "re" ] && { re; }
[ "$1" = "se" ] && { se; }
# para
[ "$1" = "fpr" ] && { fp; }
[ "$1" = "npr" ] && { np; }
[ "$1" = "ppr" ] && { pp; }
[ "$1" = "vpr" ] && { vp; }
[ "$1" = "bpr" ] && { bp; }
[ "$1" = "gpr" ] && { gp; }
[ "$1" = "opr" ] && { op; }
[ "$1" = "xpr" ] && { xp; }
[ "$1" = "rpr" ] && { rp; }
[ "$1" = "spr" ] && { sp; }
# disable
[ "$1" = "fds" ] && { fd; }
[ "$1" = "nds" ] && { nd; }
[ "$1" = "pds" ] && { pd; }
[ "$1" = "vds" ] && { vd; }
[ "$1" = "bds" ] && { bd; }
[ "$1" = "gds" ] && { gd; }
[ "$1" = "ods" ] && { od; }
[ "$1" = "xds" ] && { xd; }
[ "$1" = "rds" ] && { rd; }
[ "$1" = "sds" ] && { sd; }

if [ -z "$1" ]; then
  c1="\nprimeira letra"
  c1="$c1\ne\t\t$ethg $ethb $ethv"
  c1="$c1\ng\t\t$ethg"
  c1="$c1\no\t\t$etho"
  c1="$c1\nb\t\t$ethb"
  c1="$c1\nv\t\t$ethv"
  c1="$c1\np\t\t$ethp"
  c1="$c1\nn\t\t$ethn"
  c1="$c1\nf\t\t$ethf"
  c1="$c1\nx\t\t$plex"
  c1="$c1\nr\t\t$trrt"
  c1="$c1\ns\t\t$dnsd"
  c1="$c1\n"
  c1="$c1\nsegunda letra"
  c1="$c1\na\t\tarranca"
  c1="$c1\naj\t\tarranca\t& journal"
  c1="$c1\ne\t\tenable"
  c1="$c1\nj\t\tjournal"
  c1="$c1\npr\t\tpara"
  c1="$c1\nds\t\tdisable"
  c1="$c1\npd\t\tpara\t& disable"
  c1="$c1\npa\t\tpara\t& arranca\t& journal"
  c1="$c1\nea\t\tenable\t& arranca\t& journal"
  c1="$c1\nk [s]\t\tcheck s=curl"
  c1="$c1\nl [s]\t\tlog   s=curl"
  c1="$c1\n"
  c1="$c1\noutros"
  c1="$c1\ngrs [n]\t\t$ethg restart n=nodes to change"
  c1="$c1\nors [n]\t\t$etho restart n=nodes to change"
  c1="$c1\nbrs [n]\t\t$ethb restart n=nodes to change"
  if [ "$cunm" = "$znm3" ]; then
    c1="$c1\nvcp\t\t$ethv copy to $vnm3 server"
  else
    c1="$c1\nvcp\t\t$ethv copy to $znm3 server"
  fi
  c1="$c1\nsrs\t\tsystem restart"
  c1="$c1\nlrs\t\tlighthouse restart"
  c1="$c1\nyj\t\tsystem journal"
  c1="$c1\nsl [s]\t\tlista system journal  s=TOTAL"
  c1="$c1\nel [s]\t\tlista geth,lighthouse s=TOTAL"
  c1="$c1\nbs [n]\t\tbeacon errors com custo n=max erros"
  c1="$c1\nll\t\tlista servicos"
  c1="$c1\nlp\t\tlista portas"
  c1="$c1\nnp\t\tnode peers"
  c1="$c1\ngs\t\tgeth syncing"
  c1="$c1\nts\t\ttime report"
  c1="$c1\nes\t\terrors report"
  c1="$c1\ncpu\t\tcpu report"
  c1="$c1\nbh\t\tbeacon historic report"
  c1="$c1\nbhr\t\tbeacon historic recalculate"
  c1="$c1\ntrs\t\ttime sync restart"
  c1="$c1\nws\t\tfirewall status"
  c1="$c1\nwa\t\tfirewall arranca"
  c1="$c1\nwpr\t\tfirewall para"
  c1="$c1\ncr\t\tchange route"
  c1="$c1\nsr\t\tshow route & DNS"
  c1="$c1\nrs\t\treset netplan\t& dns\t& systemd-resolved"
  c1="$c1\nds\t\treset dns\t& systemd-resolved"
  c1="$c1\nrq\t\tdns query"
  echo -e "\n$c1\n"
fi

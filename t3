#!/bin/bash

source /home/eth/eth2/t1

function hlp { swb "install consencus client with lighthouse-${1:-stable} source using rust-${2:-stable}"; }

if [[ $cunm = $znm4 || $cunm = $inm5 || $cunm = $inm6 || $cunm = $vnm1 || $cunm = $vnm2 ]];then
  hlp
  if [[ -x $p02/.cargo/bin/rustup ]];then
    t6 ruv $2
  else
    swn 'BASE/RUST NEEDS >> ~/apt-rust.out';sex 'pwd'
    sudo apt install curl build-essential libssl-dev libudev-dev perl yasm                           -y &>> $p02/apt-rust.out
    sudo apt install git gcc g++ make cmake pkg-config llvm-dev libclang-dev clang protobuf-compiler -y &>> $p02/apt-rust.out
    swn 'RUST INSTALL';cd $p02;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs|sh;source "$HOME/.cargo/env"
  fi
  [[ -f $p00/lighthouse || -f $p02/.cargo/bin/lighthouse ]] || t6 luc $1
fi
t6 lpi
if [[ $cunm = $znm1 || $cunm = $znm2 || $cunm = $znm3 || $cunm = $znm4 || -f $p04/$s12.service ]];then
  if [[ -f $p04/$s12.service ]];then swu "cc ja instalado";else swu 'cc NAO DEVE SER INSTALADO AQUI';fi
else
  if [[ $cunm = $inm5 ]];then apip="$iip5";tarp=80;elif [[ $cunm = $inm6 ]];then apip="$iip6";tarp=80;else apip='127.0.0.1';tarp=80;fi
  othe=''
  othe="$othe --execution-endpoint http://$apip:8551 --execution-jwt $p58/jwt"
  othe="$othe --suggested-fee-recipient $s25"                                                                                                                 # bn level fees
  othe="$othe --validator-monitor-file $p58/pubkeys"                                                                                                          # monitor validators
  othe="$othe --prune-payloads false"                                                                                                                         # fetch/keep execution payloads default true
  if sht;then othe="$othe --builder http://$zip3:18550";else othe="$othe --builder http://$apip:18550";fi
  othe="$othe --state-cache-size 128"                                                                                                                         # default 32 to keep memory constrained during non-finality
  othe="$othe --subscribe-all-subnets --import-all-attestations --beacon-processor-work-queue-len 32768"                                                      # better income
  othe="$othe --disable-upnp"                                                                                                                                 # disable UPnP support
  if [[ $cunm = $inm5 ]];then othe="$othe --checkpoint-sync-url http://$iip6:5052";elif [[ $cunm = $inm6 ]];then othe="$othe --checkpoint-sync-url http://$iip5:5052";else othe="$othe --checkpoint-sync-url https://beaconstate.info";fi
  # othe="$othe --disable-duplicate-warn-logs"                                                                                                                # no logs on duplicate gossip messages
  # othe="$othe --execution-timeout-multiplier 1"                                                                                                             # multiply default execution timeouts
  # othe="$othe --slasher --slasher-broadcast false"                                                                                                          # only the proposer who includes proof of offenses in blocks earn rewards, not the identifier of offenses
  # othe="$othe --disable-backfill-rate-limiting"                                                                                                             # disable the backfill sync rate-limiting
  # othe="$othe --checkpoint-sync-url https://mainnet.checkpoint.sigp.io"
  # othe="$othe --purge-db"                                                                                                                                   # clean & checkpoint DB
  # othe="$othe --disable-lock-timeouts"                                                                                                                      # disable timeouts on internal locks
  # othe="$othe --monitoring-endpoint https://beaconcha.in/api/v1/client/metrics?apikey=$B&machine=$(snc $cunm)"                                              # monitor data for beaconcha.in app
  swu 'CONFIGURE BEACON';sex "mkdir -p $p16";cmw $p05 755 $meeu;sau eth2;sjw
  cmw $p16 700 eth2;touch $p05/vc_lock;cd $p02                                                                                                                # IMPORTANTE LOCK vc
  pp2p=9004;ndp || pp2p=9000
  cat <<-EOF > $s12.service
	[Unit]
	Description=Lighthouse Consensus Client BN
	Wants=network-online.target
	After=network-online.target
	
	[Service]
	User=eth2
	Group=eth2
	Restart=always
	RestartSec=60
	TimeoutStopSec=600
	RuntimeMaxSec=infinity
	ExecStart=$p00/lighthouse --datadir $p05 bn --network mainnet --port $pp2p --target-peers $tarp --http-address $apip --staking$othe
	ExecStopPost=+$p02/eth2/t7 BEACSTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
	
	[Install]
	WantedBy=multi-user.target
	EOF
  sex "mv $s12.service $p04";cmw $p04/$s12.service 644
fi
if [[ $cunm = $znm1 || $cunm = $znm2 || $cunm = $znm3 || $cunm = $inm5 || $cunm = $inm6 || $cunm = $vnm2 || -f $p04/$s13.service ]];then
  if [[ -f $p04/$s13.service ]];then swu "vc ja instalado";else swu 'vc NAO PODE SER INSTALADO AQUI';fi
else
  othe=''
  othe="$othe --builder-proposals --builder-boost-factor 100"                                                                                                 # factor/100*mev > local ? mev : local
  if sht;then
    othe="$othe --beacon-nodes http://$iip6:5052,http://$iip5:5052"
  else
    othe="$othe --beacon-nodes http://$vis1:5052"
  fi
  othe="$othe --suggested-fee-recipient $s25"                                                                                                                 # vc level fees
  othe="$othe --broadcast subscriptions,attestations,blocks,sync-committee"                                                                                   # broadcast to all beacon nodes
  # othe="$othe --monitoring-endpoint https://beaconcha.in/api/v1/client/metrics?apikey=$B&machine=$(snc $cunm)"                                              # monitor data for beaconcha.in app
  sau eth3;cd $p02
  if [[ ! -f $p05/vc_keys  && -d $p19 && $(ls $p19 2>$p03)          ]];then swu 'IMPORT KEYS';sex "mkdir -p $p05";cmw $p05 755 $meeu;imk;[[ -f $p17/validator_definitions.yml ]] && touch $p05/vc_keys;fi
  if [[ ! -f $p05/vc_lock  && -f $p05/vc_keys                       ]];then swn "\nDISABLE VC";touch $p05/vc_lock;fi
  if [[   -f $p05/vc_lock  && -f $p05/vc_keys && ! -f $p05/vc_slash ]];then sex "mkdir -p $p17";cmw $p17 755 $meeu;sis $p02/$(basename $p18);svd;fi
  if [[   -f $p05/vc_lock  && -f $p05/vc_keys                       ]];then
    swu 'vc CONFIG'
    cat <<-EOF > $s13.service
		[Unit]
		Description=Lighthouse Consensus Client VC
		Wants=network-online.target
		After=network-online.target
		ConditionPathExists=!$p05/vc_lock
		ConditionPathExists=$p05/vc_keys
		
		[Service]
		User=eth3
		Group=eth3
		Restart=always
		RestartSec=60
		TimeoutStopSec=600
		RuntimeMaxSec=infinity
		ExecStart=$p00/lighthouse --datadir $p05 vc --network mainnet$othe
		ExecStopPost=+$p02/eth2/t7 VALISTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
		
		[Install]
		WantedBy=multi-user.target
		EOF
    sex "mv $s13.service $p04";cmw $p04/$s13.service 644
    swb 'VC CONFIGURADO VERIFICAR TUDO (LOCK & SLASH DB)'
  fi
fi

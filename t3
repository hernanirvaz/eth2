#!/bin/bash

source /home/eth/eth2/t1

if [ -x ~/lighthouse ] && [ ! -d ~/lighthouse ]; then
  echo $H|sudo -S mv ~/lighthouse /usr/local/bin 2>/dev/null
  echo $H|sudo -S chmod 755 /usr/local/bin/lighthouse 2>/dev/null
fi

if [ -x /usr/local/bin/lighthouse ]; then
  if [ ! -f /etc/systemd/system/$ethb.service ] && [ "$cunm" != "$znm1" ] && [ "$cunm" != "$vnm1" ]; then
    user="eth2"
    # slots per restore point after init can't be changed
    sprp=1024 # Yearly Disk Usage  12.8GB
    sprp=512  # Yearly Disk Usage  25.6GB
    sprp=256  # Yearly Disk Usage  51.2GB
    sprp=128  # Yearly Disk Usage 102.4GB
    sprp=2048 # Yearly Disk Usage   6.4GB default use disk space for slasher (256GB) -> more income
    # how many peers it should try to find and maintain
    tarp=50 # default
    tarp=25 # less bandwidth/load for gossip - too low (<25) and block proposals start getting orphaned or even missed
    bcnd="--http-address 127.0.0.1"
    [ "$cunm" = "$znm2" ] && bcnd="--http-address $zip2"
    [ "$cunm" = "$vnm1" ] && bcnd="--http-address $vip1"
    [ "$cunm" = "$vnm2" ] && bcnd="--http-address $vip2"
    if [ "$B" = "mainnet" ]; then
      blkc=""
      endp="http://$zip1:8545,$E"
    else
      blkc=" --testnet $B"
      endp="$E"
    fi
    echo -e "${i}CONFIGURE BEACON${f}"
    echo $H|sudo -S mkdir -p $becn 2>/dev/null
    sudo chmod 700 $becn
    sudo chown $meeu:$meeu $dtdi
    # IMPORTANTE LOCK VALIDATOR CLIENTE
    touch $dtdi/vc_lock
    #t6 vpr
    t6 bpr
    cd ~
    if ! id $user &>/dev/null;then sudo useradd --no-create-home --shell /bin/false $user;fi
    sudo chown $user:$user $becn
    # --slasher --validator-monitor-auto --subscribe-all-subnets --import-all-attestations --disable-upnp
    # --checkpoint-sync-url https://1q1s6o6cB6Jysu7KKlbLUYiOdAM:8974468780164028652df958a69fbd30@eth2-beacon-mainnet.infura.io
    cat <<-EOF > $ethb.service
		[Unit]
		Description=eth2 beacon service
		Wants=network-online.target
		After=network-online.target
		
		[Service]
		User=$user
		Group=$user
		Restart=always
		RestartSec=10
		ExecStart=/usr/local/bin/lighthouse$blkc --datadir $dtdi bn --target-peers $tarp $bcnd --staking --eth1-endpoints $endp --subscribe-all-subnets --import-all-attestations
		ExecStopPost=/home/eth/eth2/t8mail BEACSTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
		
		[Install]
		WantedBy=multi-user.target
		EOF
    sudo mv $ethb.service /etc/systemd/system/$ethb.service
    sudo chmod 644 /etc/systemd/system/$ethb.service
  else
    echo -e "${i}BEACON JA CONFIGURADO${f}"
  fi
  if [ "$cunm" = "$znm2" ] || [ "$cunm" = "$vnm3" ]; then
    user="eth3"
    vlcl="--beacon-nodes http://127.0.0.1:5052,https://1q1s6o6cB6Jysu7KKlbLUYiOdAM:8974468780164028652df958a69fbd30@eth2-beacon-mainnet.infura.io"
    if [ "$B" = "mainnet" ]; then
      blkc=""
    else
      blkc=" --testnet $B"
    fi
    cd ~
    if [ ! -f $dtdi/vc_keys ] && [ -d $HOME/$D ] && [ "$(ls -A $HOME/$D)" ]; then
      echo -e "${i}IMPORT VALIDATOR KEYS & INIT SLASH PROTECTION${f}"
      echo $H|sudo -S mkdir -p $dtdi 2>/dev/null
      sudo chown $meeu:$meeu $dtdi
      if ! id $user &>/dev/null;then sudo useradd --no-create-home --shell /bin/false $user;fi
      echo -e "STORE($K)\n"
      lighthouse$blkc --datadir $dtdi account validator import --directory $HOME/$D
      [ -f $vldt/validator_definitions.yml ] && touch $dtdi/vc_keys
    fi
    if [ ! -f $dtdi/vc_lock ] && [ -f $dtdi/vc_keys ]; then
      echo -e "${i}BLOQUEAR VALIDATOR EXECUTE${f}"
      echo -e "sudo chmod 777 $vldt"
      echo -e "sudo chmod 666 $vldt/slashing_protection.sqlite*"
      echo -e "t6 vpr;t6 vds"
      touch $dtdi/vc_lock
    fi
    if [ ! -f $dtdi/vc_slash ] && [ -f $dtdi/vc_lock ] && [ -f $dtdi/vc_keys ]; then
      echo -e "${i}COPIAR $vldt/slashing_protection.sqlite*${f}"
      echo $H|sudo -S mkdir -p $vldt 2>/dev/null
      sudo chown $meeu:$meeu $vldt
      if [ -f ~/slashing_protection.sqlite ]; then
        sudo rm $vldt/slashing_protection.sqlite $vldt/slashing_protection.sqlite-journal
        cp ~/slashing_protection.sqlite $vldt
        [ -f $vldt/slashing_protection.sqlite ] && { touch $dtdi/vc_slash; }
        chmod 600 $vldt/slashing_protection.sqlite
        chown $user:$user $vldt/slashing_protection.sqlite
      fi
      sudo chown $user:$user $vldt
      sudo chmod 700 $vldt
    fi
    if [ ! -f /etc/systemd/system/$ethv.service ] && [ -f $dtdi/vc_slash ] && [ -f $dtdi/vc_lock ] && [ -f $dtdi/vc_keys ]; then
      echo -e "${i}CONFIGURE VALIDATOR${f}"
      echo $H|sudo -S mkdir -p $vldt 2>/dev/null
      if ! id $user &>/dev/null;then sudo useradd --no-create-home --shell /bin/false $user;fi
      sudo chown -R $user:$user $vldt
      sudo chmod 700 $vldt
      cat <<-EOF > $ethv.service
			[Unit]
			Description=eth2 validator service
			Wants=network-online.target
			After=network-online.target
			
			[Service]
			User=$user
			Group=$user
			Restart=always
			RestartSec=10
			ExecStart=/usr/local/bin/lighthouse$blkc --datadir $dtdi vc $vlcl
			ExecStopPost=/home/eth/eth2/t8mail VALISTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
			
			[Install]
			WantedBy=multi-user.target
			EOF
      sudo mv $ethv.service /etc/systemd/system/$ethv.service
      sudo chmod 644 /etc/systemd/system/$ethv.service
      echo -e "${i}VALIDATOR CONFIGURADO VERIFICAR TUDO (LOCK & SLASH DB)${f}"
    else
      echo -e "${i}VALIDATOR JA CONFIGURADO OR LOCKED ($dtdi/vc_lock)${f}"
    fi
  else
    echo -e "${i}VALIDATOR NAO DEVE SER INSTALADO AQUI${f}"
  fi
else
  if [ "$cunm" = "$znm1" ] || [ "$cunm" = "$vnm1" ]; then
    if [ -x ~/.cargo/bin/rustup ]; then
      if [ "$1" ]; then
        echo -e "${i}RUST OVERRIDE SET $1${f}"
        rustup override set $1
      else
        echo -e "${i}UPDATE RUST${f}"
        source ~/.cargo/env
        rustup update
      fi
    else
      echo -e "${i}INSTALAR DEPENDENCIAS RUST${f}"
      echo $H|sudo -S apt install -y git gcc g++ make cmake pkg-config libssl-dev build-essential libudev-dev perl yasm 2>/dev/null
      echo -e "${i}INSTALL RUST${f}"
      cd ~
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    fi
    source ~/.cargo/env
    if [ -f /etc/systemd/system/$etho.service ]; then
      if [ -f ~/openethereum/README.md ]; then
        cd ~/openethereum
        make clean
        cargo clean
      else
        cd ~
        echo $H|sudo -S rm -rf ~/openethereum 2>/dev/null
        git clone https://github.com/openethereum/openethereum
        cd ~/openethereum
      fi
      git fetch
      t=$(git rev-list --tags --max-count=1)
      git checkout $(git describe --tags $t)
      echo -e "${i}VAI COMPILAR OPEN ETHEREUM${f}"
      cargo build --release --features final
      if [ $? -eq 0  ] && [ -x ~/openethereum/target/release/openethereum ]; then
        if [ -x /usr/local/bin/openethereum ]; then
          echo $H|sudo -S cp /usr/local/bin/openethereum /usr/local/bin/openethereum.save 2>/dev/null
        fi
        echo $H|sudo -S cp ~/openethereum/target/release/openethereum /usr/local/bin 2>/dev/null
        echo $H|sudo -S chmod 755 /usr/local/bin/openethereum 2>/dev/null
      else
        echo -e "${i}NAO EXISTE OPENETHEREUM COMPILADO PARA INSTALAR${f}"
      fi
    fi
    if [ -f /etc/systemd/system/$ethg.service ]; then
      if [ -f ~/lighthouse/README.md ]; then
        cd ~/lighthouse
        make clean
        cargo clean
      else
        cd ~
        echo $H|sudo -S rm -rf ~/lighthouse 2>/dev/null
        git clone https://github.com/sigp/lighthouse.git
        cd ~/lighthouse
      fi
      git fetch
      t=$(git rev-list --tags --max-count=1)
      git checkout $(git describe --tags $t)
      echo -e "${i}VAI COMPILAR LIGHT${f}"
      make
      if [ $? -eq 0  ] && [ -x ~/.cargo/bin/lighthouse ]; then
        if [ "$cunm" = "$znm1" ]; then
          scp ~/.cargo/bin/lighthouse ztc2:~
          scp ~/.cargo/bin/lighthouse ztc3:~
        fi
        if [ "$cunm" = "$vnm1" ]; then
          scp ~/.cargo/bin/lighthouse vpss:~
        fi
        if [ -x /usr/local/bin/lighthouse ]; then
          echo $H|sudo -S cp /usr/local/bin/lighthouse /usr/local/bin/lighthouse.save 2>/dev/null
        fi
        echo $H|sudo -S cp ~/.cargo/bin/lighthouse /usr/local/bin 2>/dev/null
        echo $H|sudo -S chmod 755 /usr/local/bin/lighthouse 2>/dev/null
      else
        echo -e "${i}NAO EXISTE LIGHT COMPILADO PARA INSTALAR${f}"
      fi
    fi
  else
    echo -e "${i}RUST NAO DEVE SER INSTALADO AQUI${f}"
  fi
fi

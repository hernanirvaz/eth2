#!/bin/bash

source /home/eth/eth2/t1

if [[ -x $p0/lighthouse && ! -d $p0/lighthouse ]]; then
  sex "mv $p0/lighthouse $s0"
  sex "chmod 755 $s0/lighthouse*"
  sex "chown eth:eth $s0/lighthouse*"
fi

if [[ -x $s0/lighthouse ]]; then
  if [[ ! -f $s4/$n1.service && $cunm != $znm1 && $cunm != $vnm1 ]]; then
    user="eth2"
    # slots per restore point after init can't be changed
    sprp=1024 # Yearly Disk Usage  12.8GB
    sprp=512  # Yearly Disk Usage  25.6GB
    sprp=256  # Yearly Disk Usage  51.2GB
    sprp=128  # Yearly Disk Usage 102.4GB
    sprp=2048 # Yearly Disk Usage   6.4GB default use disk space for slasher (256GB) -> more income
    # how many peers it should try to find and maintain
    tarp=20 # less bandwidth/load for gossip - too low (<20) and block proposals start getting orphaned or even missed
    tarp=50 # default
    http=''                          # default
    http=' --http-address 127.0.0.1' # equivalent empty
    [[ $cunm = $znm2 ]] && http=" --http-address $zip2"
    [[ $cunm = $znm3 ]] && http=" --http-address $zip3"
    [[ $cunm = $znm4 ]] && http=" --http-address $zip4"
    [[ $cunm = $vnm1 ]] && http=" --http-address $vip1"
    [[ $cunm = $vnm2 ]] && http=" --http-address $vip2"
    if [[ $B = mainnet ]]; then
      blkc=''
      epge=" --eth1-endpoints http://$zip1:8545 --execution-endpoints http://$zip1:8551 --jwt-secrets $p7/jwt" # MERGE
      epge=" --eth1-endpoints http://$zip1:8545,https://eth-mainnet.alchemyapi.io/v2/vzq1DD3EX7ipGuKck4440uRuccDdVvTm,https://mainnet.infura.io/v3/65be3572c577449f86d92b2e69cd6b06,https://mainnet.infura.io/v3/2c680650de0443cf8ab433565e47a42d"
    else
      blkc=" --testnet $B"
      epge=" --eth1-endpoints $E --jwt-secrets $p7/jwt"
      epge=" --eth1-endpoints $E"
    fi
    swu 'CONFIGURE BEACON'
    sex "mkdir -p $p7"
    sex "chmod 700 $p7"
    sex "chown $meeu:$meeu $p1"
    # IMPORTANTE LOCK VALIDATOR CLIENTE
    touch $p1/vc_lock
    cd ~
    if ! id $user &>$s3;then sudo useradd --no-create-home --shell /bin/false $user;fi
    sex "chown $user:$user $p7"
    othe=''
    # othe="$othe --slasher --disable-upnp"
    # othe="$othe --validator-monitor-auto"
    # redundant beacon nodes
    othe="$othe --subscribe-all-subnets --import-all-attestations"
    # syncing from a recent finalized checkpoint
    # othe="$othe --checkpoint-sync-url https://1q1s6o6cB6Jysu7KKlbLUYiOdAM:8974468780164028652df958a69fbd30@eth2-beacon-mainnet.infura.io"
    othe="$othe --checkpoint-sync-url http://192.168.8.28:5052"
    # MERGE --execution-endpoints $epge --jwt-secrets $p7/jwt
    cat <<-EOF > $n1.service
		[Unit]
		Description=eth2 beacon service
		Wants=network-online.target
		After=network-online.target
		
		[Service]
		User=$user
		Group=$user
		Restart=always
		RestartSec=10
		ExecStart=$s0/lighthouse$blkc --datadir $p1 bn --target-peers $tarp$http --staking$epge$othe
		ExecStopPost=$p0/eth2/t8mail BEACSTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
		
		[Install]
		WantedBy=multi-user.target
		EOF
    sex "mv $n1.service $s4/$n1.service"
    sex "chmod 644 $s4/$n1.service"
  else
    swu 'BEACON JA CONFIGURADO'
  fi
  if [[ $cunm = $znm3 || $cunm = $vnm3 ]]; then
    user="eth3"
    # external beacon-nodes before MERGE
    # https://1q1s6o6cB6Jysu7KKlbLUYiOdAM:8974468780164028652df958a69fbd30@eth2-beacon-mainnet.infura.io
    # MERGE --suggested-fee-recipient $a0
    vlcl="--beacon-nodes http://$zip3:5052,http://$zip2:5052 --suggested-fee-recipient $a0"
    if [[ $B = mainnet ]]; then
      blkc=""
    else
      blkc=" --testnet $B"
    fi
    cd ~
    if [[ ! -f $p1/vc_keys && -d $HOME/$D && $(ls -A $HOME/$D) ]]; then
      swu 'IMPORT VALIDATOR KEYS & INIT SLASH PROTECTION'
      sex "mkdir -p $p1"
      sex "chown $meeu:$meeu $p1"
      if ! id $user &>$s3;then sudo useradd --no-create-home --shell /bin/false $user;fi
      swn "STORE($K)\n"
      lighthouse$blkc --datadir $p1 account validator import --directory $HOME/$D
      [[ -f $p8/validator_definitions.yml ]] && touch $p1/vc_keys
    fi
    if [[ ! -f $p1/vc_lock && -f $p1/vc_keys ]]; then
      swu 'BLOQUEAR VALIDATOR EXECUTE'
      swn "t6 vpr;t6 vds"
      swn "sudo chmod 777 $p8"
      swn "sudo chmod 666 $p8/slashing_protection.sqlite*"
      touch $p1/vc_lock
    fi
    if [[ ! -f $p1/vc_slash && -f $p1/vc_lock && -f $p1/vc_keys ]]; then
      sex "mkdir -p $p8"
      sex "chown $meeu:$meeu $p8"
      if [[ -f $p0/slashing_protection.sqlite ]]; then
        swu "COPIAR $p8/slashing_protection.sqlite*"
        sex "rm $p8/slashing_protection.sqlite $p8/slashing_protection.sqlite-journal"
        sex "cp $p0/slashing_protection.sqlite $p8"
        [[ -f $p8/slashing_protection.sqlite ]] && touch $p1/vc_slash
        sex "chmod 600 $p8/slashing_protection.sqlite"
        sex "chown $user:$user $p8/slashing_protection.sqlite"
      fi
      sex "chown $user:$user $p8"
      sex "chmod 700 $p8"
    fi
    if [[ ! -f $s4/$n3.service && -f $p1/vc_slash && -f $p1/vc_lock && -f $p1/vc_keys ]]; then
      swu 'CONFIGURE VALIDATOR'
      sex "mkdir -p $p8"
      if ! id $user &>$s3;then sudo useradd --no-create-home --shell /bin/false $user;fi
      sex "chown -R $user:$user $p8"
      sex "chmod 700 $p8"
      cat <<-EOF > $n3.service
			[Unit]
			Description=eth2 validator service
			Wants=network-online.target
			After=network-online.target
			
			[Service]
			User=$user
			Group=$user
			Restart=always
			RestartSec=10
			ExecStart=$s0/lighthouse$blkc --datadir $p1 vc $vlcl
			ExecStopPost=$p0/eth2/t8mail VALISTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
			
			[Install]
			WantedBy=multi-user.target
			EOF
      sex "mv $n3.service $s4/$n3.service"
      sex "chmod 644 $s4/$n3.service"
      swu 'VALIDATOR CONFIGURADO VERIFICAR TUDO (LOCK & SLASH DB)'
    else
      swn "VALIDATOR JA CONFIGURADO OR LOCKED ($p1/vc_lock)"
    fi
  else
    swu 'VALIDATOR NAO DEVE SER INSTALADO AQUI'
  fi
else
  if [[ $cunm = $znm1 || $cunm = $vnm1 ]]; then
    if [[ -x $p0/.cargo/bin/rustup ]]; then
      if [[ $1 ]]; then
        swn "RUST OVERRIDE SET $1"
        rustup override set $1
      else
        swu 'UPDATE RUST'
        source ~/.cargo/env
        rustup update
      fi
    else
      swu 'INSTALAR DEPENDENCIAS RUST'
      cex 'apt install git gcc g++ make cmake pkg-config llvm-dev libclang-dev clang libssl-dev build-essential libudev-dev perl yasm -y'
      swu 'INSTALL RUST'
      cd $p0
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    fi
    source $p0/.cargo/env
    if [[ -f $s4/$n0.service ]]; then
      if [[ -f $p0/lighthouse/README.md ]]; then
        cd $p0/lighthouse
        make clean
        cargo clean
      else
        cd $p0
        sex "rm -rf $p0/lighthouse"
        git clone https://github.com/sigp/lighthouse.git
        cd $p0/lighthouse
      fi
      git fetch
      t=$(git rev-list --tags --max-count=1)
      git checkout $(git describe --tags $t)
      swu 'VAI COMPILAR LIGHT'
      make
      if [[ $? -eq 0 && -x $p0/.cargo/bin/lighthouse ]]; then
        if [[ $cunm = $znm1 ]]; then
          scp $p0/.cargo/bin/lighthouse ztc2:~
          scp $p0/.cargo/bin/lighthouse ztc3:~
        fi
        if [[ $cunm = $vnm1 ]]; then
          scp $p0/.cargo/bin/lighthouse vpss:~
        fi
        if [[ -x $s0/lighthouse ]]; then
          sex "cp $s0/lighthouse $s0/lighthouse.save"
        fi
        sex "cp ~/.cargo/bin/lighthouse $s0"
        sex "chmod 755 $s0/lighthouse"
      else
        swu 'NAO EXISTE LIGHT COMPILADO PARA INSTALAR'
      fi
    fi
  else
    swu 'RUST NAO DEVE SER INSTALADO AQUI'
  fi
fi

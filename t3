#!/bin/bash

source /home/eth/eth2/t1

function hlp { swn "\n\ninstall consencus client with lighthouse-${1:-stable} source using rust-${2:-stable}\n"; }

if [[ $cunm = $znm2 || $cunm = $vnm1 ]];then                                                                                                                  # rust here
  hlp
  if [[ -x ${p[9]}/.cargo/bin/rustup ]];then
    t6 ruv $2                                                                                                                                                 # set/update rust version
  else
    swu 'RUST NEEDS';cex 'apt install curl build-essential gcc make git g++ cmake pkg-config llvm-dev libclang-dev clang libssl-dev libudev-dev perl yasm -y' # rust dependencies
    swu 'RUST INSTALL';cd ${p[9]};curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh;source "$HOME/.cargo/env"
  fi
  t6 luc $1                                                                                                                                                   # lighthouse upgrade/compile
fi
t6 lpi                                                                                                                                                        # propagate & install lighthouse
if [[ $cunm = $znm1 || $cunm = $vnm1 || -f $(pjp 4 71).service ]];then                                                                                        # cc not here
  if [[ -f $(pjp 4 71).service ]];then swu "cc ja instalado";else swu 'cc NAO DEVE SER INSTALADO AQUI';fi
else
  pubk='0x93bf23a587f11f9eca329a12ef51296b8a9848af8c0fe61201524b14cb85b0c6fbd3e427501cdfa3b28719bd1ed96fff,0x8235d97c3530b6261eec3c658dd158ae5ed98481ead16a33837a083924028393634a71515affa76dcd371b943ee733ab,0x88c2befbce7594c943a386573f03b8ce461457bf59267ffce3e6008b115d70259583ad5fe8d8b15487d84734a6ba8d17,0x814fa0dbba56e8823bd00935e5c67b09c468d5734e80e6574c5984e736300431761bf083ef247f75a73eb1b4c01bde9b,0xae1212d040fabbbd3e6947ecf4799ee5176a1d42e2848d8ebee030690aa4144143c30d32c52fb3931927355470c8f416,0xad71900411ae03e4c63f23d7823ac3754e2ec0b8855693e15632536de677aca9f45ffeaf080ce234cbf3967723f79d45,0xa96278aff172bdebb92e6312eb3b46b0b6ec58e5a9cad46f7958b8d795a97edfb425bc4f2cc5cf92b5a3355577ad6af5,0xb2063ebff899e91b70de66115a2a0e590b8695930126f9d7cad090ca7f19d47b262c7c21dd9208ff6d4c8eea307b4ad3,0x87615568c977431c53171ba39b1f559515e6273b5efe8b649eab88ba6a5abc7e2280bea2f61898b53079a1f1bd3f5caa,0xb5b0fc3d2ba577f3e2c7324f7ea4306f17eeee0f12c722f4fa83e45bf6c15477d50261bb2666c30f21ab71a26aeeeafb,0x89e65476ab56bd1e102569531453620ef805adc4dea9caaa671a9b78a9e7ab61e713d038599364c9321ccc7b50f6bafd,0xad37967c868bcbb69d73dcc82717bf5df57048703277ee48aaf64e753c71631bc17c46934da40fb5f8344390f9880c1a,0xaf5e6791b3cbd587268b8da1822f9b0398cbd796eb4e9af856f561217981d9f9469d7f06accd9ae9ebe1b87d338330b4,0x8606838b0ba9fcdcc2a61925305210cd3e44fe673d99bbb6f180242afa965f513bf7b8c298806171a05a12b6b3d5dd24,0x880c275f193c45276bd250f25092305e06f12d725ecf9761b29051c1fd9a43c8c15c31012316ebad8459c4268824cb34,0x8d7dcdd66f978549965d6ee6828adeaaf6ebb98e8dcb505d003e5369bc3513f090027e77faa0ae0246b6f08344872a73,0x867cf5fd6d05017ef9df4d6ff157e2a8e97bbeb1522de427e82092e485fe7f305b651767997b2a21b6c91d83218493a1,0xa2873632721623389d9bc5f455cb21e92244044cebd3bff6d5a809f78edde3de22c67ffc97a672c7ab573f7787c2c8bd'
  # slots per restore point after init can't be changed
  sprp=1024 # Yearly Disk Usage  12.8GB
  sprp=512  # Yearly Disk Usage  25.6GB
  sprp=256  # Yearly Disk Usage  51.2GB
  sprp=128  # Yearly Disk Usage 102.4GB
  sprp=2048 # Yearly Disk Usage   6.4GB default use disk space for slasher (256GB) -> more income
  # how many peers it should try to find and maintain
  tarp=20 # less bandwidth/load for gossip - too low (<20) and block proposals start getting orphaned or even missed
  tarp=50 # default
  http=''                          # default
  http=' --http-address 127.0.0.1' # equivalent empty
  [[ $cunm = $znm2 ]] && http=" --http-address $zip2"
  [[ $cunm = $znm3 ]] && http=" --http-address $zip3"
  [[ $cunm = $znm4 ]] && http=" --http-address $zip4"
  [[ $cunm = $vnm1 ]] && http=" --http-address $vip1"
  [[ $cunm = $vnm2 ]] && http=" --http-address $vip2"
  epec=" --eth1-endpoints http://$zip1:8545,https://eth-mainnet.alchemyapi.io/v2/vzq1DD3EX7ipGuKck4440uRuccDdVvTm,https://mainnet.infura.io/v3/65be3572c577449f86d92b2e69cd6b06,https://mainnet.infura.io/v3/2c680650de0443cf8ab433565e47a42d"
  epec=" --execution-endpoint http://$zip1:8551 --execution-jwt ${p[16]}/jwt"                                                                                 # MERGE
  epec="$epec --suggested-fee-recipient ${p[99]}"                                                                                                             # cc level fees
  othe=''
  othe="$othe --subscribe-all-subnets --import-all-attestations"                                                                                              # for redundant cc
  othe="$othe --validator-monitor-file ${p[16]}/pubkeys"                                                                                                      # monitor validators
  # othe="$othe --checkpoint-sync-url https://1q1s6o6cB6Jysu7KKlbLUYiOdAM:8974468780164028652df958a69fbd30@eth2-beacon-mainnet.infura.io"
  othe="$othe --checkpoint-sync-url http://192.168.8.31:5052"                                                                                                 # syncing from finalized checkpoint
  othe="$othe --disable-upnp"
  # othe="$othe --slasher"
  swu 'CONFIGURE BEACON';sex "mkdir -p ${p[16]}";cmw ${p[10]} 755 $meeu;sau eth2
  echo $pubk > ${p[10]}/pubkeys;sex "mv ${p[10]}/pubkeys ${p[16]}";cmw ${p[16]}/pubkeys 600 eth2
  cmw ${p[16]} 700 eth2;touch ${p[10]}/vc_lock;cd ${p[9]}                                                                                                     # IMPORTANTE LOCK vc
  pp2p=9000 # default
  cat <<-EOF > ${p[71]}.service
	[Unit]
	Description=beacon service
	Wants=network-online.target
	After=network-online.target
	
	[Service]
	User=eth2
	Group=eth2
	Restart=always
	RestartSec=10
  ExecStart=${p[0]}/lighthouse$(nwf) --datadir ${p[10]} bn --port $pp2p --target-peers $tarp$http --staking$epec$othe
	ExecStopPost=${p[9]}/eth2/t8mail BEACSTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
	
	[Install]
	WantedBy=multi-user.target
	EOF
  sex "mv ${p[71]}.service $(pjp 4 71).service";cmw $(pjp 4 71).service 644
fi
if [[ $cunm = $(vco) || -f ${p[10]}/vc_lock ]];then                                                                                                           # vc not here
  if [[ -f $(pjp 4 73).service ]];then swu "vc ja instalado";else swu 'vc NAO PODE SER INSTALADO AQUI';fi
else
  # external beacon-nodes before MERGE
  # https://1q1s6o6cB6Jysu7KKlbLUYiOdAM:8974468780164028652df958a69fbd30@eth2-beacon-mainnet.infura.io
  # MERGE --suggested-fee-recipient ${p[99]}
  epcc="--beacon-nodes http://$zip4:5052,http://$zip3:5052"                                                                                                   # cc order
  epcc="--beacon-nodes http://$zip4:5052,https://1q1s6o6cB6Jysu7KKlbLUYiOdAM:8974468780164028652df958a69fbd30@eth2-beacon-mainnet.infura.io,http://$zip3:5052"
  #epcc="$epcc --suggested-fee-recipient ${p[99]}"                                                                                                             # vc level fees
  sau eth3;cd ${p[9]}
  if [[ ! -f ${p[10]}/vc_keys && -d $HOME/$D && $(ls -A $HOME/$D) ]];then
    swu 'IMPORT KEYS';sex "mkdir -p ${p[10]}";cmw ${p[10]} 755 $meeu
    swn "STORE($K)\n";lighthouse$(nwf) --datadir ${p[10]} account validator import --directory $HOME/$D                                                       # import keys
    [[ -f ${p[17]}/validator_definitions.yml ]] && touch ${p[10]}/vc_keys                                                                                     # check work
  fi
  if [[ ! -f ${p[10]}/vc_lock && -f ${p[10]}/vc_keys                           ]];then swn "\n\nDISABLE VC ->\t$(vco)";touch ${p[10]}/vc_lock;fi              # vc so pode correr num servidor
  if [[   -f ${p[10]}/vc_lock && -f ${p[10]}/vc_keys && ! -f ${p[10]}/vc_slash ]];then
    sex "mkdir -p ${p[17]}";cmw ${p[17]} 755 $meeu
    if [[ -f ${p[9]}/$(basename ${p[31]}) ]];then swu 'INIT SLASH';sis eth3;else swb 'NAO HA SLASH (IMPORTANTE)';fi                                           # init slash db
    sex "chown -R eth3:eth3 ${p[17]}";cmw ${p[17]} 700 eth3
  fi
  if [[ -f ${p[10]}/vc_slash && -f ${p[10]}/vc_lock && -f ${p[10]}/vc_keys ]];then
    swu 'CONFIGURE vc'
    cat <<-EOF > ${p[73]}.service
		[Unit]
		Description=validator service
		Wants=network-online.target
		After=network-online.target
		
		[Service]
		User=eth3
		Group=eth3
		Restart=always
		RestartSec=10
		ExecStart=${p[0]}/lighthouse$(nwf) --datadir ${p[10]} vc $epcc
		ExecStopPost=${p[9]}/eth2/t8mail VALISTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
		
		[Install]
		WantedBy=multi-user.target
		EOF
    sex "mv ${p[73]}.service $(pjp 4 73).service";cmw $(pjp 4 73).service 644
    swu 'VC CONFIGURADO VERIFICAR TUDO (LOCK & SLASH DB)'
  fi
fi

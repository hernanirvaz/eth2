#!/bin/bash

source /home/eth/eth2/t1

if [[ -x $p0/lighthouse && ! -d $p0/lighthouse ]]; then
  echo $H|sudo -S mv ~/lighthouse $s0 2>$s3
  echo $H|sudo -S chmod 755 $s0/lighthouse 2>$s3
fi

if [[ -x $s0/lighthouse ]]; then
  if [[ ! -f $s4/$n1.service && $cunm != $znm1 && $cunm != $vnm1 ]]; then
    user="eth2"
    # slots per restore point after init can't be changed
    sprp=1024 # Yearly Disk Usage  12.8GB
    sprp=512  # Yearly Disk Usage  25.6GB
    sprp=256  # Yearly Disk Usage  51.2GB
    sprp=128  # Yearly Disk Usage 102.4GB
    sprp=2048 # Yearly Disk Usage   6.4GB default use disk space for slasher (256GB) -> more income
    # how many peers it should try to find and maintain
    tarp=50 # default
    tarp=20 # less bandwidth/load for gossip - too low (<20) and block proposals start getting orphaned or even missed
    http=''                          # default
    http=' --http-address 127.0.0.1' # equivalent empty
    http=" --http-address $zip3"
    [[ $cunm = $znm2 ]] && http=" --http-address $zip2"
    [[ $cunm = $znm3 ]] && http=" --http-address $zip3"
    [[ $cunm = $vnm1 ]] && http=" --http-address $vip1"
    [[ $cunm = $vnm2 ]] && http=" --http-address $vip2"
    # external eth1-endpoints before MERGE
    # https://eth-mainnet.alchemyapi.io/v2/vzq1DD3EX7ipGuKck4440uRuccDdVvTm
    # https://mainnet.infura.io/v3/65be3572c577449f86d92b2e69cd6b06
    # https://mainnet.infura.io/v3/2c680650de0443cf8ab433565e47a42d
    if [[ $B = mainnet ]]; then
      blkc=''
      epge=" --eth1-endpoints http://$zip1:8545 --execution-endpoints http://$zip1:8551 --jwt-secrets $p7/jwt" # MERGE
    else
      blkc=" --testnet $B"
      epge=" --eth1-endpoints $E --jwt-secrets $p7/jwt"
    fi
    echo -e "${i}CONFIGURE BEACON${f}"
    echo $H|sudo -S mkdir -p $p7 2>$s3
    sudo chmod 700 $p7
    sudo chown $meeu:$meeu $p1
    # IMPORTANTE LOCK VALIDATOR CLIENTE
    touch $p1/vc_lock
    #t6 vpr
    t6 bpr
    cd ~
    if ! id $user &>$s3;then sudo useradd --no-create-home --shell /bin/false $user;fi
    sudo chown $user:$user $p7
    othe=''
    # othe="$othe --slasher --disable-upnp"
    othe="$othe --validator-monitor-auto"
    # redundant beacon nodes
    # othe="$othe --subscribe-all-subnets --import-all-attestations"
    # syncing from a recent finalized checkpoint
    # othe="$othe --checkpoint-sync-url https://1q1s6o6cB6Jysu7KKlbLUYiOdAM:8974468780164028652df958a69fbd30@eth2-beacon-mainnet.infura.io"
    # othe="$othe --checkpoint-sync-url http://192.168.8.31:5052"
    # MERGE --execution-endpoints $epge --jwt-secrets $p7/jwt
    cat <<-EOF > $n1.service
		[Unit]
		Description=eth2 beacon service
		Wants=network-online.target
		After=network-online.target
		
		[Service]
		User=$user
		Group=$user
		Restart=always
		RestartSec=10
		ExecStart=$s0/lighthouse$blkc --datadir $p1 bn --target-peers $tarp$http --staking$epge$othe
		ExecStopPost=$p0/eth2/t8mail BEACSTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
		
		[Install]
		WantedBy=multi-user.target
		EOF
    sudo mv $n1.service $s4/$n1.service
    sudo chmod 644 $s4/$n1.service
  else
    echo -e "${i}BEACON JA CONFIGURADO${f}"
  fi
  if [[ $cunm = $znm2 || $cunm = $vnm3 ]]; then
    user="eth3"
    # external beacon-nodes before MERGE
    # https://1q1s6o6cB6Jysu7KKlbLUYiOdAM:8974468780164028652df958a69fbd30@eth2-beacon-mainnet.infura.io
    # MERGE --suggested-fee-recipient 0x5fbd22c7bca7bd640af691cadfd2747a5769ab33
    vlcl="--beacon-nodes http://$zip3:5052,http://$zip2:5052 --suggested-fee-recipient 0x5fbd22c7bca7bd640af691cadfd2747a5769ab33"
    if [[ $B = mainnet ]]; then
      blkc=""
    else
      blkc=" --testnet $B"
    fi
    cd ~
    if [[ ! -f $p1/vc_keys && -d $HOME/$D && $(ls -A $HOME/$D) ]]; then
      echo -e "${i}IMPORT VALIDATOR KEYS & INIT SLASH PROTECTION${f}"
      echo $H|sudo -S mkdir -p $p1 2>$s3
      sudo chown $meeu:$meeu $p1
      if ! id $user &>$s3;then sudo useradd --no-create-home --shell /bin/false $user;fi
      echo -e "STORE($K)\n"
      lighthouse$blkc --datadir $p1 account validator import --directory $HOME/$D
      [[ -f $p8/validator_definitions.yml ]] && touch $p1/vc_keys
    fi
    if [[ ! -f $p1/vc_lock && -f $p1/vc_keys ]]; then
      echo -e "${i}BLOQUEAR VALIDATOR EXECUTE${f}"
      echo -e "sudo chmod 777 $p8"
      echo -e "sudo chmod 666 $p8/slashing_protection.sqlite*"
      echo -e "t6 vpr;t6 vds"
      touch $p1/vc_lock
    fi
    if [[ ! -f $p1/vc_slash && -f $p1/vc_lock && -f $p1/vc_keys ]]; then
      echo -e "${i}COPIAR $p8/slashing_protection.sqlite*${f}"
      echo $H|sudo -S mkdir -p $p8 2>$s3
      sudo chown $meeu:$meeu $p8
      if [[ -f $p0/slashing_protection.sqlite ]]; then
        sudo rm $p8/slashing_protection.sqlite $p8/slashing_protection.sqlite-journal
        cp ~/slashing_protection.sqlite $p8
        [[ -f $p8/slashing_protection.sqlite ]] && touch $p1/vc_slash
        chmod 600 $p8/slashing_protection.sqlite
        chown $user:$user $p8/slashing_protection.sqlite
      fi
      sudo chown $user:$user $p8
      sudo chmod 700 $p8
    fi
    if [[ ! -f $s4/$n3.service && -f $p1/vc_slash && -f $p1/vc_lock && -f $p1/vc_keys ]]; then
      echo -e "${i}CONFIGURE VALIDATOR${f}"
      echo $H|sudo -S mkdir -p $p8 2>$s3
      if ! id $user &>$s3;then sudo useradd --no-create-home --shell /bin/false $user;fi
      sudo chown -R $user:$user $p8
      sudo chmod 700 $p8
      cat <<-EOF > $n3.service
			[Unit]
			Description=eth2 validator service
			Wants=network-online.target
			After=network-online.target
			
			[Service]
			User=$user
			Group=$user
			Restart=always
			RestartSec=10
			ExecStart=$s0/lighthouse$blkc --datadir $p1 vc $vlcl
			ExecStopPost=$p0/eth2/t8mail VALISTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
			
			[Install]
			WantedBy=multi-user.target
			EOF
      sudo mv $n3.service $s4/$n3.service
      sudo chmod 644 $s4/$n3.service
      echo -e "${i}VALIDATOR CONFIGURADO VERIFICAR TUDO (LOCK & SLASH DB)${f}"
    else
      echo -e "${i}VALIDATOR JA CONFIGURADO OR LOCKED ($p1/vc_lock)${f}"
    fi
  else
    echo -e "${i}VALIDATOR NAO DEVE SER INSTALADO AQUI${f}"
  fi
else
  if [[ $cunm = $znm1 || $cunm = $vnm1 ]]; then
    if [[ -x $p0/.cargo/bin/rustup ]]; then
      if [[ $1 ]]; then
        echo -e "${i}RUST OVERRIDE SET $1${f}"
        rustup override set $1
      else
        echo -e "${i}UPDATE RUST${f}"
        source ~/.cargo/env
        rustup update
      fi
    else
      echo -e "${i}INSTALAR DEPENDENCIAS RUST${f}"
      echo $H|sudo -S apt install -y git gcc g++ make cmake pkg-config llvm-dev libclang-dev clang libssl-dev build-essential libudev-dev perl yasm 2>$s3
      echo -e "${i}INSTALL RUST${f}"
      cd $p0
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    fi
    source $p0/.cargo/env
    if [[ -f $s4/$n0.service ]]; then
      if [[ -f $p0/lighthouse/README.md ]]; then
        cd $p0/lighthouse
        make clean
        cargo clean
      else
        cd $p0
        echo $H|sudo -S rm -rf $p0/lighthouse 2>$s3
        git clone https://github.com/sigp/lighthouse.git
        cd $p0/lighthouse
      fi
      git fetch
      t=$(git rev-list --tags --max-count=1)
      git checkout $(git describe --tags $t)
      echo -e "${i}VAI COMPILAR LIGHT${f}"
      make
      if [[ $? -eq 0 && -x $p0/.cargo/bin/lighthouse ]]; then
        if [[ $cunm = $znm1 ]]; then
          scp $p0/.cargo/bin/lighthouse ztc2:~
          scp $p0/.cargo/bin/lighthouse ztc3:~
        fi
        if [[ $cunm = $vnm1 ]]; then
          scp $p0/.cargo/bin/lighthouse vpss:~
        fi
        if [[ -x $s0/lighthouse ]]; then
          echo $H|sudo -S cp $s0/lighthouse $s0/lighthouse.save 2>$s3
        fi
        echo $H|sudo -S cp ~/.cargo/bin/lighthouse $s0 2>$s3
        echo $H|sudo -S chmod 755 $s0/lighthouse 2>$s3
      else
        echo -e "${i}NAO EXISTE LIGHT COMPILADO PARA INSTALAR${f}"
      fi
    fi
  else
    echo -e "${i}RUST NAO DEVE SER INSTALADO AQUI${f}"
  fi
fi

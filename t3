#!/bin/bash

source /home/eth/eth2/t1

function hlp { swn "\n\ninstall consencus client with lighthouse-${1:-stable} source using rust-${2:-stable}\n"; }

if [[ $cunm = $znm4 || $cunm = $znm2 || $cunm = $inm5 || $cunm = $vnm1 ]];then
  hlp
  if [[ -x $p02/.cargo/bin/rustup ]];then
    t6 ruv $2                                                                                                                                                 # rust update
  else
    swu 'BASE NEEDS';cex 'apt install curl build-essential libssl-dev libudev-dev perl yasm -y'                                                               # base dependencies
    swu 'RUST NEEDS';cex 'apt install git gcc g++ make cmake pkg-config llvm-dev libclang-dev clang protobuf-compiler -y'                                     # rust dependencies
    swu 'RUST INSTALL';cd $p02;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh;source "$HOME/.cargo/env"                                       # rust install
  fi
  [[ -f $p02/.cargo/bin/lighthouse ]] || t6 luc $1                                                                                                            # cc compile
fi
t6 lpi                                                                                                                                                        # cc propagate/install
if [[ $cunm = $znm1 || $cunm = $znm2 || $cunm = $znm3 || -f $p04/$s12.service ]];then
  if [[ -f $p04/$s12.service ]];then swu "cc ja instalado";else swu 'cc NAO DEVE SER INSTALADO AQUI';fi
else
  # slots per restore point after init can't be changed
  sprp=1024 # Yearly Disk Usage  12.8GB
  sprp=512  # Yearly Disk Usage  25.6GB
  sprp=256  # Yearly Disk Usage  51.2GB
  sprp=128  # Yearly Disk Usage 102.4GB
  sprp=2048 # Yearly Disk Usage   6.4GB default use disk space for slasher (256GB) -> more income
  # how many peers it should try to find and maintain
  tarp=20 # less bandwidth/load for gossip - too low (<20) and block proposals start getting orphaned or even missed
  tarp=50 # default
  http=''                          # default
  http=' --http-address 127.0.0.1' # equivalent empty
  [[ $cunm = $znm2 ]] && http=" --http-address $zip2"
  [[ $cunm = $znm3 ]] && http=" --http-address $zip3"
  [[ $cunm = $znm4 ]] && http=" --http-address $zip4"
  [[ $cunm = $inm5 ]] && http=" --http-address $iip5"
  [[ $cunm = $vnm1 ]] && http=" --http-address $vip1"
  epec=" --eth1-endpoints http://$zip1:8545,https://eth-mainnet.alchemyapi.io/v2/vzq1DD3EX7ipGuKck4440uRuccDdVvTm,https://mainnet.infura.io/v3/65be3572c577449f86d92b2e69cd6b06,https://mainnet.infura.io/v3/2c680650de0443cf8ab433565e47a42d"
  epec=" --eth1-endpoints http://$zip4:8545,http://$zip1:8545"
  epec=" --execution-endpoint http://$iip5:8551 --execution-jwt $p16/jwt"                                                                                     # MERGE
  epec="$epec --execution-timeout-multiplier 1"                                                                                                               # multiply default execution timeouts
  epec="$epec --suggested-fee-recipient $s26"                                                                                                                 # cc level fees
  othe=''
  othe="$othe --subscribe-all-subnets --import-all-attestations"                                                                                              # 5% more profitable
  othe="$othe --validator-monitor-file $p16/pubkeys"                                                                                                          # monitor validators
  othe="$othe --prune-payloads false"                                                                                                                         # fetch/keep execution payloads default true
  othe="$othe --builder http://$zip1:18550"                                                                                                                   # external payload mev-boost
  othe="$othe --builder-profit-threshold 20000000000000000"                                                                                                   # external payload only if reward >= 0.02 ETH
  othe="$othe --disable-upnp"                                                                                                                                 # disable UPnP support
  othe="$othe --disable-backfill-rate-limiting"                                                                                                               # disable the backfill sync rate-limiting
  if [[ $cust = hrv ]];then                                                                                                                                   # syncing from finalized checkpoint
    othe="$othe --checkpoint-sync-url http://$zip4:5052"
  else
    # othe="$othe --checkpoint-sync-url https://1q1s6o6cB6Jysu7KKlbLUYiOdAM:8974468780164028652df958a69fbd30@eth2-beacon-mainnet.infura.io"
    othe="$othe --checkpoint-sync-url https://mainnet.checkpoint.sigp.io"
  fi
  # othe="$othe --disable-lock-timeouts"                                                                                                                      # disable timeouts on internal locks
  # othe="$othe --slasher"
  # othe="$othe --monitoring-endpoint https://beaconcha.in/api/v1/client/metrics?apikey=$B&machine=$(snc $cunm)"                                              # monitor data for beaconcha.in app
  swu 'CONFIGURE BEACON';sex "mkdir -p $p16";cmw $p05 755 $meeu;sau eth2;if [[ -f jwt ]];then sjw eth2 $p16;else swb "needs $p16/jwt";fi
  echo ${!b[@]}|tr ' ' ',' > $p05/pubkeys;sex "mv $p05/pubkeys $p16";cmw $p16/pubkeys 600 eth2
  cmw $p16 700 eth2;touch $p05/vc_lock;cd $p02                                                                                                                # IMPORTANTE LOCK vc
  pp2p=9000;[[ $cunm = $cub1 ]] && pp2p=9004
  cat <<-EOF > $s12.service
	[Unit]
	Description=beacon service
	Wants=network-online.target
	After=network-online.target
	
	[Service]
	User=eth2
	Group=eth2
	Restart=always
	RestartSec=10
	ExecStart=$p00/lighthouse --datadir $p05 bn --network mainnet --port $pp2p --target-peers $tarp$http --staking$epec$othe
	PermissionsStartOnly=true
	ExecStopPost=$p02/eth2/t7 BEACSTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
	
	[Install]
	WantedBy=multi-user.target
	EOF
  sex "mv $s12.service $p04";cmw $p04/$s12.service 644
fi
if [[ ($cunm != $cuvc && $cunm != $nxvc) || -f $p04/$s13.service ]];then
  if [[ -f $p04/$s13.service ]];then swu "vc ja instalado";else swu 'vc NAO PODE SER INSTALADO AQUI';fi
else
  if [[ $cust = hrv ]];then
    epcc="--beacon-nodes http://$iip5:5052,http://$zip4:5052"
  else
    epcc="--beacon-nodes http://$vip1:5052"
  fi
  othe=''
  othe="$othe --suggested-fee-recipient $s26"                                                                                                                 # vc level fees
  othe="$othe --builder-proposals"                                                                                                                            # mev-boost
  # othe="$othe --monitoring-endpoint https://beaconcha.in/api/v1/client/metrics?apikey=$B&machine=$(snc $cunm)"                                              # monitor data for beaconcha.in app
  sau eth3;cd $p02
  if [[ ! -f $p05/vc_keys  && -d $p19 && $(ls $p19 2>$p03)          ]];then swu 'IMPORT KEYS';sex "mkdir -p $p05";cmw $p05 755 $meeu;imk;[[ -f $p17/validator_definitions.yml ]] && touch $p05/vc_keys;fi
  if [[ ! -f $p05/vc_lock  && -f $p05/vc_keys                       ]];then swn "\nDISABLE VC";touch $p05/vc_lock;fi
  if [[   -f $p05/vc_lock  && -f $p05/vc_keys && ! -f $p05/vc_slash ]];then sex "mkdir -p $p17";cmw $p17 755 $meeu;sis $p02/$(basename $p18);sex "chown -R eth3:eth3 $p17";cmw $p17 700 eth3;fi
  if [[   -f $p05/vc_slash && -f $p05/vc_lock &&   -f $p05/vc_keys  ]];then
    swu 'vc CONFIG'
    cat <<-EOF > $s13.service
		[Unit]
		Description=validator service
		Wants=network-online.target
		After=network-online.target
		
		[Service]
		User=eth3
		Group=eth3
		Restart=always
		RestartSec=10
		ExecStart=$p00/lighthouse --datadir $p05 vc --network mainnet $epcc$othe
		PermissionsStartOnly=true
		ExecStopPost=$p02/eth2/t7 VALISTP \$SERVICE_RESULT \$EXIT_CODE \$EXIT_STATUS
		
		[Install]
		WantedBy=multi-user.target
		EOF
    sex "mv $s13.service $p04";cmw $p04/$s13.service 644
    swb 'VC CONFIGURADO VERIFICAR TUDO (LOCK & SLASH DB)'
  fi
fi
